{"pages":[{"title":"关于我","text":"一个专注技术的修行者.","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"“webpack配置的一些总结”","text":"全局安装webpack npm install webpack -g 生成package.json npm init -y 安装webpack-dev-server到本地 npm install webpack-dev-server -D 仍然需要在本地安装webpack作为webpack-dev-server的依赖 npm install webpack -D 配置webpack.config.js文件 创建webpack.config.js文件 配置文件出入口 1234567891011121314151617181920212223//由于webpack是由Nodejs构建的，所以任何的Nodejs语法都支持//引入路径模块var path = require(&apos;path&apos;)//当以命令形式运行webpack或者webpack-dev-server的时候，工具会发现，我们没用提供要打包的文件入口和出口命令//此时，就会检查项目根目录中的配置文件 webpack.config.js 并读取这个文件，就拿到了导出的这个配置对象，然后根据对象进行打包//向外暴露出这个对象module.exports = { entry: path.join(__dirname, &apos;./src/main.js&apos;) //入口文件，需要打包的文件 , output: { //出口文件，需要打包到哪里去 path: path.join(__dirname, &apos;./dist/bundle.js&apos;) //输出路径 , filename: &apos;bundle.js&apos; }, mode: &apos;development&apos;, //设置mode，在4.0新增 } 配置一些功能：在webpack.config.js中配置 123456 devServer: { //配置webpack-dev-server open: true, //是否打开浏览器 contentBase: &apos;src&apos;, //指定托管的目录 hot: true, //是否启用热更新 port: 6000 //代理的端口}, 在package.json中配置 123&quot;script&quot;:{&quot;start:dev&quot;: &quot;webpack --open --port 3000 --contentBase src --hot&quot;} 需要将打包好的文件从虚拟内存中传入过来安装html-webpack-plugin npm install html-webpack-plugin -D 在webpack.config.js中配置这个插件 作用： 在内存中，根据只当的模板页面，生成一份内存中的首页，同时把打包好的bundle.js注入到页面底部 如果需要配置插件，需要在导出的对象中挂载一个 plugins:[] 注意：所有的第三方插件都在 plugins:[]中配置 与entry、output同级1234567plugins: [ new htmlWebpackPlugin({ template: path.join(__dirname, &apos;./src/index.html&apos;), //指定模板文件的目录 filename: &apos;index.html&apos; //设置生成的页面名称 }) ] 配置css-loader、less-loader、sass-loader 在main.js中引入css文件 import ‘./css/style.css’ 安装css-loader插件：npm install css-loader style-loader --save-dev import ‘./css/style.less’ 安装css-loader插件：npm install less-loader less --save-dev import ‘./css/style.sass’ 安装css-loader插件：npm install sass-loader node-sass --save-dev配置文件 在webpack.config.js配置sass 注意：使用npm命令时安装node-sass可能会报错，无法打包，此时建议切换成cnpm 切换方法 cmd运行nrm ls查看,然后切换nrm use cnpm即可，但是前提应该先在全局中安装nrm 12345678910111213module.exports = { ... module: { rules: [{ test: /\\.scss$/, use: [ &quot;style-loader&quot;, // creates style nodes from JS strings &quot;css-loader&quot;, // translates CSS into CommonJS &quot;sass-loader&quot; // compiles Sass to CSS, using Node Sass by default ] }] }}; 在webpack.config.js配置css 12345678910module.exports = { module: { rules: [ { test: /\\.css$/i, use: [&apos;style-loader&apos;, &apos;css-loader&apos;], }, ], },}; 在webpack.config.js配置less 12345678910module.exports = { module: { rules: [ { test: /\\.less$/, loader: &apos;less-loader&apos;, // compiles Less to CSS }, ], },}; 配置好基本的webpack.config.js文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//由于webpack是由Nodejs构建的，所以任何的Nodejs语法都支持//引入路径模块var path = require(&apos;path&apos;)//在内存中，根据只当的模板页面，生成一份内存中的首页，同时把打包好的bundle.js注入到页面底部//如果需要配置插件，需要在导出的对象中挂载一个 plugins:[]const htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)//当以命令形式运行webpack或者webpack-dev-server的时候，工具会发现，我们没用提供要打包的文件入口和出口命令//此时，就会检查项目根目录中的配置文件 webpack.config.js 并读取这个文件，就拿到了导出的这个配置对象，然后根据对象进行打包//向外暴露出这个对象module.exports = { entry: path.join(__dirname, &apos;./src/main.js&apos;) //入口文件，需要打包的文件 , output: { //出口文件，需要打包到哪里去 path: path.join(__dirname, &apos;./dist&apos;) //输出路径 , filename: &apos;bundle.js&apos; }, module: { rules: [{ test: /\\.css$/i, //配置css use: [&apos;style-loader&apos;, &apos;css-loader&apos;], }, { test: /\\.less$/i, //配置less use: [&apos;style-loader&apos;, &apos;css-loader&apos;, &apos;less-loader&apos;] }, { test: /\\.scss$/i, //配置sass use: [&apos;style-loader&apos;, &apos;css-loader&apos;, &apos;sass-loader&apos;] }], }, devServer: { //配置webpack-dev-server open: true, //是否打开浏览器 contentBase: &apos;src&apos;, //指定托管的目录 hot: true, //是否启用热更新 port: 2000 //代理的端口 }, mode: &apos;development&apos;, plugins: [ new htmlWebpackPlugin({ template: path.join(__dirname, &apos;./src/index.html&apos;), //指定模板文件的目录 filename: &apos;index.html&apos; //设置生成的页面名称 }) ]} 注意事项： 在webpack4.0以后，webpack新增了mode属性 打包命令有所变化 webpack 要打包的文件 -o 打包生成存放文件的路径 而且在package.json文件中，需要配置如下代码： 1234&quot;scripts&quot;: { &quot;dev&quot;: &quot;webpack --mode development&quot;, // 开发环境 &quot;build&quot;: &quot;webpack --mode production&quot;, // 生产环境 }, 在webpack.config.js中，同样需要配置如下代码：1mode: &apos;development&apos; // 设置mode 如果需要下载指定版本，输入以下命令： npm i -D webpack@3 // 3： webpack版本3最新","link":"/2019/06/22/“webpack配置的一些总结”/"},{"title":"“webpack配置的一些总结”","text":"全局安装webpack npm install webpack -g 生成package.json npm init -y 安装webpack-dev-server到本地 npm install webpack-dev-server -D 仍然需要在本地安装webpack作为webpack-dev-server的依赖 npm install webpack -D 配置webpack.config.js文件 创建webpack.config.js文件 配置文件出入口 1234567891011121314151617181920212223//由于webpack是由Nodejs构建的，所以任何的Nodejs语法都支持//引入路径模块var path = require(&apos;path&apos;)//当以命令形式运行webpack或者webpack-dev-server的时候，工具会发现，我们没用提供要打包的文件入口和出口命令//此时，就会检查项目根目录中的配置文件 webpack.config.js 并读取这个文件，就拿到了导出的这个配置对象，然后根据对象进行打包//向外暴露出这个对象module.exports = { entry: path.join(__dirname, &apos;./src/main.js&apos;) //入口文件，需要打包的文件 , output: { //出口文件，需要打包到哪里去 path: path.join(__dirname, &apos;./dist/bundle.js&apos;) //输出路径 , filename: &apos;bundle.js&apos; }, mode: &apos;development&apos;, //设置mode，在4.0新增 } 配置一些功能：在webpack.config.js中配置 123456 devServer: { //配置webpack-dev-server open: true, //是否打开浏览器 contentBase: &apos;src&apos;, //指定托管的目录 hot: true, //是否启用热更新 port: 6000 //代理的端口}, 在package.json中配置 123&quot;script&quot;:{&quot;start:dev&quot;: &quot;webpack --open --port 3000 --contentBase src --hot&quot;} 需要将打包好的文件从虚拟内存中传入过来安装html-webpack-plugin npm install html-webpack-plugin -D 在webpack.config.js中配置这个插件 作用： 在内存中，根据只当的模板页面，生成一份内存中的首页，同时把打包好的bundle.js注入到页面底部 如果需要配置插件，需要在导出的对象中挂载一个 plugins:[] 注意：所有的第三方插件都在 plugins:[]中配置 与entry、output同级1234567plugins: [ new htmlWebpackPlugin({ template: path.join(__dirname, &apos;./src/index.html&apos;), //指定模板文件的目录 filename: &apos;index.html&apos; //设置生成的页面名称 }) ] 配置css-loader、less-loader、sass-loader 在main.js中引入css文件 import ‘./css/style.css’ 安装css-loader插件：npm install css-loader style-loader --save-dev import ‘./css/style.less’ 安装css-loader插件：npm install less-loader less --save-dev import ‘./css/style.sass’ 安装css-loader插件：npm install sass-loader node-sass --save-dev配置文件 在webpack.config.js配置sass 注意：使用npm命令时安装node-sass可能会报错，无法打包，此时建议切换成cnpm 切换方法 cmd运行nrm ls查看,然后切换nrm use cnpm即可，但是前提应该先在全局中安装nrm 12345678910111213module.exports = { ... module: { rules: [{ test: /\\.scss$/, use: [ &quot;style-loader&quot;, // creates style nodes from JS strings &quot;css-loader&quot;, // translates CSS into CommonJS &quot;sass-loader&quot; // compiles Sass to CSS, using Node Sass by default ] }] }}; 在webpack.config.js配置css 12345678910module.exports = { module: { rules: [ { test: /\\.css$/i, use: [&apos;style-loader&apos;, &apos;css-loader&apos;], }, ], },}; 在webpack.config.js配置less 12345678910module.exports = { module: { rules: [ { test: /\\.less$/, loader: &apos;less-loader&apos;, // compiles Less to CSS }, ], },}; 配置好基本的webpack.config.js文件12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//由于webpack是由Nodejs构建的，所以任何的Nodejs语法都支持//引入路径模块var path = require(&apos;path&apos;)//在内存中，根据只当的模板页面，生成一份内存中的首页，同时把打包好的bundle.js注入到页面底部//如果需要配置插件，需要在导出的对象中挂载一个 plugins:[]const htmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;)//当以命令形式运行webpack或者webpack-dev-server的时候，工具会发现，我们没用提供要打包的文件入口和出口命令//此时，就会检查项目根目录中的配置文件 webpack.config.js 并读取这个文件，就拿到了导出的这个配置对象，然后根据对象进行打包//向外暴露出这个对象module.exports = { entry: path.join(__dirname, &apos;./src/main.js&apos;) //入口文件，需要打包的文件 , output: { //出口文件，需要打包到哪里去 path: path.join(__dirname, &apos;./dist&apos;) //输出路径 , filename: &apos;bundle.js&apos; }, module: { rules: [{ test: /\\.css$/i, //配置css use: [&apos;style-loader&apos;, &apos;css-loader&apos;], }, { test: /\\.less$/i, //配置less use: [&apos;style-loader&apos;, &apos;css-loader&apos;, &apos;less-loader&apos;] }, { test: /\\.scss$/i, //配置sass use: [&apos;style-loader&apos;, &apos;css-loader&apos;, &apos;sass-loader&apos;] }], }, devServer: { //配置webpack-dev-server open: true, //是否打开浏览器 contentBase: &apos;src&apos;, //指定托管的目录 hot: true, //是否启用热更新 port: 2000 //代理的端口 }, mode: &apos;development&apos;, plugins: [ new htmlWebpackPlugin({ template: path.join(__dirname, &apos;./src/index.html&apos;), //指定模板文件的目录 filename: &apos;index.html&apos; //设置生成的页面名称 }) ]} 注意事项： 在webpack4.0以后，webpack新增了mode属性 打包命令有所变化 webpack 要打包的文件 -o 打包生成存放文件的路径 而且在package.json文件中，需要配置如下代码： 1234&quot;scripts&quot;: { &quot;dev&quot;: &quot;webpack --mode development&quot;, // 开发环境 &quot;build&quot;: &quot;webpack --mode production&quot;, // 生产环境 }, 在webpack.config.js中，同样需要配置如下代码：1mode: &apos;development&apos; // 设置mode 如果需要下载指定版本，输入以下命令： npm i -D webpack@3 // 3： webpack版本3最新","link":"/2019/06/22/webpack配置的一些总结/"}],"tags":[{"name":"webpack","slug":"webpack","link":"/tags/webpack/"}],"categories":[{"name":"Vue","slug":"Vue","link":"/categories/Vue/"}]}