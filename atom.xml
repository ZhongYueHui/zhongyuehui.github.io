<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Just for fun</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhongyuehui.github.io/"/>
  <updated>2019-09-29T06:51:49.079Z</updated>
  <id>https://zhongyuehui.github.io/</id>
  
  <author>
    <name>zhong yuehui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React-Hooks自定义函数</title>
    <link href="https://zhongyuehui.github.io/2019/09/29/React-Hooks%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0/"/>
    <id>https://zhongyuehui.github.io/2019/09/29/React-Hooks自定义函数/</id>
    <published>2019-09-29T06:40:28.000Z</published>
    <updated>2019-09-29T06:51:49.079Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>自定义一个React-Hooks函数，让这个函数实现我们想要的一部分功能，比如实现实时监听窗口的大小</p></blockquote><p>&lt;!-- more --&gt;</p><h2>React-Hooks自定义函数</h2><ul><li>自定义一个Hooks函数，让他拥有获取当前窗口大小的功能，并且实时监听</li><li>注意：自定义Hooks函数时，必须使用<code>use</code>开头，否则会报错<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useCallback,useEffect,useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 自定义Hooks函数、注意：必须使用use开头，不然会报错</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">useWinSize</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 保存大小</span></span><br><span class="line">    <span class="hljs-keyword">const</span> [size , setSize]=useState(&#123; <span class="hljs-comment">// 设置默认值</span></span><br><span class="line">        width:<span class="hljs-built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">        higth:<span class="hljs-built_in">document</span>.documentElement.clientHeight</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-keyword">const</span> onResize=useCallback(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">        setSize(&#123;</span><br><span class="line">            width:<span class="hljs-built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">            higth:<span class="hljs-built_in">document</span>.documentElement.clientHeight</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,[])</span><br><span class="line">    useEffect(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="hljs-comment">// 监听窗口大小是否改变，改变调用onResize函数，重新获取大小</span></span><br><span class="line">        <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'resize'</span>,onResize,<span class="hljs-literal">false</span>)</span><br><span class="line">        <span class="hljs-comment">// 当组件被移除是取消监听</span></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">'resize'</span>,onResize)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,[])</span><br><span class="line">    <span class="hljs-comment">// 返回获取的大小</span></span><br><span class="line">    <span class="hljs-keyword">return</span> size</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example9</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> size=useWinSize()</span><br><span class="line">    <span class="hljs-keyword">return</span> (<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>页面当前的大小是:&#123;size.width&#125;*&#123;size.higth&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example9</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;自定义一个React-Hooks函数，让这个函数实现我们想要的一部分功能，比如实现实时监听窗口的大小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;React-Hooks自定义函数&lt;/h2&gt;
&lt;u
      
    
    </summary>
    
      <category term="React" scheme="https://zhongyuehui.github.io/categories/React/"/>
    
    
      <category term="React-Hooks" scheme="https://zhongyuehui.github.io/tags/React-Hooks/"/>
    
  </entry>
  
  <entry>
    <title>useRef获取DOM元素和保存变量</title>
    <link href="https://zhongyuehui.github.io/2019/09/29/useRef%E8%8E%B7%E5%8F%96DOM%E5%85%83%E7%B4%A0%E5%92%8C%E4%BF%9D%E5%AD%98%E5%8F%98%E9%87%8F/"/>
    <id>https://zhongyuehui.github.io/2019/09/29/useRef获取DOM元素和保存变量/</id>
    <published>2019-09-29T06:40:17.000Z</published>
    <updated>2019-09-29T06:58:58.276Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用useRef可以很轻松的让我们对DOM进行获取和修改</p></blockquote><p>&lt;!-- more --&gt;</p><h2>useRef获取DOM元素和保存变量</h2><h3>useRef获取DOM元素</h3><ul><li>我们定义一个input和一个button，点击button的时候获取input的value值<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useRef &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example8</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> inputE = useRef(<span class="hljs-literal">null</span>)</span><br><span class="line">    <span class="hljs-keyword">const</span> changeInput=<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">        inputE.current.value=<span class="hljs-string">'改变了'</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log(inputE)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> (<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line">        &lt;input ref=&#123;inputE&#125; type="text" /&gt;</span><br><span class="line">        &lt;button onClick=&#123;changeInput&#125;&gt;按下input改变value&lt;/button&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">      </span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>)</span></span><br><span class="line"><span class="hljs-xml">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3>保存变量</h3><ul><li><p>我们定义一个input，输入的时候就将当前输入的valu值显示出来<figure class="highlight cs hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; useRef ,useState&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function">export <span class="hljs-keyword">default</span> function <span class="hljs-title">Example8</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> inputE = useRef(<span class="hljs-literal">null</span>)</span><br><span class="line">    <span class="hljs-keyword">const</span> changeInput=()=&gt;&#123;</span><br><span class="line">        inputE.current.<span class="hljs-keyword">value</span>=<span class="hljs-string">'改变了'</span></span><br><span class="line">        console.log(inputE)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">const</span> [<span class="hljs-keyword">value</span> ,setValue]=useState(<span class="hljs-string">'嘻嘻'</span>) <span class="hljs-comment">// 设置状态和初始值</span></span><br><span class="line">    <span class="hljs-keyword">return</span> (&lt;div&gt;</span><br><span class="line">        &lt;input <span class="hljs-keyword">ref</span>=&#123;inputE&#125; type=<span class="hljs-string">"text"</span> /&gt;</span><br><span class="line">        &lt;button onClick=&#123;changeInput&#125;&gt;按下input改变<span class="hljs-keyword">value</span>&lt;/button&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &#123;<span class="hljs-comment">/* 保存value */</span>&#125;</span><br><span class="line">        &lt;input <span class="hljs-keyword">value</span>=&#123;<span class="hljs-keyword">value</span>&#125; onChange=&#123;(e)=&gt;(setValue(e.target.<span class="hljs-keyword">value</span>))&#125;/&gt;</span><br><span class="line">        &lt;p&gt;&#123;<span class="hljs-keyword">value</span>&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>这样当input的值发生变化的时候就更新value的值，保持同步</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;使用useRef可以很轻松的让我们对DOM进行获取和修改&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;useRef获取DOM元素和保存变量&lt;/h2&gt;
&lt;h3&gt;useRef获取DOM元素&lt;/h3&gt;
      
    
    </summary>
    
      <category term="React" scheme="https://zhongyuehui.github.io/categories/React/"/>
    
    
      <category term="React-Hooks" scheme="https://zhongyuehui.github.io/tags/React-Hooks/"/>
    
  </entry>
  
  <entry>
    <title>useMemo解决子组件重复执行的问题</title>
    <link href="https://zhongyuehui.github.io/2019/09/29/useMemo%E8%A7%A3%E5%86%B3%E5%AD%90%E7%BB%84%E4%BB%B6%E9%87%8D%E5%A4%8D%E6%89%A7%E8%A1%8C%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://zhongyuehui.github.io/2019/09/29/useMemo解决子组件重复执行的问题/</id>
    <published>2019-09-29T06:40:03.000Z</published>
    <updated>2019-09-29T06:51:36.052Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>React-Hooks的useMeno可以解决子组件重复执行的问题，使得代码执行效率会变高，尤其是设计到Ajax请求的时候，极大的优化了执行的流程</p></blockquote><p>&lt;!-- more --&gt;</p><h2>useMemo优化React Hooks程序性能</h2><ul><li><p>useMemo主要用来解决使用React-hooks产生的无用渲染的性能问题。使用function的形式来声明组件，失去了shouldCompnentUpdate（在组件更新之前）这个生命周期，也就是说我们没有办法通过组件更新前条件来决定组件是否更新。而且在函数组件中，也不再区分mount和update两个状态，这意味着函数组件的每一次调用都会执行内部的所有逻辑，就带来了非常大的性能损耗。useMemo和useCallback都是解决上述性能问题的</p></li><li><p>定义一个Example.js<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React,&#123;useState , useMemo&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Exmaple7</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> [xiaoming,setXiaoming]=useState(<span class="hljs-string">' Engine'</span>)</span><br><span class="line">    <span class="hljs-keyword">const</span> [xiaohong,setXiaohong]=useState(<span class="hljs-string">'xiaohong'</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button onClick=&#123;()=&gt;&#123;setXiaohong(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime())&#125;&#125;&gt;小红&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;button onClick=&#123;()=&gt;&#123;setXiaoming(new Date().getTime()+'小明走来')&#125;&#125;&gt;小明&lt;/</span>button&gt; </span><br><span class="line">            &lt;p&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="line">            &lt;ChildrenComponent name=&#123;xiaohong&#125;&gt;</span><br><span class="line">                &#123;xiaoming&#125;</span><br><span class="line">            &lt;<span class="hljs-regexp">/ChildrenComponent&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ChildrenComponent</span>(<span class="hljs-params">&#123;name,children&#125;</span>)</span>&#123; <span class="hljs-comment">// children就是组件包裹的那个&#123;xiaoming&#125;</span></span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'小红的方法'</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> name+<span class="hljs-string">'小红'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">const</span> xixi= useMemo(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>action(name),[name]) <span class="hljs-comment">// 这个是为了防止页面任意发生变化就调用shouldComponentUpdate生命周期函数，影响性能，只有name发生变化时才会去调用这个方法</span></span><br><span class="line">    <span class="hljs-keyword">return</span> (<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;xixi&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;children&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> &#123;/* &#123;xiaoming&#125;*/&#125;</span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>这样就解决了子组件重复执行的问题了，节省了性能的消耗</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;React-Hooks的useMeno可以解决子组件重复执行的问题，使得代码执行效率会变高，尤其是设计到Ajax请求的时候，极大的优化了执行的流程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;u
      
    
    </summary>
    
      <category term="React" scheme="https://zhongyuehui.github.io/categories/React/"/>
    
    
      <category term="React-Hooks" scheme="https://zhongyuehui.github.io/tags/React-Hooks/"/>
    
  </entry>
  
  <entry>
    <title>useReducer实现redux进行颜色的替换</title>
    <link href="https://zhongyuehui.github.io/2019/09/29/useReducer%E5%AE%9E%E7%8E%B0redux%E8%BF%9B%E8%A1%8C%E9%A2%9C%E8%89%B2%E7%9A%84%E6%9B%BF%E6%8D%A2/"/>
    <id>https://zhongyuehui.github.io/2019/09/29/useReducer实现redux进行颜色的替换/</id>
    <published>2019-09-29T06:39:53.000Z</published>
    <updated>2019-09-29T06:57:38.022Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们看一下如何使用useReducer实现redux进行颜色的替换,达到颜色共享的效果</p></blockquote><p>&lt;!-- more --&gt;</p><h2>useReducer实现redux进行颜色的替换</h2><ul><li><p>上次代码只是简单的进行了ui的显示，共享了颜色属性，现在我们需要改变共享的颜色属性，使用useReducer</p></li><li><p>首先，在Color.js中引入useReducer,进行reducer的编写，使用<code>action.type</code>作为修改的依据</p></li><li><p>Color.js<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; createContext,useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ColorContext = createContext(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> UPDATE_COLOR = <span class="hljs-string">"UPDATE_COLOR"</span>  <span class="hljs-comment">//定义action更改的常量</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> reducer = <span class="hljs-function">(<span class="hljs-params">state , action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">switch</span> (action.type) &#123; <span class="hljs-comment">// 根据type判断对state进行何种操作</span></span><br><span class="line">        <span class="hljs-keyword">case</span> <span class="hljs-string">'UPDATE_COLOR'</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> action.type</span><br><span class="line">        <span class="hljs-keyword">default</span>:</span><br><span class="line">            <span class="hljs-keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> Color = <span class="hljs-function"><span class="hljs-params">props</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> [color,dispatch]=useReducer(reducer,<span class="hljs-string">'blue'</span>) <span class="hljs-comment">//取出color和dispatch，方便后面共享</span></span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">        &lt;ColorContext.Provider value=&#123;&#123;color,dispatch&#125;&#125;&gt; <span class="hljs-comment">// 共享color</span></span><br><span class="line">            &#123;props.children&#125;</span><br><span class="line">        &lt;<span class="hljs-regexp">/ColorContext.Provider&gt;</span></span><br><span class="line"><span class="hljs-regexp">    )</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br></pre></td></tr></table></figure></p></li><li><p>我们已经将color和修改color的dispatch共享出去了，现在我们需要做的就是点击button将color的值进行修改</p></li><li><p>Button.js<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React,&#123;useContext&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> &#123;ColorContext,UPDATE_COLOR&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./Color'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Button</span>(<span class="hljs-params"></span>) </span>&#123; </span><br><span class="line">    <span class="hljs-keyword">const</span> &#123;dispatch&#125; = useContext(ColorContext) <span class="hljs-comment">//取出ColorContext传递过来的dispatch</span></span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">return</span> (<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;dispatch(&#123;type:UPDATE_COLOR,color:'yellow'&#125;)&#125;&#125;&gt;黄色<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> // 使用dispatch进行颜色的更改</span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;dispatch(&#123;type:UPDATE_COLOR,color:'red'&#125;)&#125;&#125;&gt;红色<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>按下按钮之后，就会对共享的color进行修改，实际上的原理就是</p><ol><li>首先将颜色属性共享出去</li><li>然后定义reducer对type进行判断后进行响应的操作</li><li>需要修改颜色属性的组件引入useContext使用上线文、ColorContext、还有定好的常量UPDATE_COLOR</li><li>因为ColorContext已经通过value将dispatch传递过来了，那么我们先拿到这个属性</li><li>因为dispatch这个属性在Color.js是在useReducer中修改state的</li><li>然后使用dispatch对type，color进行修改，修改后，这个时候state的color属性就不再是我们默认的blue了，而是我们修改后的属性了</li><li>又因为这个color属性是被共享的，所以我们点击button的时候修改了color属性，使得共享的组件color也发生了变化</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我们看一下如何使用useReducer实现redux进行颜色的替换,达到颜色共享的效果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;useReducer实现redux进行颜色的替换&lt;/h2&gt;
&lt;
      
    
    </summary>
    
      <category term="React" scheme="https://zhongyuehui.github.io/categories/React/"/>
    
    
      <category term="React-Hooks" scheme="https://zhongyuehui.github.io/tags/React-Hooks/"/>
    
  </entry>
  
  <entry>
    <title>useReducer代替redux</title>
    <link href="https://zhongyuehui.github.io/2019/09/29/useReducer%E4%BB%A3%E6%9B%BFredux/"/>
    <id>https://zhongyuehui.github.io/2019/09/29/useReducer代替redux/</id>
    <published>2019-09-29T06:39:39.000Z</published>
    <updated>2019-09-29T07:00:17.159Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>React-Hooks中提供的useReducer最大的好处就是让我们使用更简单的代码来完成redux的功能</p></blockquote><p>&lt;!-- more --&gt;</p><h2>useReducer代替redux</h2><ul><li><p>在/src目录下新建一个文件夹Example6，有了文件夹后，在文件夹下面建立一个showArea.js文件。代码如下：<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ShowArea</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="hljs-keyword">return</span> (<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;color:</span>'<span class="hljs-attr">blue</span>'&#125;&#125;&gt;</span>字体颜色为blue<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ShowArea</span><br></pre></td></tr></table></figure></p></li><li><p>显示区域写完后，新建一个Buttons.js文件，用来编写按钮，这个是两个按钮，一个红色一个黄色。先不写其他任何业务逻辑。<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Buttons</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button&gt;红色&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;button&gt;黄色&lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    )</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">export default Buttons</span></span><br></pre></td></tr></table></figure></p></li><li><p>然后再编写一个组合他们的Example6.js组件，引入两个新编写的组件ShowArea和Buttons，并用&lt;div&gt;标签给包裹起来。<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> ShowArea <span class="hljs-keyword">from</span> <span class="hljs-string">'./ShowArea'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Buttons <span class="hljs-keyword">from</span> <span class="hljs-string">'./Buttons'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example6</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">                &lt;ShowArea /&gt;</span><br><span class="line">                &lt;Buttons /&gt;</span><br><span class="line">        &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    )</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">export default Example6</span></span><br></pre></td></tr></table></figure></p></li><li><p>这步做完，需要到/src目录下的index.js中引入一下Example6.js文件，引入后React才能正确渲染出刚写的UI组件。<figure class="highlight coffeescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Example <span class="hljs-keyword">from</span> <span class="hljs-string">'./Example6/Example6'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Example /&gt;, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));</span><br></pre></td></tr></table></figure></p></li><li><p>做完这步可以简单的预览一下UI效果.</p></li></ul><h3>编写颜色共享组件color.js</h3><ul><li><p>有了UI组件后，就可以写一些业务逻辑了，这节课我们先实现状态共享，这个就是利用useContext。建立一个color.js文件，然后写入下面的代码。<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ColorContext = createContext(&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> Color = <span class="hljs-function"><span class="hljs-params">props</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">        &lt;ColorContext.Provider value=&#123;&#123;<span class="hljs-attr">color</span>:<span class="hljs-string">"blue"</span>&#125;&#125;&gt;</span><br><span class="line">            &#123;props.children&#125;</span><br><span class="line">        &lt;<span class="hljs-regexp">/ColorContext.Provider&gt;</span></span><br><span class="line"><span class="hljs-regexp">    )</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br></pre></td></tr></table></figure></p></li><li><p>代码中引入了createContext用来创建共享上下文ColorContext组件，然后我们要用<code>{props.children}</code>来显示对应的子组件。详细解释我在视频中讲解吧。</p></li><li><p>有了这个组件后，我们就可以把Example6.js进行改写，让她可以共享状态。<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> ShowArea <span class="hljs-keyword">from</span> <span class="hljs-string">'./ShowArea'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> Buttons <span class="hljs-keyword">from</span> <span class="hljs-string">'./Buttons'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Color &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./color'</span>;   <span class="hljs-comment">//引入Color组件</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example6</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;Color&gt;</span><br><span class="line">                &lt;ShowArea /&gt;</span><br><span class="line">                &lt;Buttons /&gt;</span><br><span class="line">            &lt;<span class="hljs-regexp">/Color&gt;</span></span><br><span class="line"><span class="hljs-regexp">            </span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example6</span><br></pre></td></tr></table></figure></p></li><li><p>然后再改写showArea.js文件，我们会引入useContext和在color.js中声明的ColorContext，让组件可以接收全局变量。<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React , &#123; useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; ColorContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./color'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ShowArea</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> &#123;color&#125; = useContext(ColorContext)</span><br><span class="line">    <span class="hljs-keyword">return</span> (<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;color:color&#125;&#125;</span>&gt;</span>字体颜色为&#123;color&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ShowArea</span><br></pre></td></tr></table></figure></p></li><li><p>这时候就通过useContext实现了状态的共享，可以到浏览器中看一下效果</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;React-Hooks中提供的useReducer最大的好处就是让我们使用更简单的代码来完成redux的功能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;useReducer代替redux&lt;/h
      
    
    </summary>
    
      <category term="React" scheme="https://zhongyuehui.github.io/categories/React/"/>
    
    
      <category term="React-Hooks" scheme="https://zhongyuehui.github.io/tags/React-Hooks/"/>
    
  </entry>
  
  <entry>
    <title>useReducer介绍和简单使用</title>
    <link href="https://zhongyuehui.github.io/2019/09/29/useReducer%E4%BB%8B%E7%BB%8D%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://zhongyuehui.github.io/2019/09/29/useReducer介绍和简单使用/</id>
    <published>2019-09-29T06:39:28.000Z</published>
    <updated>2019-09-29T06:56:01.979Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>React-Hooks的useReducer可以管理状态，容易测试</p></blockquote><p>&lt;!-- more --&gt;</p><h2>useReducer介绍和简单使用</h2><ul><li>useState 的替代方案。它接收一个形如 (state, action) =&gt; newState 的 reducer，并返回当前的 state 以及与其配套的 dispatch 方法。（如果你熟悉 Redux 的话，就已经知道它如何工作了。）</li></ul><h3>reducer是什么</h3><ul><li><p>它的兴起是从Redux广泛使用开始的，但不仅仅存在Redux中，可以使用JavaScript来完成Reducer操作。那reducer其实就是一个函数，这个函数接收两个参数，一个是状态，一个用来控制业务逻辑的判断参数<figure class="highlight pf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function countReducer(<span class="hljs-keyword">state</span>, action) &#123;</span><br><span class="line">    switch(action.type) &#123;</span><br><span class="line">        case 'add':</span><br><span class="line">            return <span class="hljs-keyword">state</span> + <span class="hljs-number">1</span>;</span><br><span class="line">        case 'sub':</span><br><span class="line">            return <span class="hljs-keyword">state</span> - <span class="hljs-number">1</span>;</span><br><span class="line">        <span class="hljs-keyword">default</span>: </span><br><span class="line">            return <span class="hljs-keyword">state</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>上面的代码就是Reducer，主要理解的就是这种形式和两个参数的作用，一个参数是状态，一个参数是如何控制状态</p></li></ul><h3>useReducer的使用</h3><ul><li><p>我们使用useReducer的方式对计数器进行加减的操作<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useReducer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ReducerDemo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> [count , dispatch] = useReducer(<span class="hljs-function">(<span class="hljs-params">state,actions</span>)=&gt;</span>&#123; <span class="hljs-comment">// 对象的结构赋值</span></span><br><span class="line">        <span class="hljs-keyword">switch</span> (actions)&#123;</span><br><span class="line">            <span class="hljs-keyword">case</span> <span class="hljs-string">'add'</span>:</span><br><span class="line">                <span class="hljs-keyword">return</span> state+<span class="hljs-number">1</span></span><br><span class="line">            <span class="hljs-keyword">case</span> <span class="hljs-string">'sub'</span>:</span><br><span class="line">                <span class="hljs-keyword">return</span> state<span class="hljs-number">-1</span></span><br><span class="line">            <span class="hljs-keyword">default</span>:</span><br><span class="line">                <span class="hljs-keyword">return</span> state</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="hljs-number">0</span>) <span class="hljs-comment">// 参数二为默认值</span></span><br><span class="line">    <span class="hljs-keyword">return</span> (<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;dispatch('add')&#125;&#125;&gt;加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span>=&gt;</span>&#123;dispatch('sub')&#125;&#125;&gt;减<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>这样可以实现加减的操作</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;React-Hooks的useReducer可以管理状态，容易测试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;useReducer介绍和简单使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;useState 
      
    
    </summary>
    
      <category term="React" scheme="https://zhongyuehui.github.io/categories/React/"/>
    
    
      <category term="React-Hooks" scheme="https://zhongyuehui.github.io/tags/React-Hooks/"/>
    
  </entry>
  
  <entry>
    <title>useContext实现父子组件传值</title>
    <link href="https://zhongyuehui.github.io/2019/09/29/useContext%E5%AE%9E%E7%8E%B0%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
    <id>https://zhongyuehui.github.io/2019/09/29/useContext实现父子组件传值/</id>
    <published>2019-09-29T06:39:17.000Z</published>
    <updated>2019-09-29T07:04:16.674Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>useContext实现父子组件传值,我认为React-Hooks提供的传值方式没有以前props传值那么简单，但是我们如果需要使用React-Hooks的话，必然需要传值</p></blockquote><p>&lt;!-- more --&gt;</p><h2>useContext实现父子组件传值</h2><h3>使用createContext 函数创建context</h3><ul><li><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useState , createContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"><span class="hljs-comment">//===关键代码,创建context</span></span><br><span class="line"><span class="hljs-keyword">const</span> CountContext = createContext()</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example4</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> [ count , setCount ] = useState(<span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;button onClick=&#123;()=&gt;&#123;setCount(count+1)&#125;&#125;&gt;click me&lt;/</span>button&gt;</span><br><span class="line">            &#123;<span class="hljs-comment">/*======关键代码 进行传值*/</span>&#125;</span><br><span class="line">            &lt;CountContext.Provider value=&#123;count&#125;&gt;</span><br><span class="line">            &lt;<span class="hljs-regexp">/CountContext.Provider&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example4;</span><br></pre></td></tr></table></figure></li></ul><h3>使用useContext 接收上下文变量</h3><ul><li><p>既然是传值那么有创建，必然有接收<figure class="highlight clean hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 引入useContext</span></span><br><span class="line"><span class="hljs-keyword">import</span> React, &#123; useState , createContext , useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br></pre></td></tr></table></figure></p></li><li><p>完整代码入下<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useState , createContext , useContext&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//关键代码</span></span><br><span class="line"><span class="hljs-keyword">const</span> CountContext = createContext()</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Counter</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> count = useContext(CountContext)  <span class="hljs-comment">//一句话就可以得到count</span></span><br><span class="line">    <span class="hljs-keyword">return</span> (<span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;count.li&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;count.count&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example4</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> [ count , setCount ] = useState(<span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-keyword">const</span> [ days , setDays ] = useState(<span class="hljs-number">0</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;button onClick=&#123;()=&gt;&#123;setCount(count+1)&#125;&#125;&gt;Clime me&lt;/</span>button&gt;</span><br><span class="line">            &lt;button onClick=&#123;()=&gt;&#123;setDays(days<span class="hljs-number">-1</span>)&#125;&#125;&gt;click me&lt;<span class="hljs-regexp">/button&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &#123;/</span>*======关键代码 *<span class="hljs-regexp">/&#125;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;CountContext.Provider value=&#123;&#123;countL:count,li:days&#125;&#125;&gt;  &#123;/</span>*传入多个值，可以使用对象的方式 *<span class="hljs-regexp">/&#125;</span></span><br><span class="line"><span class="hljs-regexp">                &lt;Counter&gt;&lt;/</span>Counter&gt;</span><br><span class="line">            &lt;<span class="hljs-regexp">/CountContext.Provider&gt;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Example4;</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;useContext实现父子组件传值,我认为React-Hooks提供的传值方式没有以前props传值那么简单，但是我们如果需要使用React-Hooks的话，必然需要传值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;
      
    
    </summary>
    
      <category term="React" scheme="https://zhongyuehui.github.io/categories/React/"/>
    
    
      <category term="React-Hooks" scheme="https://zhongyuehui.github.io/tags/React-Hooks/"/>
    
  </entry>
  
  <entry>
    <title>useEffect实现componentWillUnmount生命周期函数</title>
    <link href="https://zhongyuehui.github.io/2019/09/29/useEffect%E5%AE%9E%E7%8E%B0componentWillUnmount%E5%A3%B0%E6%98%8E%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/"/>
    <id>https://zhongyuehui.github.io/2019/09/29/useEffect实现componentWillUnmount声明周期函数/</id>
    <published>2019-09-29T06:39:05.000Z</published>
    <updated>2019-09-29T07:01:45.493Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用useEffect可以实现componentWillUnmount生命周期函数的功能，简化了生命周期函数的使用时机和重复执行的问题</p></blockquote><p>&lt;!-- more --&gt;</p><h2>useEffect实现componentWillUnmount生命周期函数</h2><ul><li>一开始如果没有加第二个参数，那么我们每次点击计数器的时候都会触发解绑函数</li><li><strong>useEffect的第二个参数</strong>：它是一个数组，数组中可以写入很多状态对应的变量，意思是当状态值发生变化时，我们才进行解绑。但是当传空数组[]时，就是当组件将被销毁时才进行解绑，这也就实现了componentWillUnmount的生命周期函数。</li><li>如果我们想在count发生变化时才进行解绑，那么我们就直接在数组中加入count即可<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React,&#123;useState , useEffect&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123;BrowserRouter <span class="hljs-keyword">as</span> Router,Route,Link&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Home</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    useEffect(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Home 进入'</span>);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Home 离开"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,[])</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">        &lt;div&gt;Home组件&lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    )</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp">function List()&#123;</span></span><br><span class="line"><span class="hljs-regexp">    useEffect(()=&gt;&#123;</span></span><br><span class="line"><span class="hljs-regexp">        console.log("List 进入");</span></span><br><span class="line"><span class="hljs-regexp">        return ()=&gt;&#123; /</span><span class="hljs-regexp">/ 相当于解绑组件时触发该函数</span></span><br><span class="line"><span class="hljs-regexp">            console.log("List 离开"); </span></span><br><span class="line"><span class="hljs-regexp">        &#125;</span></span><br><span class="line"><span class="hljs-regexp">    &#125;,[]) /</span><span class="hljs-regexp">/当第二个参数为[]空数组时，就只有在首次渲染组件时才会执行进入</span></span><br><span class="line"><span class="hljs-regexp">    return (</span></span><br><span class="line"><span class="hljs-regexp">        &lt;div&gt;List组件&lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> [count,stateCount]=useState(<span class="hljs-number">0</span>)</span><br><span class="line">    useEffect(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123; <span class="hljs-comment">// 副作用函数</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`useEffect=&gt;<span class="hljs-subst">$&#123;count&#125;</span>`</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123; <span class="hljs-comment">// count发生了变化才会调用这个函数</span></span><br><span class="line">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"count  发生了变化"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,[count]) <span class="hljs-comment">// 当count发生变化的时候 才执行我们传入的副作用函数</span></span><br><span class="line">    <span class="hljs-keyword">return</span>(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;button onClick=&#123;()=&gt;&#123;stateCount(count+1)&#125;&#125;&gt;Click Me&lt;/</span>button&gt;</span><br><span class="line">            &lt;Router&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                        &lt;Link to=<span class="hljs-string">'/'</span>&gt;首页&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">                    &lt;/</span>li&gt;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                        &lt;Link to=<span class="hljs-string">'/list/'</span>&gt;列表&lt;<span class="hljs-regexp">/Link&gt;</span></span><br><span class="line"><span class="hljs-regexp">                    &lt;/</span>li&gt;</span><br><span class="line">                &lt;<span class="hljs-regexp">/ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">                &lt;Route path='/</span><span class="hljs-string">' exact component=&#123;Home&#125;/&gt;</span></span><br><span class="line"><span class="hljs-string">                &lt;Route path='</span>/list/<span class="hljs-string">' exact component=&#123;List&#125;/&gt;</span></span><br><span class="line"><span class="hljs-string">            &lt;/Router&gt;</span></span><br><span class="line"><span class="hljs-string">        &lt;/div&gt;</span></span><br><span class="line"><span class="hljs-string">    )</span></span><br><span class="line"><span class="hljs-string">&#125;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;使用useEffect可以实现componentWillUnmount生命周期函数的功能，简化了生命周期函数的使用时机和重复执行的问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;useEffe
      
    
    </summary>
    
      <category term="React" scheme="https://zhongyuehui.github.io/categories/React/"/>
    
    
      <category term="React-Hooks" scheme="https://zhongyuehui.github.io/tags/React-Hooks/"/>
    
  </entry>
  
  <entry>
    <title>useEffect代替常用生命周期函数</title>
    <link href="https://zhongyuehui.github.io/2019/09/29/useEffect%E4%BB%A3%E6%9B%BF%E5%B8%B8%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/"/>
    <id>https://zhongyuehui.github.io/2019/09/29/useEffect代替常用生命周期函数/</id>
    <published>2019-09-29T06:38:44.000Z</published>
    <updated>2019-09-29T06:56:22.752Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>React-Hooks为我们提供了一整套的新的编写组件的方案，其中就包括生命周期函数</p></blockquote><p>&lt;!-- more --&gt;</p><h2>useEffect代替常用生命周期函数</h2><ul><li>在用Class制作组件时，经常会用生命周期函数，来处理一些额外的事情（副作用：和函数业务主逻辑关联不大，特定时间或事件中执行的动作，比如Ajax请求后端数据，添加登录监听和取消登录，手动修改DOM等等）。在React Hooks中也需要这样类似的生命周期函数，比如在每次状态（State）更新时执行，它为我们准备了useEffect。从这节课开始来认识一下这个useEffect函数</li></ul><h3>用Class的方式为计数器增加生命周期函数</h3><ul><li>先用原始的方式把计数器的Demo增加两个生命周期函数componentDidMount和componentDidUpdate。分别在组件第一次渲染后在浏览器控制台打印出计数器结果和在每次计数器状态发生变化后打印出结果。代码如下：<figure class="highlight pf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; <span class="hljs-keyword">from</span> 'react';</span><br><span class="line"></span><br><span class="line">class Example3 extends Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">        this.<span class="hljs-keyword">state</span> = &#123; count:<span class="hljs-number">0</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        console.<span class="hljs-keyword">log</span>(`ComponentDidMount=&gt;You clicked $&#123;this.<span class="hljs-keyword">state</span>.count&#125; times`)</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidUpdate()&#123;</span><br><span class="line">        console.<span class="hljs-keyword">log</span>(`componentDidUpdate=&gt;You clicked $&#123;this.<span class="hljs-keyword">state</span>.count&#125; times`)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123; </span><br><span class="line">        return (</span><br><span class="line">            <span class="hljs-variable">&lt;div&gt;</span></span><br><span class="line">                <span class="hljs-variable">&lt;p&gt;</span>You clicked &#123;this.<span class="hljs-keyword">state</span>.count&#125; times&lt;/p&gt;</span><br><span class="line">                <span class="hljs-variable">&lt;button onClick=&#123;this.addCount.bind(this)&#125;&gt;</span>Chlick me&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    addCount()&#123;</span><br><span class="line">        this.<span class="hljs-built_in">set</span>State(&#123;count:this.<span class="hljs-keyword">state</span>.count+<span class="hljs-number">1</span>&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">export <span class="hljs-keyword">default</span> Example3;</span><br></pre></td></tr></table></figure></li></ul><h3>用useEffect函数来代替生命周期函数</h3><ul><li>在使用React Hooks的情况下，我们可以使用下面的代码来完成上边代码的生命周期效果，代码如下（修改了以前的diamond）： 记得要先引入useEffect后，才可以正常使用<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useState , useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> [ count , setCount ] = useState(<span class="hljs-number">0</span>);</span><br><span class="line">    <span class="hljs-comment">//---关键代码---------start-------</span></span><br><span class="line">    useEffect(<span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`useEffect=&gt;You clicked <span class="hljs-subst">$&#123;count&#125;</span> times`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-comment">//---关键代码---------end-------</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;button onClick=&#123;()=&gt;&#123;setCount(count+1)&#125;&#125;&gt;click me&lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    )</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp">export default Example;</span></span><br></pre></td></tr></table></figure></li></ul><h4>好处：</h4><ul><li>我们写的有状态组件，通常会产生很多的副作用（side effect），比如发起ajax请求获取数据，添加一些监听的注册和取消注册，手动修改dom等等。我们之前都把这些副作用的函数写在生命周期函数钩子里，比如componentDidMount，componentDidUpdate和componentWillUnmount。而现在的useEffect就相当与这些声明周期函数钩子的集合体。它以一抵三。<figure class="highlight clojure hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="hljs-name">useEffect</span> = componentDidMount + componentDidUpdate+componentWillUnmount)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;React-Hooks为我们提供了一整套的新的编写组件的方案，其中就包括生命周期函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;useEffect代替常用生命周期函数&lt;/h2&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
      <category term="React" scheme="https://zhongyuehui.github.io/categories/React/"/>
    
    
      <category term="React-Hooks" scheme="https://zhongyuehui.github.io/tags/React-Hooks/"/>
    
  </entry>
  
  <entry>
    <title>React-Hooks多状态声明</title>
    <link href="https://zhongyuehui.github.io/2019/09/29/React-Hooks%E5%A4%9A%E7%8A%B6%E6%80%81%E5%A3%B0%E6%98%8E/"/>
    <id>https://zhongyuehui.github.io/2019/09/29/React-Hooks多状态声明/</id>
    <published>2019-09-29T06:37:43.000Z</published>
    <updated>2019-09-29T06:44:35.882Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>React-Hooks如何声明多个状态并进行传递呢？其实很简单，使用多个useState定义即可。</p></blockquote><p>&lt;!-- more --&gt;</p><h2>React-Hooks多状态声明</h2><ul><li>多个状态的声明<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> flge=<span class="hljs-literal">true</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example2</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> [age , setAge] = useState(<span class="hljs-number">0</span>) <span class="hljs-comment">// 数组的解构赋值,这个是根据位置来赋值的 age=0，setAge没有值</span></span><br><span class="line">    <span class="hljs-keyword">const</span> [height , setHeight] = useState(<span class="hljs-number">170</span>)</span><br><span class="line">    <span class="hljs-keyword">const</span> [work , setWork] = useState(<span class="hljs-string">'敲代码'</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;&#123;height&#125;&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;p&gt;&#123;age&#125;--&#123;setAge&#125;&lt;/</span>p&gt; </span><br><span class="line">            &lt;p&gt;&#123;work&#125;&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3>注意：</h3><ul><li>1、useState一定要写在函数初始的位置不能在循环或判断语句等里面调用，这样是为了让我们的 Hooks 在每次渲染的时候都会按照 相同的顺序 调用，因为这里有一个关键的问题，那就是useState需要依赖参照第一次渲染的调用顺序来匹配对于的state，否则 useState 会无法正确返回它对于的state2、我们可以在一个函数组件中使用多个</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;React-Hooks如何声明多个状态并进行传递呢？其实很简单，使用多个useState定义即可。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;React-Hooks多状态声明&lt;/h2&gt;
&lt;ul
      
    
    </summary>
    
      <category term="React" scheme="https://zhongyuehui.github.io/categories/React/"/>
    
    
      <category term="React-Hooks" scheme="https://zhongyuehui.github.io/tags/React-Hooks/"/>
    
  </entry>
  
  <entry>
    <title>React-Hooks介绍和感知</title>
    <link href="https://zhongyuehui.github.io/2019/09/27/React-Hooks%E4%BB%8B%E7%BB%8D%E5%92%8C%E6%84%9F%E7%9F%A5/"/>
    <id>https://zhongyuehui.github.io/2019/09/27/React-Hooks介绍和感知/</id>
    <published>2019-09-27T09:37:22.000Z</published>
    <updated>2019-09-27T11:01:02.030Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2018年底FaceBook的React小组推出Hooks以来，所有的React的开发者都对它大为赞赏</p></blockquote><p>&lt;!-- more --&gt;</p><h2>React-Hooks介绍</h2><ul><li>2018年底FaceBook的React小组推出Hooks以来，所有的React的开发者都对它大为赞赏。React Hooks就是用函数的形式代替原来的继承类的形式，并且使用预函数的形式管理state，有Hooks可以不再使用类的形式定义组件了。这时候你的认知也要发生变化了，原来把组件分为有状态组件和无状态组件，有状态组件用类的形式声明，无状态组件用函数的形式声明。那现在所有的组件都可以用函数来声明了。</li></ul><h2>React-Hooks感知</h2><ul><li><p>首先我们先创建一个React项目，使用脚手架创建：create-react-app demo01</p></li><li><p>我们定义一个Example.js组件，并且在index.js中注册组件</p></li><li><p>index.js<figure class="highlight coffeescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> Example <span class="hljs-keyword">from</span> <span class="hljs-string">'./Example'</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Example /&gt;, <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'root'</span>));</span><br></pre></td></tr></table></figure></p></li><li><p>Example.js<figure class="highlight pf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 原始react语法</span><br><span class="line">/* import React, &#123; Component &#125; <span class="hljs-keyword">from</span> 'react'</span><br><span class="line"></span><br><span class="line">export <span class="hljs-keyword">default</span> class Example extends Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props)</span><br><span class="line">    </span><br><span class="line">        this.<span class="hljs-keyword">state</span> = &#123;</span><br><span class="line">             count:<span class="hljs-number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        return (</span><br><span class="line">            <span class="hljs-variable">&lt;div&gt;</span></span><br><span class="line">            <span class="hljs-variable">&lt;p&gt;</span>You clicked &#123;this.<span class="hljs-keyword">state</span>.count&#125; times&lt;/p&gt;</span><br><span class="line">            <span class="hljs-variable">&lt;button onClick=&#123;this.countAdd.bind(this)&#125;&gt;</span>Chlick me&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    countAdd=()=&gt;&#123;</span><br><span class="line">     this.<span class="hljs-built_in">set</span>State(&#123;count:this.<span class="hljs-keyword">state</span>.count+<span class="hljs-number">1</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; */</span><br></pre></td></tr></table></figure></p></li><li><p>使用Hokks之后<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 使用React-Hooks</span></span><br><span class="line"><span class="hljs-keyword">import</span> React,&#123;useState&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Example</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> [count,stateCount]=useState(<span class="hljs-number">0</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span>(</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="hljs-regexp">/p&gt;</span></span><br><span class="line"><span class="hljs-regexp">            &lt;button onClick=&#123;()=&gt;&#123;stateCount(count+1)&#125;&#125;&gt;Click Me&lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    )</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br></pre></td></tr></table></figure></p></li><li><p>很明显我们可以看出代码简化了很多，但是功能却没有变化</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;2018年底FaceBook的React小组推出Hooks以来，所有的React的开发者都对它大为赞赏&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;React-Hooks介绍&lt;/h2&gt;
&lt;ul&gt;
      
    
    </summary>
    
      <category term="React" scheme="https://zhongyuehui.github.io/categories/React/"/>
    
    
      <category term="React-Hooks" scheme="https://zhongyuehui.github.io/tags/React-Hooks/"/>
    
  </entry>
  
  <entry>
    <title>使用Koa脚手架创建Koa项目和EXpress脚手架创建express项目</title>
    <link href="https://zhongyuehui.github.io/2019/08/12/%E4%BD%BF%E7%94%A8Koa%E8%84%9A%E6%89%8B%E6%9E%B6%E5%88%9B%E5%BB%BAKoa%E9%A1%B9%E7%9B%AE%E5%92%8CEXpress%E8%84%9A%E6%89%8B%E6%9E%B6%E5%88%9B%E5%BB%BAexpress%E9%A1%B9%E7%9B%AE/"/>
    <id>https://zhongyuehui.github.io/2019/08/12/使用Koa脚手架创建Koa项目和EXpress脚手架创建express项目/</id>
    <published>2019-08-12T14:13:05.000Z</published>
    <updated>2019-08-12T14:16:42.216Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果每次项目都是手动进行创建，一个是浪费时间，二是没有必要，使用EXpress脚手架和Koa脚手架快速生成项目</p></blockquote><p>&lt;!-- more --&gt;</p><h2>使用Koa脚手架创建Koa项目</h2><ul><li>Koa脚手架和Vue、Angular、React脚手架一样，都是快速生成项目结构和启动代码的一个工具</li></ul><h3>使用脚手架</h3><ul><li>全局安装koa脚手架:<code>cnpm i koa-generator -g</code></li><li>创建项目:<code>koa 项目名</code></li><li>安装依赖：<code>cd</code>项目名-&gt;<code>cnpm i</code></li><li>启动项目:<code>npm start</code>,注意启动项目不再是<code>node app.js</code></li></ul><h3>创建参数</h3><ul><li><p>创建的时候可以选择模板引擎和其他选项<figure class="highlight vim hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Mr zhong&gt;koa -h</span><br><span class="line">Usage: koa [<span class="hljs-keyword">options</span>] [dir]</span><br><span class="line"></span><br><span class="line">Option<span class="hljs-variable">s:</span></span><br><span class="line">  -V, --<span class="hljs-keyword">version</span>       output the <span class="hljs-keyword">version</span> <span class="hljs-keyword">number</span></span><br><span class="line">  -<span class="hljs-keyword">e</span>, --ejs           <span class="hljs-built_in">add</span> ejs engine support (defaults <span class="hljs-keyword">to</span> jade)</span><br><span class="line">      --hbs           <span class="hljs-built_in">add</span> handlebars engine support</span><br><span class="line">  -H, --hogan         <span class="hljs-built_in">add</span> hogan.js engine support</span><br><span class="line">  -<span class="hljs-keyword">c</span>, --css <span class="hljs-symbol">&lt;engine&gt;</span>  <span class="hljs-built_in">add</span> stylesheet <span class="hljs-symbol">&lt;engine&gt;</span> support (less|stylus|compass|sass) (defaults <span class="hljs-keyword">to</span> plain css)</span><br><span class="line">      --git           <span class="hljs-built_in">add</span> .gitignore</span><br><span class="line">  -<span class="hljs-keyword">f</span>, --force         force <span class="hljs-keyword">on</span> non-<span class="hljs-built_in">empty</span> directory</span><br><span class="line">  -h, --<span class="hljs-keyword">help</span>          output usage information</span><br></pre></td></tr></table></figure></p></li><li><p>我们创建一个名字为<code>myapp</code>的项目使用ejs模板引擎<figure class="highlight ebnf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attribute">koa -e myapp</span></span><br></pre></td></tr></table></figure></p></li></ul><h2>使用Express脚手架创建Express项目</h2><h3>使用脚手架</h3><ul><li><p>全局安装脚手架:<code>npm install express-generator -g</code></p></li><li><p>创建的参数<figure class="highlight haml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  express -h</span><br><span class="line"></span><br><span class="line">Usage: express [options] [dir]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">  -<span class="hljs-ruby">h, --help          输出使用方法</span></span><br><span class="line"><span class="hljs-ruby">      --version       输出版本号</span></span><br><span class="line"><span class="hljs-ruby">  -e, --ejs           添加对 ejs 模板引擎的支持</span></span><br><span class="line"><span class="hljs-ruby">      --hbs           添加对 handlebars 模板引擎的支持</span></span><br><span class="line"><span class="hljs-ruby">      --pug           添加对 pug 模板引擎的支持</span></span><br><span class="line"><span class="hljs-ruby">  -H, --hogan         添加对 hogan.js 模板引擎的支持</span></span><br><span class="line"><span class="hljs-ruby">      --no-view       创建不带视图引擎的项目</span></span><br><span class="line"><span class="hljs-ruby">  -v, --view &lt;engine&gt; 添加对视图引擎（view） &lt;engine&gt; 的支持 (ejs<span class="hljs-params">|hbs|</span>hjs<span class="hljs-params">|jade|</span>pug<span class="hljs-params">|twig|</span>vash) （默认是 jade 模板引擎）</span></span><br><span class="line"><span class="hljs-ruby">  -c, --css &lt;engine&gt;  添加样式表引擎 &lt;engine&gt; 的支持 (less<span class="hljs-params">|stylus|</span>compass<span class="hljs-params">|sass) （默认是普通的 css 文件）</span></span></span><br><span class="line"><span class="hljs-ruby">      --git           添加 .gitignore</span></span><br><span class="line"><span class="hljs-ruby">  -f, --force         强制在非空目录下创建</span></span><br></pre></td></tr></table></figure></p></li><li><p>比如创建了一个名称为 myapp 的 Express 应用。此应用将在当前目录下的 myapp 目录中创建，并且设置为使用 ejs 模板引擎<figure class="highlight maxima hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">express</span> --<span class="hljs-built_in">view</span>=pug myapp</span><br></pre></td></tr></table></figure></p></li><li><p>安装项目依赖：<code>cd myapp</code>,然后<code>cnpm i</code></p></li><li><p>启动项目：<code>npm start</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;如果每次项目都是手动进行创建，一个是浪费时间，二是没有必要，使用EXpress脚手架和Koa脚手架快速生成项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;使用Koa脚手架创建Koa项目&lt;/h2
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://zhongyuehui.github.io/categories/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="https://zhongyuehui.github.io/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Koa中使用session</title>
    <link href="https://zhongyuehui.github.io/2019/08/12/Koa%E4%B8%AD%E4%BD%BF%E7%94%A8session/"/>
    <id>https://zhongyuehui.github.io/2019/08/12/Koa中使用session/</id>
    <published>2019-08-12T14:12:54.000Z</published>
    <updated>2019-08-12T14:21:48.506Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在express中我们已经说到过了session及其原理，安全性比cookie高，在这里我们直接看在koa中如何使用session</p></blockquote><p>&lt;!-- more --&gt;</p><h2>Koa中使用session</h2><ul><li>同样的，在express中我们已经说到过了session及其原理，安全性比cookie高，在这里我们直接看在koa中如何使用session</li></ul><h3>使用session</h3><ul><li><p>安装:<code>cnpm i koa-session --save</code></p></li><li><p>引入：<code>const session=require('koa-session')</code></p></li><li><p>配置session<figure class="highlight zephir hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> session = <span class="hljs-keyword">require</span>(<span class="hljs-string">'koa-session'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> Koa = <span class="hljs-keyword">require</span>(<span class="hljs-string">'koa'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Koa();</span><br><span class="line"> </span><br><span class="line">app.keys = [<span class="hljs-string">'some secret hurr'</span>];</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">const</span> CONFIG = &#123;</span><br><span class="line">  key: <span class="hljs-string">'koa:sess'</span>, <span class="hljs-comment">//cookie的签名</span></span><br><span class="line">  maxAge: <span class="hljs-number">86400000</span>,<span class="hljs-comment">//过期时间，默认是一天</span></span><br><span class="line">  autoCommit: <span class="hljs-keyword">true</span>, <span class="hljs-comment">//自动添加请求头，默认是添加的</span></span><br><span class="line">  overwrite: <span class="hljs-keyword">true</span>,<span class="hljs-comment">//能否覆盖session，默认是可以</span></span><br><span class="line">  httpOnly: <span class="hljs-keyword">true</span>, <span class="hljs-comment">//是否在服务端才能访问，默认是true</span></span><br><span class="line">  signed: <span class="hljs-keyword">true</span>, <span class="hljs-comment">//是否签名，默认是true</span></span><br><span class="line">  rolling: <span class="hljs-keyword">false</span>, <span class="hljs-comment">//每次访问页面或对页面进行操作时重置session过期时间，默认是false</span></span><br><span class="line">  renew: <span class="hljs-keyword">false</span>, <span class="hljs-comment">//当session快过期的时候如果还在操作是否重置seesion过期时间，默认是false</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">app.<span class="hljs-keyword">use</span>(session(CONFIG, app));<span class="hljs-comment">//使用自定义的session配置，如果你想使用默认的配置可以这样使用app.use(session(app));</span></span><br><span class="line"> </span><br><span class="line">app.<span class="hljs-keyword">use</span>(ctx =&gt; &#123;</span><br><span class="line">  <span class="hljs-comment">// 忽略 favicon</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (ctx.path === <span class="hljs-string">'/favicon.ico'</span>) <span class="hljs-keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="hljs-keyword">let</span> n = ctx.session.views || <span class="hljs-number">0</span>;</span><br><span class="line">  ctx.session.views = ++n;</span><br><span class="line">  ctx.body = n + <span class="hljs-string">' views'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="hljs-number">3000</span>);</span><br></pre></td></tr></table></figure></p></li><li><p>设置session<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx<span class="hljs-selector-class">.session</span><span class="hljs-selector-class">.username</span>=<span class="hljs-string">'zs'</span></span><br></pre></td></tr></table></figure></p></li><li><p>获取session<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx<span class="hljs-selector-class">.session</span><span class="hljs-selector-class">.username</span></span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在express中我们已经说到过了session及其原理，安全性比cookie高，在这里我们直接看在koa中如何使用session&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;Koa中使用ses
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://zhongyuehui.github.io/categories/Nodejs/"/>
    
    
      <category term="Koa" scheme="https://zhongyuehui.github.io/tags/Koa/"/>
    
  </entry>
  
  <entry>
    <title>在koa中使用Cookie</title>
    <link href="https://zhongyuehui.github.io/2019/08/12/%E5%9C%A8koa%E4%B8%AD%E4%BD%BF%E7%94%A8Cookie/"/>
    <id>https://zhongyuehui.github.io/2019/08/12/在koa中使用Cookie/</id>
    <published>2019-08-12T14:12:45.000Z</published>
    <updated>2019-08-12T14:22:37.486Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在Koa中使用Cookie非常简单，因为它不需要安装第三方的插件，自身就有这个功能&lt;!-- more --&gt;</p></blockquote><h2>Koa中使用Cookie</h2><ul><li>Cookie的作用我们在express中说到过，这里就不再重复，我们直接来看如何使用Cookie</li><li>在Koa中使用Cookie非常简单，因为它不需要安装第三方的插件，自身就有这个功能</li></ul><h3>Cookie的使用说明</h3><ul><li><p>在koa中设置cookie的值<figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">ctx</span><span class="hljs-selector-class">.cookies</span><span class="hljs-selector-class">.set</span>(<span class="hljs-selector-tag">name</span>,<span class="hljs-selector-tag">value</span>,<span class="hljs-selector-attr">[options]</span>)</span><br></pre></td></tr></table></figure></p></li><li><p>获取cookie的值<figure class="highlight xquery hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span><span class="hljs-built_in"> name</span> = ctx.cookies<span class="hljs-built_in">(name</span>)</span><br></pre></td></tr></table></figure></p></li><li><p><strong>options选项</strong></p></li><li><p><code>domain</code>: 域名</p></li><li><p><code>name=value</code>：键值对，可以设置要保存的 Key/Value，注意这里的 name 不能和其他属性项的名字 一样</p></li><li><p><code>Expires</code>： 过期时间（秒），在设置的某个时间点后该 Cookie 就会失效，如 expires=Wednesday,09-Nov-99 23:12:40 GMT</p></li><li><p><code>maxAge</code>： 最大失效时间（毫秒），设置在多少后失效   -   secure： 当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效</p></li><li><p><code>Path</code>： 表示 cookie 影响到的路由，如 path=/。如果路径不能匹配时，浏览器则不发送这个 Cookie</p></li><li><p><code>httpOnly</code>：是微软对 COOKIE 做的扩展。如果在 COOKIE 中设置了“httpOnly”属性，则通过程序（JS 脚本、applet 等）将无法读取到COOKIE 信息，防止 XSS 攻击产生 singed：表示是否签名cookie, 设为true 会对这个 cookie 签名，这样就需要用 res.signedCookies 而不是 res.cookies 访问它。被篡改的签名 cookie 会被服务器拒绝，并且 cookie 值会重置为它的原始值</p></li><li><p><code>overwrite</code>:表示是否覆盖住原来同名的cookie，true表示覆盖，false表示不覆盖</p></li></ul><h3>cookie的使用</h3><pre><code><figure class="highlight cs hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = require(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"><span class="hljs-keyword">const</span> path = require(<span class="hljs-string">'path'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> Router = require(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> render = require(<span class="hljs-string">'koa-art-template'</span>);</span><br><span class="line">render(app, &#123;</span><br><span class="line">    root: path.<span class="hljs-keyword">join</span>(__dirname, <span class="hljs-string">'views'</span>),</span><br><span class="line">    extname: <span class="hljs-string">'.html'</span>,</span><br><span class="line">    debug: process.env.NODE_ENV !== <span class="hljs-string">'production'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="hljs-keyword">get</span>(<span class="hljs-string">'/'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    ctx.cookies.<span class="hljs-keyword">set</span>(<span class="hljs-string">'username'</span>, <span class="hljs-string">'Mr zhong'</span>, &#123;<span class="hljs-comment">//设置cookie</span></span><br><span class="line">        maxAge: <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> * <span class="hljs-number">60</span><span class="hljs-comment">//设置过期时间</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-keyword">await</span> ctx.render(<span class="hljs-string">'index'</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="hljs-keyword">get</span>(<span class="hljs-string">'/user'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> name = ctx.cookies.<span class="hljs-keyword">get</span>(<span class="hljs-string">'username'</span>) <span class="hljs-comment">//获取cookie</span></span><br><span class="line">    <span class="hljs-keyword">await</span> ctx.render(<span class="hljs-string">'news'</span>, &#123; name &#125;) <span class="hljs-comment">//传递cookie的值</span></span><br><span class="line">&#125;)</span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods())</span><br><span class="line">    .listen(<span class="hljs-number">3000</span>, console.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></code></pre><ul><li>每次我们进入<code>/</code>的时候都会设置cookie，我们进入<code>/user</code>的时候就可以获取到设置的cookie值，通过<code></code>显示出来</li></ul><h3>cookie的参数使用说明</h3><pre><code><figure class="highlight less hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="hljs-selector-tag">ctx</span><span class="hljs-selector-class">.cookies</span><span class="hljs-selector-class">.set</span>(<span class="hljs-string">'username'</span>, <span class="hljs-string">'Mr zhong'</span>,&#123;<span class="hljs-comment">//设置cookie</span></span><br><span class="line">        <span class="hljs-attribute">maxAge</span>: <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> * <span class="hljs-number">60</span>, <span class="hljs-comment">//设置过期时间</span></span><br><span class="line">        <span class="hljs-attribute">path</span>:<span class="hljs-string">'/user'</span>, <span class="hljs-comment">//设置cookie可以访问的页面</span></span><br><span class="line">        <span class="hljs-attribute">domain</span>:<span class="hljs-string">'.baidu.com'</span>, <span class="hljs-comment">//设置可以访问的二级域名，一般不做修改，默认就是当前的域名</span></span><br><span class="line">        <span class="hljs-attribute">httpOnly</span>:true  <span class="hljs-comment">//表示只有在服务端才能访问</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    domain: 表示 'a.baidu.com','xxx.baidu.com'都可以访问这个cookie</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure></code></pre><ul><li>httpOnly说明：如果为true，我们只能在服务器端访问，在客户端使用<code>document.cookie</code>是访问不到cookie的，但是如果为false，在客户端使用<code>document.cookie</code>可以访问到cookie，并且服务端也可以访问</li></ul><h3>cookie的value说明</h3><ul><li><p>在koa中，value是不能直接被设置成汉字的，会报错，可能是开发团队有意为之，但是我们在处理用户信息的时候，难免会使用中文，我们可以对中文进入base64编码<figure class="highlight cs hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = require(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"><span class="hljs-keyword">const</span> path = require(<span class="hljs-string">'path'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> Router = require(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> render = require(<span class="hljs-string">'koa-art-template'</span>);</span><br><span class="line">render(app, &#123;</span><br><span class="line">    root: path.<span class="hljs-keyword">join</span>(__dirname, <span class="hljs-string">'views'</span>),</span><br><span class="line">    extname: <span class="hljs-string">'.html'</span>,</span><br><span class="line">    debug: process.env.NODE_ENV !== <span class="hljs-string">'production'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="hljs-keyword">get</span>(<span class="hljs-string">'/'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    <span class="hljs-comment">//将中文转换成base64</span></span><br><span class="line">    <span class="hljs-keyword">let</span> name = <span class="hljs-keyword">new</span> Buffer(<span class="hljs-string">'张三'</span>).toString(<span class="hljs-string">'base64'</span>)</span><br><span class="line">    ctx.cookies.<span class="hljs-keyword">set</span>(<span class="hljs-string">'username'</span>, name, &#123;<span class="hljs-comment">//设置cookie</span></span><br><span class="line">        maxAge: <span class="hljs-number">60</span> * <span class="hljs-number">1000</span> * <span class="hljs-number">60</span>,<span class="hljs-comment">//设置过期时间</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-keyword">await</span> ctx.render(<span class="hljs-string">'index'</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="hljs-keyword">get</span>(<span class="hljs-string">'/user'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> name = ctx.cookies.<span class="hljs-keyword">get</span>(<span class="hljs-string">'username'</span>) <span class="hljs-comment">//获取cookie，这个时候usename是base64编码</span></span><br><span class="line">    <span class="hljs-comment">//将base64转换成中文</span></span><br><span class="line">    <span class="hljs-keyword">let</span> username = <span class="hljs-keyword">new</span> Buffer(name, <span class="hljs-string">'base64'</span>).toString()</span><br><span class="line">    <span class="hljs-keyword">await</span> ctx.render(<span class="hljs-string">'news'</span>, &#123; username &#125;) <span class="hljs-comment">//传递cookie的值</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods())</span><br><span class="line">    .listen(<span class="hljs-number">3000</span>, console.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>我们在设置cookie之前转换成base64编码，获取之后转换成中文，传递到页面，这样就可以设置中文了</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在Koa中使用Cookie非常简单，因为它不需要安装第三方的插件，自身就有这个功能
&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Koa中使用Cookie&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cookie的作用我们在e
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://zhongyuehui.github.io/categories/Nodejs/"/>
    
    
      <category term="Koa" scheme="https://zhongyuehui.github.io/tags/Koa/"/>
    
  </entry>
  
  <entry>
    <title>在koa中使用art-template模板引擎</title>
    <link href="https://zhongyuehui.github.io/2019/08/12/%E5%9C%A8koa%E4%B8%AD%E4%BD%BF%E7%94%A8art-template%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    <id>https://zhongyuehui.github.io/2019/08/12/在koa中使用art-template模板引擎/</id>
    <published>2019-08-12T14:12:34.000Z</published>
    <updated>2019-08-12T14:18:55.840Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>art-template模板引擎性能接近极限，相对其他的模板引擎性能高出几倍到几十倍，并且可以在浏览器运行使用，强大而方便</p></blockquote><p>&lt;!-- more --&gt;</p><h2>在koa中使用<a href="http://aui.github.io/art-template/zh-cn/docs/index.html" target="_blank" rel="noopener">art-template模板引擎</a></h2><ul><li>可能在浏览器端我们已经使用过这个模板引擎，它不仅可以在浏览器端运行，支持koa、express、webpack等</li><li>性能接近极限，是ejs的4倍，pug的2倍，同时支持Nodejs和浏览器端，而且语法上与Angular相似</li></ul><h3>使用art-template模板引擎</h3><ol><li>安装：<code>cnpm i art-template koa-art-template --save</code>这两个模块，如果你需要在浏览器端或者express、webpack中使用这个模板引擎，可以查看<a href="http://aui.github.io/art-template/zh-cn/docs/index.html" target="_blank" rel="noopener">art-template官方文档</a></li><li>配置模板引擎<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//引入</span></span><br><span class="line"><span class="hljs-keyword">const</span> Koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> render = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-art-template'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Koa();</span><br><span class="line">render(app, &#123;</span><br><span class="line">  root: path.join(__dirname, <span class="hljs-string">'view'</span>),<span class="hljs-comment">//模板文件的路径</span></span><br><span class="line">  extname: <span class="hljs-string">'.art'</span>,<span class="hljs-comment">//文件的后缀名，可以选择使用html</span></span><br><span class="line">  debug: process.env.NODE_ENV !== <span class="hljs-string">'production'</span>  <span class="hljs-comment">//是否开启调试模式</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//渲染模板</span></span><br><span class="line">  <span class="hljs-keyword">await</span> ctx.render(<span class="hljs-string">'user'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="hljs-number">8080</span>);</span><br></pre></td></tr></table></figure></li></ol><h3>art-template语法</h3><ul><li><p>在这里有原始语法和标准语法，我们先来说一下原始语法，因为原始语法与ejs几乎一样，绑定数据，循环，判断，解析html都是一样的，就引入子模板(公共的模板)有些差别<figure class="highlight mel hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//ejs</span></span><br><span class="line">&lt;%-include public/header.ejs%&gt;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//art-template</span></span><br><span class="line">&lt;% include (<span class="hljs-string">'public/header.html'</span>) %&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>接下来我们看一下标准语法的使用方式</p></li><li><p>首先我们定义好数据如下<figure class="highlight zephir hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = <span class="hljs-keyword">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-keyword">require</span>(<span class="hljs-string">'path'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> Router = <span class="hljs-keyword">require</span>(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> render = <span class="hljs-keyword">require</span>(<span class="hljs-string">'koa-art-template'</span>);</span><br><span class="line">render(app, &#123;</span><br><span class="line">    root: path.join(__dirname, <span class="hljs-string">'views'</span>),</span><br><span class="line">    extname: <span class="hljs-string">'.html'</span>,</span><br><span class="line">    debug: process.env.NODE_ENV !== <span class="hljs-string">'production'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/'</span>, async (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> data = &#123;</span><br><span class="line">        name: <span class="hljs-string">'Mr zhong'</span>,</span><br><span class="line">        age: <span class="hljs-number">20</span>,</span><br><span class="line">        html: <span class="hljs-string">'&lt;h2&gt;我的爱好是：&lt;/h2&gt;'</span>,</span><br><span class="line">        <span class="hljs-keyword">list</span>: [<span class="hljs-string">'苹果'</span>, <span class="hljs-string">'香蕉'</span>, <span class="hljs-string">'西瓜'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    await ctx.render(<span class="hljs-string">'index'</span>, &#123; data &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .<span class="hljs-keyword">use</span>(router.routes())</span><br><span class="line">    .<span class="hljs-keyword">use</span>(router.allowedMethods())</span><br><span class="line">    .listen(<span class="hljs-number">3000</span>, console.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></p></li></ul><h3>数据输出</h3><ul><li>在index.html输出名字<figure class="highlight fortran hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我的名字是：&#123;&#123;<span class="hljs-keyword">data</span>.<span class="hljs-keyword">name</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3>判断</h3><ul><li><p>在index.html判断年龄是否小于20<figure class="highlight handlebars hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-builtin-name">if</span> data.age&gt;20&#125;&#125;</span><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的年龄大于20<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-builtin-name">else</span> &#125;&#125;</span><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的年龄小于等于20<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span><span class="hljs-template-tag">&#123;&#123;/<span class="hljs-name"><span class="hljs-builtin-name">if</span></span>&#125;&#125;</span><span class="hljs-xml"></span></span><br></pre></td></tr></table></figure></p></li><li><p>在这里需要注意的是需要结束标签</p></li></ul><h3>原文输出</h3><ul><li>在index.html中输出html标签的内容<figure class="highlight clojure hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;@ data.html&#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3>循环</h3><ul><li>在index.html中输出我的爱好<figure class="highlight handlebars hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-builtin-name">each</span> data.list&#125;&#125;</span><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;$index+1&#125;&#125;</span><span class="hljs-xml">、</span><span class="hljs-template-variable">&#123;&#123;$value&#125;&#125;</span><span class="hljs-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-tag">&#123;&#123;/<span class="hljs-name"><span class="hljs-builtin-name">each</span></span>&#125;&#125;</span><span class="hljs-xml"></span></span><br></pre></td></tr></table></figure></li></ul><h3>子模版</h3><ul><li>在index.html引入公共的尾部模板<figure class="highlight clojure hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; include './public/foot.html' &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><h3>总结：</h3><ul><li><p>index.html<figure class="highlight handlebars hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"css/style.css"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    我的名字是：</span><span class="hljs-template-variable">&#123;&#123;data.name&#125;&#125;</span><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml">    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-builtin-name">if</span> data.age&gt;20&#125;&#125;</span><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的年龄大于20<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-builtin-name">else</span> &#125;&#125;</span><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我的年龄小于等于20<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    </span><span class="hljs-template-tag">&#123;&#123;/<span class="hljs-name"><span class="hljs-builtin-name">if</span></span>&#125;&#125;</span><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml">    </span><span class="hljs-template-variable">&#123;&#123;@ data.html&#125;&#125;</span><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml">    </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-builtin-name">each</span> data.list&#125;&#125;</span><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;$index+1&#125;&#125;</span><span class="hljs-xml">、</span><span class="hljs-template-variable">&#123;&#123;$value&#125;&#125;</span><span class="hljs-xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-tag">&#123;&#123;/<span class="hljs-name"><span class="hljs-builtin-name">each</span></span>&#125;&#125;</span><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml">    </span><span class="hljs-template-variable">&#123;&#123; include './public/foot.html' &#125;&#125;</span><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></li><li><p>打印的页面<figure class="highlight lsl hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">我的名字是：Mr zhong</span><br><span class="line">我的年龄小于等于<span class="hljs-number">20</span></span><br><span class="line"></span><br><span class="line">我的爱好是：</span><br><span class="line">    <span class="hljs-number">1</span>、苹果</span><br><span class="line">    <span class="hljs-number">2</span>、香蕉</span><br><span class="line">    <span class="hljs-number">3</span>、西瓜</span><br><span class="line">我是尾部</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;art-template模板引擎性能接近极限，相对其他的模板引擎性能高出几倍到几十倍，并且可以在浏览器运行使用，强大而方便&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;在koa中使用&lt;a hre
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://zhongyuehui.github.io/categories/Nodejs/"/>
    
    
      <category term="Koa" scheme="https://zhongyuehui.github.io/tags/Koa/"/>
    
  </entry>
  
  <entry>
    <title>Koa中使用koa-static中间件配置静态文件</title>
    <link href="https://zhongyuehui.github.io/2019/08/12/Koa%E4%B8%AD%E4%BD%BF%E7%94%A8koa-static%E4%B8%AD%E9%97%B4%E4%BB%B6%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/"/>
    <id>https://zhongyuehui.github.io/2019/08/12/Koa中使用koa-static中间件配置静态文件/</id>
    <published>2019-08-12T14:12:23.000Z</published>
    <updated>2019-08-12T14:20:37.023Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>由于koa中自身不绑定任何的中间件，所以我们需要手动的将配置静态文件的中间件引入</p></blockquote><p>&lt;!-- more --&gt;</p><h2>Koa中的koa-static中间件的使用</h2><ul><li>在express中我们如果需要配置静态文件，直接以<code>app.use(express.static(''))</code>就可以配置，但是因为在koa中没有绑定任何的中间件，所以我们如果需要使用中间件，那么我们就需要自己去手动去配置</li></ul><h3>koa-static中间件的使用</h3><ul><li><p>安装:<code>cnpm i koa-static --save</code></p></li><li><p>配置：<code>app.use(serve('/test/fixtures'))</code></p></li><li><p>使用：<figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//引入</span></span><br><span class="line"><span class="hljs-keyword">const</span> <span class="hljs-keyword">static</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">'koa-static'</span>)</span><br><span class="line"><span class="hljs-comment">//配置,两种方式，一种带绝对路径的，是被推荐的</span></span><br><span class="line"><span class="hljs-comment">// app.use(static('public'))</span></span><br><span class="line">app.<span class="hljs-keyword">use</span>(<span class="hljs-keyword">static</span>(__dirname + <span class="hljs-string">'/public'</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>配置完成后我们使用就根目录中的public文件夹下的文件文件就可以直接使用了，如使用<code>public/css/style.css</code>，引用的 时候直接<code>css/style.css</code>即可</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;由于koa中自身不绑定任何的中间件，所以我们需要手动的将配置静态文件的中间件引入&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;Koa中的koa-static中间件的使用&lt;/h2&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://zhongyuehui.github.io/categories/Nodejs/"/>
    
    
      <category term="Koa" scheme="https://zhongyuehui.github.io/tags/Koa/"/>
    
  </entry>
  
  <entry>
    <title>在Koa中使用Nodejs原生的方式获取post数据和使用koa-bodyparser中间件获取post数据</title>
    <link href="https://zhongyuehui.github.io/2019/08/12/%E5%9C%A8Koa%E4%B8%AD%E4%BD%BF%E7%94%A8Nodejs%E5%8E%9F%E7%94%9F%E7%9A%84%E6%96%B9%E5%BC%8F%E8%8E%B7%E5%8F%96post%E6%95%B0%E6%8D%AE%E5%92%8C%E4%BD%BF%E7%94%A8koa-bodyparser%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%8E%B7%E5%8F%96post%E6%95%B0%E6%8D%AE/"/>
    <id>https://zhongyuehui.github.io/2019/08/12/在Koa中使用Nodejs原生的方式获取post数据和使用koa-bodyparser中间件获取post数据/</id>
    <published>2019-08-12T14:08:10.000Z</published>
    <updated>2019-08-12T14:23:39.477Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在Koa中使用原生的Nodejs获取post数据，和在Express中使用原生的Nodejs获取post数据不一样，因为Koa中的方法是异步的。</p></blockquote><p>&lt;!-- more --&gt;</p><h2>在Koa中使用Nodejs原生的方式获取get、post数据</h2><ul><li>在Koa中使用原生的Nodejs获取post数据，和在Express中使用原生的Nodejs获取post数据不一样，因为Koa中的方法是异步的。</li></ul><h3>创建获取post数据模块</h3><ul><li><p>在根目录下创建common目录，新建<code>postCommon.js</code><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//暴露模块</span></span><br><span class="line">exports.getPostData = <span class="hljs-function"><span class="hljs-params">ctx</span> =&gt;</span> &#123;</span><br><span class="line"><span class="hljs-comment">//返回一个promise对象，这样就可以在调用的时候 awit</span></span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123; <span class="hljs-comment">//获取成功</span></span><br><span class="line">        <span class="hljs-keyword">let</span> data = <span class="hljs-string">''</span></span><br><span class="line">        ctx.req.on(<span class="hljs-string">'data'</span>, <span class="hljs-function"><span class="hljs-params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">            data += chunk</span><br><span class="line">        &#125;)</span><br><span class="line">        ctx.req.on(<span class="hljs-string">'end'</span>, <span class="hljs-function"><span class="hljs-params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">            reslove(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">catch</span> (err) &#123; <span class="hljs-comment">//如果获取失败</span></span><br><span class="line">        reject(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>在<code>app.js</code>中使用这个模块<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"><span class="hljs-keyword">const</span> Router = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"><span class="hljs-keyword">const</span> views = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-views'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> common = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./modules/common'</span>)</span><br><span class="line">app.use(views(<span class="hljs-string">'views'</span>), &#123; <span class="hljs-attr">extension</span>: <span class="hljs-string">'ejs'</span> &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/'</span>, <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">await</span> ctx.render(<span class="hljs-string">'index.ejs'</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">router.post(<span class="hljs-string">'/doAdd'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    <span class="hljs-comment">//因为在这里是异步的，如果需要使用await，那么调用的函数也需要是异步的，我们使用Promise封装</span></span><br><span class="line">    <span class="hljs-keyword">let</span> data = <span class="hljs-keyword">await</span> common.getPostData(ctx)</span><br><span class="line">    ctx.body = data</span><br><span class="line">&#125;)</span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods())</span><br><span class="line">    .listen(<span class="hljs-number">3000</span>, <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>以上已经可以获取到post数据，但是这样过于繁琐，而且数据并没有格式化好，所以我们可以使用第三方的中间件来解决这个问题</p></li></ul><h3>使用koa-bodyparser中间件获取表单提交的数据</h3><ol><li>安装：<code>cnpm i koa-bodyparser --save</code></li><li>引入:<code>const bodyParser=require('koa-bodyparser')</code></li><li>配置：<code>app.use(bodyParser())</code></li><li>使用: <code>ctx.body =awit ctx.request.body</code><figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = <span class="hljs-keyword">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"><span class="hljs-keyword">const</span> Router = <span class="hljs-keyword">require</span>(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"><span class="hljs-keyword">const</span> views = <span class="hljs-keyword">require</span>(<span class="hljs-string">'koa-views'</span>)</span><br><span class="line"><span class="hljs-comment">//1.引入</span></span><br><span class="line"><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-keyword">require</span>(<span class="hljs-string">'koa-bodyparser'</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="hljs-keyword">use</span>(views(<span class="hljs-string">'views'</span>), &#123; extension: <span class="hljs-string">'ejs'</span> &#125;)</span><br><span class="line"><span class="hljs-comment">//2.配置</span></span><br><span class="line">app.<span class="hljs-keyword">use</span>(bodyParser())</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/'</span>, async (ctx, next) =&gt; &#123;</span><br><span class="line">    await ctx.render(<span class="hljs-string">'index.ejs'</span>)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">router.post(<span class="hljs-string">'/doAdd'</span>, async ctx =&gt; &#123;</span><br><span class="line">    <span class="hljs-comment">//3.使用</span></span><br><span class="line">    ctx.body = await ctx.request.body</span><br><span class="line">&#125;)</span><br><span class="line">app</span><br><span class="line">    .<span class="hljs-keyword">use</span>(router.routes())</span><br><span class="line">    .<span class="hljs-keyword">use</span>(router.allowedMethods())</span><br><span class="line">    .listen(<span class="hljs-number">3000</span>, console.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></li></ol><ul><li>这个时候就可以获取post数据了，非常的简单，而且数据已经帮你格式化成了JSON对象，直接使用即可</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在Koa中使用原生的Nodejs获取post数据，和在Express中使用原生的Nodejs获取post数据不一样，因为Koa中的方法是异步的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;在K
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://zhongyuehui.github.io/categories/Nodejs/"/>
    
    
      <category term="Koa" scheme="https://zhongyuehui.github.io/tags/Koa/"/>
    
  </entry>
  
  <entry>
    <title>Koa中ejs模板引擎的使用</title>
    <link href="https://zhongyuehui.github.io/2019/08/10/Koa%E4%B8%ADejs%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://zhongyuehui.github.io/2019/08/10/Koa中ejs模板引擎的使用/</id>
    <published>2019-08-10T14:57:07.000Z</published>
    <updated>2019-09-27T09:43:35.906Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Koa中使用ejs模板引擎和Express中除了配置不同其他的一摸一样，如果你直接接触过ejs模板引擎，只需要查看如何配置就可以了</p></blockquote><p>&lt;!-- more --&gt;</p><h2>Koa中ejs模板引擎的使用</h2><ul><li>之前express中，已经说明了ejs模板引擎的语法和使用方式，但是在koa中，配置方式稍微和express有些差别，但是ejs的语法是一样的</li></ul><h3>安装和配置</h3><ul><li>安装koa-views和ejs</li></ul><ol><li>安装：<strong>koa-views:</strong> cnpmi koa-views --save(-S)</li><li>安装:<strong>ejs:</strong> cnpm i ejs --save(-S)</li><li>引入及配置模板引擎中间件<figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = <span class="hljs-keyword">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"><span class="hljs-keyword">const</span> Router = <span class="hljs-keyword">require</span>(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"><span class="hljs-comment">//引入koa-views</span></span><br><span class="line"><span class="hljs-keyword">const</span> views = <span class="hljs-keyword">require</span>(<span class="hljs-string">'koa-views'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    配置模板引擎中间件</span></span><br><span class="line"><span class="hljs-comment">    配置方式一：</span></span><br><span class="line"><span class="hljs-comment">        app.use(views('views', &#123; map: &#123; html: 'ejs' &#125; &#125;))</span></span><br><span class="line"><span class="hljs-comment">    配置方式二:</span></span><br><span class="line"><span class="hljs-comment">        app.use(views('views'), &#123; extension: 'ejs' &#125;)</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">app.<span class="hljs-keyword">use</span>(views(<span class="hljs-string">'views'</span>), &#123; extension: <span class="hljs-string">'ejs'</span> &#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/'</span>, async (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body=<span class="hljs-string">'首页'</span></span><br><span class="line">&#125;)</span><br><span class="line">   </span><br><span class="line">app</span><br><span class="line">    .<span class="hljs-keyword">use</span>(router.routes())</span><br><span class="line">    .<span class="hljs-keyword">use</span>(router.allowedMethods())</span><br><span class="line">    .listen(<span class="hljs-number">3000</span>, console.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></li></ol><ul><li><p>这样最基本的配置就配置完成了，我们接下来看一下渲染页面和页面传值<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"><span class="hljs-keyword">const</span> Router = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"><span class="hljs-comment">//引入koa-views</span></span><br><span class="line"><span class="hljs-keyword">const</span> views = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-views'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    配置模板引擎中间件</span></span><br><span class="line"><span class="hljs-comment">    配置方式一：</span></span><br><span class="line"><span class="hljs-comment">        app.use(views('views', &#123; map: &#123; html: 'ejs' &#125; &#125;))</span></span><br><span class="line"><span class="hljs-comment">    配置方式二:</span></span><br><span class="line"><span class="hljs-comment">        app.use(views('views'), &#123; extension: 'ejs' &#125;)</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">app.use(views(<span class="hljs-string">'views'</span>), &#123; <span class="hljs-attr">extension</span>: <span class="hljs-string">'ejs'</span> &#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/'</span>, <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="hljs-comment">//渲染模板</span></span><br><span class="line">    <span class="hljs-keyword">await</span> ctx.render(<span class="hljs-string">'index.ejs'</span>) <span class="hljs-comment">//这里如果没有后缀默认是.html格式，哪种都可以</span></span><br><span class="line">&#125;)</span><br><span class="line">    .get(<span class="hljs-string">'/news'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">        <span class="hljs-comment">//定义需要传递的数据</span></span><br><span class="line">        <span class="hljs-keyword">let</span> name = <span class="hljs-string">"kobe"</span></span><br><span class="line">        <span class="hljs-comment">//render参数</span></span><br><span class="line">        <span class="hljs-comment">//参数一：需要渲染的模板页面，参数二：需要传递的数据</span></span><br><span class="line">        <span class="hljs-keyword">await</span> ctx.render(<span class="hljs-string">'news.ejs'</span>, &#123; name &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods())</span><br><span class="line">    .listen(<span class="hljs-number">3000</span>, <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>在路由<code>/news</code>中我们传递到<code>news.ejs</code>的值，这样就可以获取了<figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的名字是:<span class="hljs-tag">&lt;<span class="hljs-name">%=name%</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li><li><p>还有一些其他的语法参见在express中我写的<a href="http://www.zhongyuehui.cn/2019/08/04/Nodejs%E7%9A%84ejs%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E4%BD%BF%E7%94%A8/#more" target="_blank" rel="noopener">ejs模板引擎的使用</a></p></li></ul><h3>ejs循环数据</h3><ul><li><p>比如我们循环一个数组<figure class="highlight qml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"><span class="hljs-keyword">const</span> Router = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"><span class="hljs-comment">//引入koa-views</span></span><br><span class="line"><span class="hljs-keyword">const</span> views = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-views'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    配置模板引擎中间件</span></span><br><span class="line"><span class="hljs-comment">    配置方式一：</span></span><br><span class="line"><span class="hljs-comment">        app.use(views('views', &#123; map: &#123; html: 'ejs' &#125; &#125;))</span></span><br><span class="line"><span class="hljs-comment">    配置方式二:</span></span><br><span class="line"><span class="hljs-comment">        app.use(views('views'), &#123; extension: 'ejs' &#125;)</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">app.use(views(<span class="hljs-string">'views'</span>), &#123; <span class="hljs-attribute">extension</span>: <span class="hljs-string">'ejs'</span> &#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/'</span>, <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="hljs-comment">//渲染模板</span></span><br><span class="line">    <span class="hljs-keyword">await</span> ctx.render(<span class="hljs-string">'index.ejs'</span>) <span class="hljs-comment">//这里如果没有后缀默认是.html格式，哪种都可以</span></span><br><span class="line">&#125;)</span><br><span class="line">    .get(<span class="hljs-string">'/news'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">        <span class="hljs-comment">//定义需要传递的数据</span></span><br><span class="line">        <span class="hljs-keyword">let</span> name = <span class="hljs-string">"kobe"</span></span><br><span class="line">        <span class="hljs-keyword">let</span> <span class="hljs-built_in">list</span> = [<span class="hljs-string">'苹果'</span>, <span class="hljs-string">'香蕉'</span>, <span class="hljs-string">'西瓜'</span>]</span><br><span class="line">        <span class="hljs-comment">//render参数</span></span><br><span class="line">        <span class="hljs-comment">//参数一：需要渲染的模板页面，参数二：需要传递的数据</span></span><br><span class="line">        <span class="hljs-keyword">await</span> ctx.render(<span class="hljs-string">'news.ejs'</span>, &#123; name, <span class="hljs-built_in">list</span> &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods())</span><br><span class="line">    .listen(<span class="hljs-number">3000</span>, <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>在<code>news.ejs</code>中这样循环<figure class="highlight django hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的名字是:<span class="hljs-tag">&lt;<span class="hljs-name">%=name%</span>&gt;</span>,我喜欢吃:<span class="hljs-tag">&lt;<span class="hljs-name">%</span> <span class="hljs-attr">for</span>(<span class="hljs-attr">let</span> <span class="hljs-attr">i</span>=<span class="hljs-string">0;i</span>&lt;<span class="hljs-attr">list.length</span>;<span class="hljs-attr">i</span>++)&#123; %&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">%=list[i]%</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">%&#125;%</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></li></ul><h3>引入公共模板</h3><ul><li><p>引入导航栏或者尾部</p></li><li><p>在views目录下新建public目录，新建一个文件<code>header.ejs</code>，然后再<code>news.ejs</code>中添加如下代码<figure class="highlight erb hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-comment">&lt;!-- 引入公共的头部 --&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">%-</span></span></span><span class="hljs-ruby"><span class="hljs-keyword">include</span> public/header.ejs</span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的名字是:<span class="hljs-tag">&lt;<span class="hljs-name">%=</span></span></span><span class="hljs-ruby">name</span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span>,我喜欢吃:<span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="hljs-ruby"> <span class="hljs-keyword">for</span>(let i=<span class="hljs-number">0</span>;i&lt;list.length;i++)&#123; </span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">%=</span></span></span><span class="hljs-ruby">list[i]</span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="hljs-ruby">&#125;</span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></li><li><p>使用include就可以引入你需要引入的公共模板了</p></li></ul><h3>判断语句</h3><ul><li><p>在ejs模板中判断数据显示内容<figure class="highlight erb hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-comment">&lt;!-- 引入公共的头部 --&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">%-</span></span></span><span class="hljs-ruby"><span class="hljs-keyword">include</span> public/header.ejs</span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-comment">&lt;!-- 判断语句 --&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我的名字是:<span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="hljs-ruby"> <span class="hljs-keyword">if</span>(name==<span class="hljs-string">'kobe'</span>)&#123;</span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>科比<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="hljs-ruby">&#125;<span class="hljs-keyword">else</span>&#123;</span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>詹姆斯<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="hljs-ruby">&#125;</span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        ,我喜欢吃:<span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="hljs-ruby"> <span class="hljs-keyword">for</span>(let i=<span class="hljs-number">0</span>;i&lt;list.length;i++)&#123; </span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">%=</span></span></span><span class="hljs-ruby">list[i]</span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="hljs-ruby">&#125;</span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></li><li><p>这样输出就是<code>我的名字叫科比了</code>，其实这个语法就是和js的一样只不过使用<code>&lt;%%&gt;</code>标签包裹，因为它的底层是使用正则来进行数据的替换的。</p></li></ul><h3>ejs模板引擎的标签</h3><pre><code><figure class="highlight mel hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-string">'脚本'</span> 标签，用于流程控制，无输出。（当作标签使用）</span><br><span class="line">&lt;%_ 删除其前面的空格符</span><br><span class="line">&lt;%= 输出数据到模板（输出是转义 HTML 标签）（输出你的数据）</span><br><span class="line">&lt;%- 输出非转义的数据到模板(当你的内容是一个html时使用这个)</span><br><span class="line">&lt;%# 注释标签，不执行、不输出内容(写注释的)</span><br><span class="line">&lt;%% 输出字符串 <span class="hljs-string">'&lt;%'</span></span><br><span class="line">%&gt; 一般结束标签</span><br><span class="line">-%&gt; 删除紧随其后的换行符</span><br><span class="line">_%&gt; 将结束标签后面的空格符删除</span><br></pre></td></tr></table></figure></code></pre><h3>配置ejs全局数据</h3><ul><li><p>如果我们在多个ejs页面中需要使用一个同样的数据，比如说用户的session，那么这个时候我们就可以通过配置全局数据，这样就不需要传递到各个页面去我们也可以获取<figure class="highlight qml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"><span class="hljs-keyword">const</span> Router = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"><span class="hljs-keyword">const</span> views = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-views'</span>)</span><br><span class="line"></span><br><span class="line">app.use(views(<span class="hljs-string">'views'</span>), &#123; <span class="hljs-attribute">extension</span>: <span class="hljs-string">'ejs'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置公共信息的中间件</span></span><br><span class="line">app.use(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.state = &#123;</span><br><span class="line">        <span class="hljs-attribute">username</span>: <span class="hljs-string">'kobe'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">await</span> next() <span class="hljs-comment">//需要继续匹配路由，不然会报错</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/'</span>, <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">await</span> ctx.render(<span class="hljs-string">'index.ejs'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">    .get(<span class="hljs-string">'/news'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> name = <span class="hljs-string">"kobe"</span></span><br><span class="line">        <span class="hljs-keyword">let</span> <span class="hljs-built_in">list</span> = [<span class="hljs-string">'苹果'</span>, <span class="hljs-string">'香蕉'</span>, <span class="hljs-string">'西瓜'</span>]</span><br><span class="line">        <span class="hljs-keyword">let</span> info = <span class="hljs-string">'&lt;h3&gt;我喜欢科比&lt;/h3&gt;'</span></span><br><span class="line">        <span class="hljs-keyword">await</span> ctx.render(<span class="hljs-string">'news.ejs'</span>, &#123; name, <span class="hljs-built_in">list</span>, info &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods())</span><br><span class="line">    .listen(<span class="hljs-number">3000</span>, <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>在这里我们使用<code>配置公共信息的中间件</code>之后，就可以在任意的ejs页面上使用<code>&lt;%=username%&gt;</code>来获取配置的信息了，当然你也可以添加其他的信息，这里只是做一个简单的示范。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Koa中使用ejs模板引擎和Express中除了配置不同其他的一摸一样，如果你直接接触过ejs模板引擎，只需要查看如何配置就可以了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;Koa中ejs模板
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://zhongyuehui.github.io/categories/Nodejs/"/>
    
    
      <category term="Koa" scheme="https://zhongyuehui.github.io/tags/Koa/"/>
    
  </entry>
  
  <entry>
    <title>Koa的中间件</title>
    <link href="https://zhongyuehui.github.io/2019/08/10/Koa%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>https://zhongyuehui.github.io/2019/08/10/Koa的中间件/</id>
    <published>2019-08-10T14:56:07.000Z</published>
    <updated>2019-09-27T09:43:09.049Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Koa的中间件和Express的中间件很相似，但是也有不同的地方，我们来看一下它们的相同之处和不同之处</p></blockquote><p>&lt;!-- more --&gt;</p><h2>Koa的中间件</h2><ul><li>中间件就是匹配路由之前或者匹配路由完成做的一系列操作，我们可以把它叫做中间件。</li><li>koa的中间件和express的中间件相似，可以参考我之前的<a href="http://www.zhongyuehui.cn/2019/08/04/express%E4%B8%AD%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6/#more" target="_blank" rel="noopener">express中间件</a></li><li>这里我就不再赘述中间件的概念，我们直接使用一下你就明白了。</li></ul><h3>应用级中间件</h3><ul><li>配置应用级中间件<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"><span class="hljs-keyword">const</span> Router = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 匹配路由前打印日期的中间件</span></span><br><span class="line">app.use( <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;  <span class="hljs-comment">//所有的路由都会经过这个中间件，然后输出时间</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()); <span class="hljs-comment">//输出时间</span></span><br><span class="line">    next()  <span class="hljs-comment">//继续匹配，如果没有继续匹配就只输出时间</span></span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="hljs-string">'/'</span>,<span class="hljs-keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="hljs-string">"Home"</span></span><br><span class="line">&#125;)</span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods())</span><br><span class="line">    .listen(<span class="hljs-number">3000</span>, <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></li></ul><h3>路由级中间件</h3><ul><li><p>配置路由级中间件<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"><span class="hljs-keyword">const</span> Router = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//我们想在这个路由输出1，下一个路由输出2，如果我们直接这样，路由是不会继续往下执行的</span></span><br><span class="line"><span class="hljs-comment">//这个时候我们需要在参数中添加一个参数next并调用</span></span><br><span class="line">router.get(<span class="hljs-string">'/'</span>, <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="hljs-string">"Home"</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>);</span><br><span class="line">    <span class="hljs-keyword">await</span> next()  <span class="hljs-comment">//表示路由继续往下匹配</span></span><br><span class="line">&#125;)</span><br><span class="line">    .get(<span class="hljs-string">'/'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123; <span class="hljs-comment">//只有上面的路由next执行后，这个路由才能匹配</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods())</span><br><span class="line">    .listen(<span class="hljs-number">3000</span>, <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>但是实际的开发中，我们不建议这么写，因为代码多余，但是可以这么写</p></li></ul><h3>配置错误处理中间件</h3><ul><li><p>在koa中，不像express中的中间件流程是自上而下的，在koa中，中间件会优先执行，尽管你放在最下面，还是会先执行<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"><span class="hljs-keyword">const</span> Router = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/'</span>, <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="hljs-string">"Home"</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<span class="hljs-comment">//2.输出2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>); <span class="hljs-comment">//1.输出1</span></span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods())</span><br><span class="line">    .listen(<span class="hljs-number">3000</span>, <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>由此可见是先执行了中间件再匹配了路由，所以这个时候我们配置错误处理就需要换一种方式了<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"><span class="hljs-keyword">const</span> Router = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/'</span>, <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123; <span class="hljs-comment">//4.匹配到路由，如果没有匹配到状态码也为404</span></span><br><span class="line">    ctx.body = <span class="hljs-string">"Home"</span> <span class="hljs-comment">//5.有响应数据，则状态码为200，没有则404</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>);<span class="hljs-comment">//6.输出2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123; <span class="hljs-comment">//1.匹配执行中间件</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>); <span class="hljs-comment">//2.输出 1</span></span><br><span class="line">    next() <span class="hljs-comment">//3.去匹配路由</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (ctx.status == <span class="hljs-number">404</span>) &#123;<span class="hljs-comment">//7.判断状态码，有则输出else</span></span><br><span class="line">        ctx.status = <span class="hljs-number">404</span></span><br><span class="line">        ctx.body = <span class="hljs-string">'这是一个404页面'</span></span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'匹配完成'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods())</span><br><span class="line">    .listen(<span class="hljs-number">3000</span>, <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>这里的状态码是以有无路由和响应数据来判断的如果没有就是404。因为页面上没有任何数据，如果有就是200，二者缺一不可</p></li></ul><h3>koa中间件执行流程</h3><ul><li><p>先从外到内 再从内到外<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"><span class="hljs-keyword">const</span> Router = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123; <span class="hljs-comment">//1.匹配执行中间件</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1</span>); <span class="hljs-comment">//2.输出 1</span></span><br><span class="line">    <span class="hljs-keyword">await</span> next() <span class="hljs-comment">//3.去匹配路由</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">5</span>); <span class="hljs-comment">//11.输出5</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123; <span class="hljs-comment">//4.匹配执行中间件</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2</span>); <span class="hljs-comment">//5.输出 2</span></span><br><span class="line">    <span class="hljs-keyword">await</span> next() <span class="hljs-comment">//6.去匹配路由</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">4</span>); <span class="hljs-comment">//10.输出4</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">router.get(<span class="hljs-string">'/'</span>, <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123; <span class="hljs-comment">//7.匹配到路由</span></span><br><span class="line">    ctx.body = <span class="hljs-string">"Home"</span> <span class="hljs-comment">//8.有响应数据，则状态码为200</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">3</span>);<span class="hljs-comment">//9.输出3</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods())</span><br><span class="line">    .listen(<span class="hljs-number">3000</span>, <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>最终的输出就是1-5，以next为内外分界的话，就像是洋葱，先从外到里，然后从里到外<img src="https://s2.ax1x.com/2019/08/09/eqyMFK.png" alt="执行流程"></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Koa的中间件和Express的中间件很相似，但是也有不同的地方，我们来看一下它们的相同之处和不同之处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;Koa的中间件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;中
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://zhongyuehui.github.io/categories/Nodejs/"/>
    
    
      <category term="Koa" scheme="https://zhongyuehui.github.io/tags/Koa/"/>
    
  </entry>
  
  <entry>
    <title>Koa中的路由与动态路由和get传值</title>
    <link href="https://zhongyuehui.github.io/2019/08/10/Koa%E4%B8%AD%E7%9A%84%E8%B7%AF%E7%94%B1%E4%B8%8E%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E5%92%8Cget%E4%BC%A0%E5%80%BC/"/>
    <id>https://zhongyuehui.github.io/2019/08/10/Koa中的路由与动态路由和get传值/</id>
    <published>2019-08-10T14:55:07.000Z</published>
    <updated>2019-09-27T09:43:47.634Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>路由传值是在开发中的家常便饭了，不论是在Nodejs中，还是在PHP等语言上，都是非常常用的，我们来看一下在node中如何使用路由传值</p></blockquote><p>&lt;!-- more --&gt;</p><h2>Koa中的路由与动态路由和get传值</h2><h3>什么是路由？</h3><ul><li>路由是由一个URL(路径)和一个特定的HTTP方法(GET、POST等)组成，涉及应用如何响应客户端对某个网站节点的访问。</li><li>通俗的讲就是路由根据不同的URL地址，加载不同的页面响应不同的内容实现不同的功能。</li></ul><h3>Koa中的路由</h3><ul><li>Koa的路由和Express有所不同，在Express中直接引入express就可以配置路由，但是koa需要安装路由模块</li><li>安装:<code>cnpm i koa-router --save</code></li><li>基本的路由配置<figure class="highlight dart hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = require(<span class="hljs-string">'koa'</span>)</span><br><span class="line"> <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"> <span class="hljs-comment">//引入路由</span></span><br><span class="line"> <span class="hljs-keyword">const</span> Router = require(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"> <span class="hljs-comment">//实例化路由</span></span><br><span class="line"> <span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"> </span><br><span class="line"> <span class="hljs-comment">//首页</span></span><br><span class="line"> router.<span class="hljs-keyword">get</span>(<span class="hljs-string">'/'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">     cxt.body = <span class="hljs-string">"Home"</span></span><br><span class="line"> &#125;)</span><br><span class="line">     .<span class="hljs-keyword">get</span>(<span class="hljs-string">'/admin'</span>,<span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">         cxt.body = <span class="hljs-string">"管理页面"</span></span><br><span class="line">     &#125;)</span><br><span class="line"> </span><br><span class="line"> <span class="hljs-comment">//启动路由并配置端口</span></span><br><span class="line"> app</span><br><span class="line">     .use(router.routes())</span><br><span class="line">     .use(router.allowedMethods())</span><br><span class="line">     .listen(<span class="hljs-number">3000</span>, console.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></li></ul><h3>Koa路由获取GET传值的值</h3><ul><li>在koa中GET传值通过request接收，但是接收的方式有两种:(query,querystring)</li><li>使用query：返回的是格式化好的参数对象，如：{name:zs,age:12}</li><li>使用querystring：返回的是请求字符串<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"><span class="hljs-comment">//引入路由</span></span><br><span class="line"><span class="hljs-keyword">const</span> Router = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-comment">//实例化路由</span></span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//首页</span></span><br><span class="line">router.get(<span class="hljs-string">'/'</span>,<span class="hljs-keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="hljs-string">"Home"</span></span><br><span class="line">    <span class="hljs-comment">//从ctx中读取GET传值 http://localhost:3000/?name=zs</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(ctx.query);<span class="hljs-comment">//输出 [Object: null prototype] &#123; name: 'zs' &#125;</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(ctx.querystring); <span class="hljs-comment">//输出 namne=zs  获取的是一个字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//从ctx的request中获取</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(ctx.request.query);<span class="hljs-comment">//输出 [Object: null prototype] &#123; name: 'zs' &#125;</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(ctx.request.querystring); <span class="hljs-comment">//输出 namne=zs  获取的是一个字符串</span></span><br><span class="line">&#125;)</span><br><span class="line">    .get(<span class="hljs-string">'/admin'</span>,<span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">        ctx.body = <span class="hljs-string">"管理页面"</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//启动路由并配置端口</span></span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods())</span><br><span class="line">    .listen(<span class="hljs-number">3000</span>, <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></li></ul><h3>koa中的动态路由以及获取动态路由的值</h3><ul><li>和express一样使用<code>/:id</code>的方式设置的动态路由，使用params获取传递的值<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> koa()</span><br><span class="line"><span class="hljs-comment">//引入路由</span></span><br><span class="line"><span class="hljs-keyword">const</span> Router = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-comment">//实例化路由</span></span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//首页</span></span><br><span class="line">router.get(<span class="hljs-string">'/'</span>, <span class="hljs-keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    ctx.body = <span class="hljs-string">"Home"</span></span><br><span class="line">&#125;)</span><br><span class="line">    .get(<span class="hljs-string">'/admin/:id'</span>, <span class="hljs-function"><span class="hljs-params">ctx</span> =&gt;</span> &#123;  <span class="hljs-comment">//动态路由</span></span><br><span class="line">        ctx.body = <span class="hljs-string">"管理页面"</span></span><br><span class="line">        <span class="hljs-comment">//http://localhost:3000/admin/123</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log(ctx.params); <span class="hljs-comment">//获取动态路由的传值 &#123;id:'123&#125;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .get(<span class="hljs-string">'/news/:id/:title'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123;  <span class="hljs-comment">//动态路由传递多个值</span></span><br><span class="line">        ctx.body = <span class="hljs-string">"新闻页面"</span></span><br><span class="line">        <span class="hljs-comment">//http://localhost:3000/news/12/新闻</span></span><br><span class="line">        <span class="hljs-built_in">console</span>.log(ctx.params);<span class="hljs-comment">//&#123; id: '12', title: '新闻' &#125;</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="hljs-comment">//启动路由并配置端口</span></span><br><span class="line">app</span><br><span class="line">    .use(router.routes())</span><br><span class="line">    .use(router.allowedMethods())</span><br><span class="line">    .listen(<span class="hljs-number">3000</span>, <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"http://localhost:3000"</span>))</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;路由传值是在开发中的家常便饭了，不论是在Nodejs中，还是在PHP等语言上，都是非常常用的，我们来看一下在node中如何使用路由传值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;Koa中的路由
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://zhongyuehui.github.io/categories/Nodejs/"/>
    
    
      <category term="Koa" scheme="https://zhongyuehui.github.io/tags/Koa/"/>
    
  </entry>
  
</feed>
