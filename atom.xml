<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Just for fun</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhongyuehui.github.io/"/>
  <updated>2019-08-04T10:32:09.406Z</updated>
  <id>https://zhongyuehui.github.io/</id>
  
  <author>
    <name>zhong yuehui</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cookie的基本使用与Cookie二级域名之间的共享、Cookie的加密</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/Cookie%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E4%B8%8ECookie%E4%BA%8C%E7%BA%A7%E5%9F%9F%E5%90%8D%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B1%E4%BA%AB%E3%80%81Cookie%E7%9A%84%E5%8A%A0%E5%AF%86/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/Cookie的基本使用与Cookie二级域名之间的共享、Cookie的加密/</id>
    <published>2019-08-04T10:31:02.000Z</published>
    <updated>2019-08-04T10:32:09.406Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>cookie是存储于访问者的计算机中的变量。可以让我们用同一个浏览器访问同一个域名时共享数据</p></blockquote><p>&lt;!-- more --&gt;</p><h2>Cookie的基本使用</h2><h3>认识cookie</h3><ul><li>cookie是存储于访问者的计算机中的变量。可以让我们用同一个浏览器访问同一个域名时共享数据。</li><li>HTTP 是无状态协议。简单地说，当你浏览了一个页面，然后转到同一个网站的另一个页面，服务器无法认识到这是同一个浏览器在访问同一个网站。每一次的访问，都是没有任何 关系的。</li><li>Cookie 是一个简单到爆的想法：当访问一个页面的时候，服务器在下行 HTTP 报文中， 命令浏览器存储一个字符串; 浏览器再访问同一个域的时候，将把这个字符串携带到上行 HTTP 请求中。第一次访问一个服务器，不可能携带 cookie。 必须是服务器得到这次请求， 在下行响应报头中，携带 cookie 信息，此后每一次浏览器往这个服务器发出的请求，都会 携带这个 cookie。</li></ul><h3>Cookie 特点</h3><ul><li>cookie 保存在浏览器本地</li><li>正常设置的 cookie 是不加密的，用户可以自由看到;</li><li>用户可以删除 cookie，或者禁用它</li><li>cookie 可以被篡改</li><li>cookie 可以用于攻击</li><li>cookie 存储量很小。未来实际上要被 localStorage 替代，但是后者 IE9 兼容</li></ul><h3>cookie的用途</h3><ul><li>用来保存用户登陆状态</li><li>用来获取商品浏览信息，进行相似商品的推送</li><li>用来保存浏览的历史记录</li></ul><h3>cookie的使用</h3><ul><li><p>安装:<code>cnpm i cookie-parser --save</code></p></li><li><p>因为cookie也是一个中间件<figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">var</span> cookieParser = <span class="hljs-keyword">require</span>(<span class="hljs-string">'cookie-parser'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">var</span> app = express()</span><br><span class="line">app.<span class="hljs-keyword">use</span>(cookieParser())</span><br></pre></td></tr></table></figure></p></li><li><p>实例<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = express()</span><br><span class="line"><span class="hljs-keyword">var</span> cookie = <span class="hljs-built_in">require</span>(<span class="hljs-string">'cookie-parser'</span>)</span><br><span class="line">app.use(cookie())</span><br><span class="line"><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">//读取cookie的值</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(req.cookies);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(req.signedCookies)</span><br><span class="line">    res.send(<span class="hljs-string">'Hello Nodejs'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="hljs-string">'/setcookie'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">//设置cookie</span></span><br><span class="line">    <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    参数一:'cookie的名字'</span></span><br><span class="line"><span class="hljs-comment">    参数二：cookie的值</span></span><br><span class="line"><span class="hljs-comment">    参数三：cookie的配置信息</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">    res.cookie(<span class="hljs-string">'userinfo'</span>, <span class="hljs-string">"zs"</span>, &#123; maxAge: <span class="hljs-number">60000</span> &#125;) <span class="hljs-comment">//表示6000毫秒后过期</span></span><br><span class="line">    <span class="hljs-comment">//这个时候cookie的值时这样的[&#123;userinfo:'zs&#125;]，如果需要设置多个cookie值，那么就需要多次使用res.cookie</span></span><br><span class="line">    res.send(<span class="hljs-string">'设置cookie完成'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port port!`</span>))</span><br></pre></td></tr></table></figure></p></li></ul><h2><strong>cookie的一些属性说明</strong></h2><ul><li><code>domain</code>: 域名</li><li><code>name=value</code>：键值对，可以设置要保存的 Key/Value，注意这里的 name 不能和其他属性项的名字 一样</li><li><code>Expires</code>： 过期时间（秒），在设置的某个时间点后该 Cookie 就会失效，如 expires=Wednesday,09-Nov-99 23:12:40 GMT</li><li><code>maxAge</code>： 最大失效时间（毫秒），设置在多少后失效   -   secure： 当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效</li><li><code>Path</code>： 表示 cookie 影响到的路由，如 path=/。如果路径不能匹配时，浏览器则不发送这个 Cookie</li><li><code>httpOnly</code>：是微软对 COOKIE 做的扩展。如果在 COOKIE 中设置了“httpOnly”属性，则通过程序（JS 脚本、applet 等）将无法读取到COOKIE 信息，防止 XSS 攻击产生 singed：表示是否签名cookie, 设为true 会对这个 cookie 签名，这样就需要用 res.signedCookies 而不是 res.cookies 访问它。被篡改的签名 cookie 会被服务器拒绝，并且 cookie 值会重置为它的原始值</li></ul><h3>Cookie多个二级域名之间的共享</h3><ul><li><p>在一般的网站中，难免会有二级域名，如果需要在二级域名中使用一级域名的Cookie数据，那么就需要在设置cookie的时候加入一些参数</p></li><li><p>比如我们在hosts文件下添加以下域名解析<figure class="highlight css hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.1</span>  <span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.hello</span><span class="hljs-selector-class">.com</span></span><br><span class="line">127<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.1</span>  <span class="hljs-selector-tag">news</span><span class="hljs-selector-class">.hello</span><span class="hljs-selector-class">.com</span></span><br></pre></td></tr></table></figure></p></li><li><p>这是时候news.hello.com就是二级域名，我们如果需要在二级域名也使用cookie。就需要如下添加<code>domain</code><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = express()</span><br><span class="line"><span class="hljs-keyword">var</span> cookie = <span class="hljs-built_in">require</span>(<span class="hljs-string">'cookie-parser'</span>)</span><br><span class="line">app.use(cookie())</span><br><span class="line"><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">//读取cookie的值</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(req.cookies);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(req.signedCookies)</span><br><span class="line">    res.send(<span class="hljs-string">'Hello Nodejs'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="hljs-string">'/setcookie'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">//设置cookie</span></span><br><span class="line">    <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    参数一:'cookie的名字'</span></span><br><span class="line"><span class="hljs-comment">    参数二：cookie的值</span></span><br><span class="line"><span class="hljs-comment">    参数三：cookie的配置信息</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">    <span class="hljs-comment">//    -domain表示主域名 设置后我们可以在  xxx.hello.com中使用cookie的值</span></span><br><span class="line">    res.cookie(<span class="hljs-string">'userinfo'</span>, <span class="hljs-string">"zs"</span>, &#123; maxAge: <span class="hljs-number">60000</span>, domain: <span class="hljs-string">".hello.com"</span> &#125;) <span class="hljs-comment">//表示60000毫秒后过期</span></span><br><span class="line">    <span class="hljs-comment">//这个时候cookie的值时这样的[&#123;userinfo:'zs&#125;]</span></span><br><span class="line">    res.send(<span class="hljs-string">'设置cookie完成'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port port!`</span>))</span><br></pre></td></tr></table></figure></p></li></ul><h3><strong>设置cookie</strong>使用路径</h3><ul><li>有时候我们并不希望所有的页面都可以访问到cookie那么我们可以设置指定的路由地址才能访问到cookie，使用<code>path</code><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = express()</span><br><span class="line"><span class="hljs-keyword">var</span> cookie = <span class="hljs-built_in">require</span>(<span class="hljs-string">'cookie-parser'</span>)</span><br><span class="line">app.use(cookie())</span><br><span class="line"><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">//读取cookie的值</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(req.cookies);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(req.signedCookies)</span><br><span class="line">    res.send(<span class="hljs-string">'Hello Nodejs'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/news'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(req.cookies);</span><br><span class="line">    res.send(<span class="hljs-string">'news '</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="hljs-string">'/setcookie'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">//设置cookie</span></span><br><span class="line">    <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    参数一:'cookie的名字'</span></span><br><span class="line"><span class="hljs-comment">    参数二：cookie的值</span></span><br><span class="line"><span class="hljs-comment">    参数三：cookie的配置信息</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">    <span class="hljs-comment">//path表示需要访问cookie的路由，这个时候只有/news才能访问cookie</span></span><br><span class="line">    res.cookie(<span class="hljs-string">'userinfo'</span>, <span class="hljs-string">"zs"</span>, &#123; maxAge: <span class="hljs-number">60000</span>, path: <span class="hljs-string">'/news'</span> &#125;)</span><br><span class="line">    <span class="hljs-comment">//这个时候cookie的值时这样的[&#123;userinfo:'zs&#125;]</span></span><br><span class="line">    res.send(<span class="hljs-string">'设置cookie完成'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port port!`</span>))</span><br></pre></td></tr></table></figure></li></ul><h3>设置cookie的访问权限</h3><ul><li>在cookie中添加<code>httpOnly</code>可以使得只能在服务端访问cookie，在js中是不能访问得，增加了安全性<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = express()</span><br><span class="line"><span class="hljs-keyword">var</span> cookie = <span class="hljs-built_in">require</span>(<span class="hljs-string">'cookie-parser'</span>)</span><br><span class="line">app.use(cookie())</span><br><span class="line"><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">//读取cookie的值</span></span><br><span class="line">    <span class="hljs-built_in">console</span>.log(req.cookies);</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(req.signedCookies)</span><br><span class="line">    res.send(<span class="hljs-string">'Hello Nodejs'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/news'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(req.cookies);</span><br><span class="line">    res.send(<span class="hljs-string">'news '</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="hljs-string">'/setcookie'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">//设置cookie</span></span><br><span class="line">    <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    参数一:'cookie的名字'</span></span><br><span class="line"><span class="hljs-comment">    参数二：cookie的值</span></span><br><span class="line"><span class="hljs-comment">    参数三：cookie的配置信息</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">    <span class="hljs-comment">//path表示需要访问cookie的路由，这个时候只有/news才能访问cookie,并且只有在服务端才能使用cookie</span></span><br><span class="line">    res.cookie(<span class="hljs-string">'userinfo'</span>, <span class="hljs-string">"zs"</span>, &#123; maxAge: <span class="hljs-number">60000</span>, path: <span class="hljs-string">'/news'</span>, httpOnly: <span class="hljs-literal">true</span> &#125;)</span><br><span class="line">    <span class="hljs-comment">//这个时候cookie的值时这样的[&#123;userinfo:'zs&#125;]</span></span><br><span class="line">    res.send(<span class="hljs-string">'设置cookie完成'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port port!`</span>))</span><br></pre></td></tr></table></figure></li></ul><h3>cookie的加密</h3><ul><li>使用<code>singed</code>属性加密，获取加密cookie需要使用<code>res.singedCookie</code>而不是<code>re.cookie</code>，需要配置中间件，不然不能起作用<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = express()</span><br><span class="line"><span class="hljs-keyword">var</span> cookie = <span class="hljs-built_in">require</span>(<span class="hljs-string">'cookie-parser'</span>)</span><br><span class="line">app.use(cookie(<span class="hljs-string">'a12a'</span>)) <span class="hljs-comment">//配置加密，可以是任意字符串</span></span><br><span class="line"><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(req.signedCookies) <span class="hljs-comment">//读取加密的cookie</span></span><br><span class="line">    res.send(<span class="hljs-string">'Hello Nodejs'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/news'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(req.cookies);</span><br><span class="line">    res.send(<span class="hljs-string">'news '</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="hljs-string">'/setcookie'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">//设置cookie</span></span><br><span class="line">    <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    参数一:'cookie的名字'</span></span><br><span class="line"><span class="hljs-comment">    参数二：cookie的值</span></span><br><span class="line"><span class="hljs-comment">    参数三：cookie的配置信息</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">    res.cookie(<span class="hljs-string">'userinfo'</span>, <span class="hljs-string">"zs"</span>, &#123; maxAge: <span class="hljs-number">60000</span>, signed: <span class="hljs-literal">true</span> &#125;) <span class="hljs-comment">//表示需要加密，这个加密是在浏览器显示的时候加密</span></span><br><span class="line">    <span class="hljs-comment">//这个时候cookie的值时这样的[&#123;userinfo:'zs&#125;]</span></span><br><span class="line">    res.send(<span class="hljs-string">'设置cookie完成'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.get</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port port!`</span>))</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;cookie是存储于访问者的计算机中的变量。可以让我们用同一个浏览器访问同一个域名时共享数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;Cookie的基本使用&lt;/h2&gt;
&lt;h3&gt;认识cooki
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://zhongyuehui.github.io/categories/Nodejs/"/>
    
    
      <category term="Express" scheme="https://zhongyuehui.github.io/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>Express中的中间件</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/express%E4%B8%AD%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/express中的中间件/</id>
    <published>2019-08-04T10:30:57.000Z</published>
    <updated>2019-08-04T10:30:40.493Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在Nodejs中的Express框架来说，中间件是一个比较抽象的概念，但是对于理解Nodejs的请求原理是非常重要的，这里简单的介绍了Nodejs中Express框架的中间件原理</p></blockquote><p>&lt;!-- more --&gt;&lt;!-- toc --&gt;</p><hr><h2>中间件的原理</h2><hr><p><img src="https://i.loli.net/2019/06/24/5d1044327363a92295.png" alt></p><ul><li>就是相当于水经过一系列处理到用户的过程，中间不能跳过某些步骤或者调换某些步骤</li></ul><h2>Express中间件</h2><ul><li>Express是一个自身功能极简，完全是由路由和中间件构成的一个web开发框架，从本质来说，一个Express应用就是在调用各种中间件</li><li>中间件(Middlewaew)是一个函数，它可以访问请求对象(request object(req))，响应对象(response(res))和web应用中处理数据请求-响应循环流程中的中间件，一般命名为next的变量</li><li><strong>中间件的功能:</strong><ul><li>执行任何代码</li><li>修改请求和响应对象</li><li>终结请求-响应循环</li><li>调用堆栈中的下一个中间件</li></ul></li><li>如果我的get、post回调函数中，没有next参数，那么匹配上第一个路由，就不会往下匹配，如果需要匹配，就需要写next()</li><li><strong>Express应用可使用如下几种中间件</strong><ul><li>应用级中间件</li><li>路由中间件</li></ul></li></ul><h3>应用级中间件</h3><ul><li><p>例如：我们需要在匹配路由前打印以下时间<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = express()</span><br><span class="line"><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/public/'</span>, express.static(<span class="hljs-string">'./public'</span>))</span><br><span class="line">app.set(<span class="hljs-string">"View engine"</span>, <span class="hljs-string">"ejs"</span>)</span><br><span class="line"><span class="hljs-comment">/*中间件</span></span><br><span class="line"><span class="hljs-comment">    应用级中间件</span></span><br><span class="line"><span class="hljs-comment">    这里表示匹配任何路由</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>())  <span class="hljs-comment">//到这里时路由不会继续往下匹配，因为匹配成功了一个，如果需要继续匹配加入next()</span></span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<span class="hljs-comment">//同样的如果这里匹配成功了还需要继续往下匹配，那么这里也需要使用next()</span></span><br><span class="line">    res.render(<span class="hljs-string">'index.ejs'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port port!`</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>一般地应用级中间件用来做权限的判断，比如没有登陆不能访问某些页面，这个时候我们可以使用这个中间件进行处理</p></li></ul><h3>路由中间件</h3><ul><li><p>路由中间件用来匹配路由规则，如果匹配成功做出对应的处理，但是如果没有next同样的路由，只能执行一次不会往下执行<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = express()</span><br><span class="line"><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/public/'</span>, express.static(<span class="hljs-string">'./public'</span>))</span><br><span class="line">app.set(<span class="hljs-string">"View engine"</span>, <span class="hljs-string">"ejs"</span>)</span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.render(<span class="hljs-string">'index.ejs'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//路由中间件</span></span><br><span class="line">app.get(<span class="hljs-string">'/news'</span>, <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'news'</span>);</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/news'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.render(<span class="hljs-string">'news.ejs'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port port!`</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>当然，应用级中间件也可以匹配路由<figure class="highlight lua hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="hljs-string">'/news'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(req, res, next)</span></span> &#123;</span><br><span class="line">console.<span class="hljs-built_in">log</span>(<span class="hljs-string">"use --news"</span>);</span><br><span class="line"><span class="hljs-built_in">next</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></li></ul><h3>配置错误处理中间件</h3><ul><li><p>由于中间件和路由执行顺序都是从上往下的，如果以上路由都没有匹配成功，我们将应用级中间件放到最后面，这样前面的路由没有匹配成功就会进入这个中间件处理<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = express()</span><br><span class="line"><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/public/'</span>, express.static(<span class="hljs-string">'./public'</span>))</span><br><span class="line">app.set(<span class="hljs-string">"View engine"</span>, <span class="hljs-string">"ejs"</span>)</span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.render(<span class="hljs-string">'index.ejs'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/news'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.render(<span class="hljs-string">'news.ejs'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置错误处理中间件</span></span><br><span class="line">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//status表示改变状态。200为请求成功，304为缓存，404为请求失败</span></span><br><span class="line">    res.status(<span class="hljs-number">404</span>).send(<span class="hljs-string">'Not Found 404'</span>)  <span class="hljs-comment">//当然，在这里也可以使用render一个错误页面</span></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port port!`</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>这个时候，我们除了请求/和/news，其他的路由都会进入404，因为前面无法匹配</p></li></ul><h3>内置中间件</h3><ul><li>之前学习的<code>app.use(express.static('/public'))</code>就是内置的一个中间件，用来托管静态公共资源的，因为我们使用<code>app.use('/static',express.static('/public'))</code>用过/static/也能获取到public里面的资源</li></ul><h3>使用body-parser第三方中间件</h3><ul><li><p>因为express并没有提供<code>post</code>的方式，所以我们需要借助于第三方的中间件来进行<code>post</code>操作</p></li><li><p>最简单的使用方式，将通用JSON和URL编码的解析器添加为顶级中间件，它将解析所有传入请求的主体。这是最简单的设置。<figure class="highlight php hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-keyword">require</span>(<span class="hljs-string">'body-parser'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">var</span> app = express()</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// parse application/x-www-form-urlencoded</span></span><br><span class="line">app.<span class="hljs-keyword">use</span>(bodyParser.urlencoded(&#123; extended: <span class="hljs-keyword">false</span> &#125;))</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// parse application/json</span></span><br><span class="line">app.<span class="hljs-keyword">use</span>(bodyParser.json())</span><br><span class="line">app.<span class="hljs-keyword">use</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(req, res)</span> </span>&#123;</span><br><span class="line">  res.setHeader(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'text/plain'</span>)</span><br><span class="line">  res.write(<span class="hljs-string">'you posted:\n'</span>)</span><br><span class="line">  res.end(JSON.stringify(req.body, <span class="hljs-keyword">null</span>, <span class="hljs-number">2</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></li><li><p>将如body解析器专门添加到需要它们的路由中。通常，这是在Express中使用body-parser的最佳方法。<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">var</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">'body-parser'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">var</span> app = express()</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// create application/json parser</span></span><br><span class="line"><span class="hljs-keyword">var</span> jsonParser = bodyParser.json()</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// create application/x-www-form-urlencoded parser</span></span><br><span class="line"><span class="hljs-keyword">var</span> urlencodedParser = bodyParser.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;)</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// POST /login gets urlencoded bodies</span></span><br><span class="line">app.post(<span class="hljs-string">'/login'</span>, urlencodedParser, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="hljs-string">'welcome, '</span> + req.body.username)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// POST /api/users gets JSON bodies</span></span><br><span class="line">app.post(<span class="hljs-string">'/api/users'</span>, jsonParser, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// create user in req.body</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></li><li><p>所有解析器都接受一个类型选项，允许您更改中间件将解析的Content-Type<figure class="highlight lasso hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">var</span> express = <span class="hljs-keyword">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-built_in">var</span> bodyParser = <span class="hljs-keyword">require</span>(<span class="hljs-string">'body-parser'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="hljs-built_in">var</span> app = express()</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// parse various different custom JSON types as JSON</span></span><br><span class="line">app.use(bodyParser.json(&#123; <span class="hljs-keyword">type</span>: <span class="hljs-string">'application/*+json'</span> &#125;))</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// parse some custom thing into a Buffer</span></span><br><span class="line">app.use(bodyParser.raw(&#123; <span class="hljs-keyword">type</span>: <span class="hljs-string">'application/vnd.custom-type'</span> &#125;))</span><br><span class="line"> </span><br><span class="line"><span class="hljs-comment">// parse an HTML body into a string</span></span><br><span class="line">app.use(bodyParser.text(&#123; <span class="hljs-keyword">type</span>: <span class="hljs-string">'text/html'</span> &#125;))</span><br></pre></td></tr></table></figure></p></li><li><p>使用body-parser中间件处理表单post请求，并使用<code>req.body</code>获取传递的值<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-comment">//引入body-parser</span></span><br><span class="line"><span class="hljs-keyword">const</span> bodyParser = <span class="hljs-built_in">require</span>(<span class="hljs-string">'body-parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置body-parser</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: <span class="hljs-literal">false</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// parse application/json</span></span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="hljs-string">'/public/'</span>, express.static(<span class="hljs-string">'./public'</span>))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置ejs模板</span></span><br><span class="line">app.set(<span class="hljs-string">"View engine"</span>, <span class="hljs-string">"ejs"</span>)</span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.render(<span class="hljs-string">'index.ejs'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(<span class="hljs-string">'/news'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.render(<span class="hljs-string">'news.ejs'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-comment">//配置表单数据路由</span></span><br><span class="line">app.get(<span class="hljs-string">'/login'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.render(<span class="hljs-string">'login.ejs'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-comment">//配置表单提交路由</span></span><br><span class="line">app.post(<span class="hljs-string">'/login'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.send(req.body)  <span class="hljs-comment">//使用req获取请求的数据，就是表单提交的数据</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-comment">//配置错误处理中间件</span></span><br><span class="line">app.use(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//status表示改变状态。200为请求成功，304为缓存，404为请求失败</span></span><br><span class="line">    res.status(<span class="hljs-number">404</span>).send(<span class="hljs-string">'Not Found 404'</span>)  <span class="hljs-comment">//当然，在这里也可以使用render一个错误页面</span></span><br><span class="line">&#125;)</span><br><span class="line">app.listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port port!`</span>))</span><br></pre></td></tr></table></figure></p></li><li><p><code>login.ejs</code>页面<figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">""</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"username"</span>&gt;</span></span><br><span class="line">            用户名: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"username"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"password"</span>&gt;</span></span><br><span class="line">            密 码: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"password"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"提交"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在Nodejs中的Express框架来说，中间件是一个比较抽象的概念，但是对于理解Nodejs的请求原理是非常重要的，这里简单的介绍了Nodejs中Express框架的中间件原理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more 
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://zhongyuehui.github.io/categories/Nodejs/"/>
    
    
      <category term="Express" scheme="https://zhongyuehui.github.io/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>在Express使用ejs模板引擎以及静态文件的托管</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/%E5%9C%A8Express%E4%BD%BF%E7%94%A8ejs%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%BB%A5%E5%8F%8A%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E7%9A%84%E6%89%98%E7%AE%A1/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/在Express使用ejs模板引擎以及静态文件的托管/</id>
    <published>2019-08-04T10:26:28.000Z</published>
    <updated>2019-08-04T10:27:35.173Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ejs模板引擎在Express中有集成渲染的中间件,不需要配置即可使用.</p></blockquote><p>&lt;!-- more --&gt;</p><h2>在Express使用ejs模板引擎</h2><ul><li><p>在之前我们使用ejs模板需要先安装，再引入，才能使用，但是在express中，安装后就可以直接使用</p></li><li><p>安装:<code>cnpm i ejs --save-dev</code></p></li><li><p>使用express的render渲染页面<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = express()</span><br><span class="line"><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置模板引擎</span></span><br><span class="line">app.set(<span class="hljs-string">"View engine"</span>, <span class="hljs-string">"ejs"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//使用express的render渲染页面</span></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">//这里使用render表示渲染哪个页面，默认从views中查找</span></span><br><span class="line">    res.render(<span class="hljs-string">'index.ejs'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port port!`</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>渲染页面并传值<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = express()</span><br><span class="line"><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置模板引擎</span></span><br><span class="line">app.set(<span class="hljs-string">"View engine"</span>, <span class="hljs-string">"ejs"</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//使用express的render渲染页面</span></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-comment">//这里使用render表示渲染哪个页面，默认从views中查找</span></span><br><span class="line">    res.render(<span class="hljs-string">'index.ejs'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-comment">//使用express的render渲染页面并传递参数</span></span><br><span class="line">app.get(<span class="hljs-string">'/news'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> list = [<span class="hljs-string">'number'</span>, <span class="hljs-string">'string'</span>, <span class="hljs-string">'boolean'</span>, <span class="hljs-string">'undefined'</span>, <span class="hljs-string">'null'</span>, <span class="hljs-string">'object'</span>]</span><br><span class="line">    res.render(<span class="hljs-string">'news.ejs'</span>, &#123;</span><br><span class="line">        list: list  <span class="hljs-comment">//可以简写成list</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port port!`</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>获取传递的值<code>news.ejs</code><figure class="highlight erb hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>news<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="hljs-ruby"> <span class="hljs-keyword">for</span>(let i=<span class="hljs-number">0</span>;i&lt;list.length;i++)&#123;</span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=</span></span></span><span class="hljs-ruby">list[i] </span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="hljs-ruby"> &#125; </span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></li><li><p>补充：</p><ul><li><p>在渲染页面的时候默认会在views中进行查找，如果需要改变默认视图页面的目录可以使用如下方式</p></li><li><p><code>app.set(&quot;views&quot;,__dirname + &quot;/设置的目录名称&quot;)</code></p></li><li><p>但是这种方式不被推荐，一般使用默认的目录</p></li><li><p>在使用ejs模板引擎的时候，如果你想使用html的文件后缀名，可以使用如下配置<figure class="highlight lasso hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//引入ejs</span></span><br><span class="line"><span class="hljs-built_in">var</span> ejs = <span class="hljs-keyword">require</span>(<span class="hljs-string">'ejs'</span>)</span><br><span class="line"><span class="hljs-comment">//配置ejs</span></span><br><span class="line">app.engine(<span class="hljs-string">'html'</span>, ejs.__express)</span><br><span class="line"><span class="hljs-comment">//配置模板引擎</span></span><br><span class="line">app.<span class="hljs-built_in">set</span>(<span class="hljs-string">"View engine"</span>, <span class="hljs-string">"html"</span>)</span><br></pre></td></tr></table></figure></p></li><li><p>但是一般我们不需要去修改</p></li></ul></li></ul><h3>静态文件的托管</h3><ul><li><p>如果我们定义了一些页面的样式，样式被其他页面引入，这时候如果直接使用css样式会报错，因为路径不唯一，那么这个时候我们就需要使用静态资源的托管，在express中已经为我们提供了这项功能<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"> <span class="hljs-keyword">const</span> app = express()</span><br><span class="line"> <span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span></span><br><span class="line"> <span class="hljs-comment">//配置静态资源文件,第一个参数是使用的文件名，第二个参数的设置静态资源的文件夹</span></span><br><span class="line"> app.use(<span class="hljs-string">'/public/'</span>, express.static(<span class="hljs-string">'./public'</span>))</span><br><span class="line"> <span class="hljs-comment">// http://localhost:3000/public/css/style.css可以使用css文件,其中第一个参数中的这个public可以不写，</span></span><br><span class="line"> <span class="hljs-comment">//通过http://localhost:3000/css/style.cs来使用文件，也可以修改任意名，这个时候就形成了虚拟目录，只要使用的时候带上这个路由名即可</span></span><br><span class="line"> <span class="hljs-comment">// app.use(express.static('./public'))</span></span><br><span class="line"> </span><br><span class="line"> app.set(<span class="hljs-string">"View engine"</span>, <span class="hljs-string">"ejs"</span>)</span><br><span class="line"> app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">     res.render(<span class="hljs-string">'index.ejs'</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"> app.listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port port!`</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>使用静态文件下的css样式文件,公共样式表哪里引入公共样式就在那里引入样式<figure class="highlight erb hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-comment">&lt;!-- 因为配置了静态web服务 我们只需要使用这个路径就可以使用public下的css文件夹下的文件 --&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/public/css/style.css"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-comment">&lt;!-- 引入公共样式 --&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="hljs-ruby"><span class="hljs-keyword">include</span> ./header.ejs </span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你好ejs<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;ejs模板引擎在Express中有集成渲染的中间件,不需要配置即可使用.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;在Express使用ejs模板引擎&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在之
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://zhongyuehui.github.io/categories/Nodejs/"/>
    
    
      <category term="Express" scheme="https://zhongyuehui.github.io/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>Express框架的安装和基本使用</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/Express%E6%A1%86%E6%9E%B6%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/Express框架的安装和基本使用/</id>
    <published>2019-08-04T10:24:42.000Z</published>
    <updated>2019-08-04T10:26:06.506Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Express框架是基于Nodejs的框架,非常简洁,但是功能非常强大.</p></blockquote><p>&lt;!-- more --&gt;</p><h2>Express框架的安装和基本使用</h2><ul><li><p>安装：<code>cnpm i express -save-dev</code></p></li><li><p>引入:<code>const express= require(&quot;express&quot;)</code></p></li><li><p>实例化:<code>const app =express()</code>,也可以使用<code>const app=new express()</code></p></li><li><p>使用<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = express()</span><br><span class="line"><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置静态路由规则</span></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.send(<span class="hljs-string">'Hello World!'</span>))  <span class="hljs-comment">//使用express的send方法</span></span><br><span class="line">app.get(<span class="hljs-string">'/news'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.end(<span class="hljs-string">'xixi'</span>))<span class="hljs-comment">//使用原生的end方法</span></span><br><span class="line">app.listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port port!`</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>配置动态路由<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = express()</span><br><span class="line"><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置静态路由</span></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.send(<span class="hljs-string">'Hello World!'</span>))  <span class="hljs-comment">//使用express的send方法</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置动态路由，传递id</span></span><br><span class="line">app.get(<span class="hljs-string">'/news/:id'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.send(<span class="hljs-string">'新闻'</span>))</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port port!`</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>获取动态路由的值,使用req.params可以获取传递的数据对象,req.params.属性名获取传递的值<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = express()</span><br><span class="line"><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置静态路由</span></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.send(<span class="hljs-string">'Hello World!'</span>))  <span class="hljs-comment">//使用express的send方法</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置动态路由，传递id</span></span><br><span class="line">app.get(<span class="hljs-string">'/news/:id'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(req.params);  <span class="hljs-comment">//获取传递过来的数据&#123;&#125;</span></span><br><span class="line">    res.send(<span class="hljs-string">'新闻'</span> + req.params.id)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port port!`</span>))</span><br></pre></td></tr></table></figure></p></li><li><p>get传值与获取，使用<code>/news?id=5&amp;name=&quot;zs&quot;</code>这种形式传值<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">'express'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> app = express()</span><br><span class="line"><span class="hljs-keyword">const</span> port = <span class="hljs-number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//配置静态路由</span></span><br><span class="line">app.get(<span class="hljs-string">'/'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.send(<span class="hljs-string">'Hello World!'</span>))  <span class="hljs-comment">//使用express的send方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//get传值</span></span><br><span class="line"><span class="hljs-comment">// http://localhost:3000/product?id=5&amp;name="zs"</span></span><br><span class="line">app.get(<span class="hljs-string">'/product'</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(req.query);</span><br><span class="line">    res.send(<span class="hljs-string">'product'</span> + req.query.id + <span class="hljs-string">"------"</span> + req.query.name)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`Example app listening on port port!`</span>))</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Express框架是基于Nodejs的框架,非常简洁,但是功能非常强大.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;Express框架的安装和基本使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://zhongyuehui.github.io/categories/Nodejs/"/>
    
    
      <category term="Express" scheme="https://zhongyuehui.github.io/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs的ejs模板引擎的使用</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/Nodejs%E7%9A%84ejs%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/Nodejs的ejs模板引擎的使用/</id>
    <published>2019-08-04T10:21:43.000Z</published>
    <updated>2019-08-04T10:23:52.675Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ejs模板引擎和art-template引擎一样,都是快速渲染数据,减少代码工作量.</p></blockquote><p>&lt;!-- more --&gt;</p><h2>Nodejs的<a href="https://ejs.bootcss.com" target="_blank" rel="noopener">ejs</a>模板引擎的使用</h2><ul><li><p>安装:<code>cnpm i ejs --save</code></p></li><li><p>标签：<figure class="highlight mel hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="hljs-string">'脚本'</span> 标签，用于流程控制，无输出。</span><br><span class="line">&lt;%_ 删除其前面的空格符</span><br><span class="line">&lt;%= 输出数据到模板（输出是转义 HTML 标签）</span><br><span class="line">&lt;%- 输出非转义的数据到模板</span><br><span class="line">&lt;%# 注释标签，不执行、不输出内容</span><br><span class="line">&lt;%% 输出字符串 <span class="hljs-string">'&lt;%'</span></span><br><span class="line">%&gt; 一般结束标签</span><br><span class="line">-%&gt; 删除紧随其后的换行符</span><br><span class="line">_%&gt; 将结束标签后面的空格符删除</span><br></pre></td></tr></table></figure></p></li><li><p>语法：<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//app.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">'url'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> ejs =<span class="hljs-built_in">require</span>(<span class="hljs-string">'ejs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> port = <span class="hljs-number">8081</span></span><br><span class="line">http.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//头文件</span></span><br><span class="line">    response.writeHead(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">'Content-Type'</span>: <span class="hljs-string">'text/html'</span> &#125;);</span><br><span class="line">    <span class="hljs-comment">//过滤掉url中的参数</span></span><br><span class="line">    <span class="hljs-keyword">let</span> pathname = url.parse(request.url).pathname</span><br><span class="line">    <span class="hljs-keyword">if</span> (pathname == <span class="hljs-string">'/login'</span>) &#123;</span><br><span class="line">        <span class="hljs-comment">//传递参数</span></span><br><span class="line">        <span class="hljs-keyword">let</span> data = <span class="hljs-string">'123'</span></span><br><span class="line">        <span class="hljs-comment">// 传递数组</span></span><br><span class="line">        <span class="hljs-keyword">let</span> list=[</span><br><span class="line">            <span class="hljs-string">'123'</span>,</span><br><span class="line">            <span class="hljs-string">'456'</span>,</span><br><span class="line">            <span class="hljs-string">'789'</span></span><br><span class="line">        ]</span><br><span class="line">        ejs.renderFile(<span class="hljs-string">'views/login.html'</span>,&#123;<span class="hljs-built_in">number</span>:data,list&#125;,<span class="hljs-function">(<span class="hljs-params">error,data</span>)=&gt;</span>&#123;</span><br><span class="line">        response.end(data);            </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pathname == <span class="hljs-string">'/resgin'</span>) &#123;</span><br><span class="line">        <span class="hljs-comment">//使用模板引擎的方法读取数据并渲染</span></span><br><span class="line">        <span class="hljs-keyword">let</span> html=<span class="hljs-string">'&lt;h2&gt;这是注册页面&lt;/h2&gt;'</span></span><br><span class="line">        ejs.renderFile(<span class="hljs-string">'views/resgin.html'</span>,&#123;html&#125;,<span class="hljs-function">(<span class="hljs-params">error,data</span>)=&gt;</span>&#123;</span><br><span class="line">            response.end(data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(port, <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'run'</span> + port)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></li><li><p>login.html<figure class="highlight django hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-xml"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=number%</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">%</span> <span class="hljs-attr">for</span>(<span class="hljs-attr">let</span> <span class="hljs-attr">i</span>= <span class="hljs-string">0;i</span>&lt;<span class="hljs-attr">list.length</span>;<span class="hljs-attr">i</span>++) &#123; %&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">%=list[i]</span> %&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span></span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span></span><br><span class="line"><span class="hljs-xml"></span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p></li><li><p>resgin.html<figure class="highlight xml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">"X-UA-Compatible"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>resgin<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">%-</span> <span class="hljs-attr">html</span>%&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li><li><p>上述代码中实现了一些简单的语法使用方式</p></li></ul><h3>公共部分</h3><ul><li>使用ejs模板引擎引入公共头部或者尾部，在index.ejs中引入<code>header.ejs</code><figure class="highlight erb hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">%-</span></span></span><span class="hljs-ruby"><span class="hljs-keyword">include</span> ../public/header.ejs </span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h4>ejs循环语句</h4><pre><code><figure class="highlight erb hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="hljs-ruby"> <span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123; </span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span> </span></span><br><span class="line"><span class="hljs-xml"> </span></span><br><span class="line"><span class="hljs-xml"> <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </span></span><br><span class="line"><span class="hljs-xml"> </span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="hljs-ruby">&#125; <span class="hljs-keyword">else</span>&#123; </span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span> </span></span><br><span class="line"><span class="hljs-xml"> </span></span><br><span class="line"><span class="hljs-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> </span></span><br><span class="line"><span class="hljs-xml"> </span></span><br><span class="line"><span class="hljs-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">%</span></span></span><span class="hljs-ruby">&#125; </span><span class="hljs-xml"><span class="hljs-tag">%&gt;</span></span></span><br></pre></td></tr></table></figure></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;ejs模板引擎和art-template引擎一样,都是快速渲染数据,减少代码工作量.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;Nodejs的&lt;a href=&quot;https://ejs.boot
      
    
    </summary>
    
      <category term="Nodejs" scheme="https://zhongyuehui.github.io/categories/Nodejs/"/>
    
    
      <category term="Nodejs" scheme="https://zhongyuehui.github.io/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>使用JS对数据表进行批量插入和vscode工具</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/%E4%BD%BF%E7%94%A8JS%E5%AF%B9%E6%95%B0%E6%8D%AE%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E5%92%8Cvscode%E5%B7%A5%E5%85%B7/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/使用JS对数据表进行批量插入和vscode工具/</id>
    <published>2019-08-04T10:20:04.000Z</published>
    <updated>2019-08-04T10:21:07.531Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们可以在js文件中对数据库进行批量操作,更方便.</p></blockquote><p>&lt;!-- more --&gt;</p><h2>使用JS对数据表进行批量插入</h2><ul><li><p>使用循环插入数据<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> startTime = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()).getTime()</span><br><span class="line"><span class="hljs-keyword">var</span> db = connect(<span class="hljs-string">'User'</span>)  <span class="hljs-comment">//连接数据库</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;</span><br><span class="line">    db.user.insert(&#123; <span class="hljs-string">"num"</span>: <span class="hljs-number">1</span> &#125;)  <span class="hljs-comment">//往数据表循环添加数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> runTime = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()).getTime() - startTime</span><br><span class="line"></span><br><span class="line">print(runTime + <span class="hljs-string">'ms'</span>)  <span class="hljs-comment">//604ms</span></span><br></pre></td></tr></table></figure></p></li><li><p>使用批量插入<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> startTime = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()).getTime()</span><br><span class="line"><span class="hljs-keyword">var</span> db = connect(<span class="hljs-string">'User'</span>)  <span class="hljs-comment">//连接数据库</span></span><br><span class="line"><span class="hljs-keyword">var</span> dataArray = []</span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000</span>; i++) &#123;</span><br><span class="line">    dataArray.push(&#123; <span class="hljs-string">"num"</span>: <span class="hljs-number">1</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line">db.user.insert(dataArray)  <span class="hljs-comment">//批量操作</span></span><br><span class="line"><span class="hljs-keyword">var</span> runTime = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>()).getTime() - startTime</span><br><span class="line"></span><br><span class="line">print(runTime + <span class="hljs-string">'ms'</span>)  <span class="hljs-comment">//34ms</span></span><br></pre></td></tr></table></figure></p></li></ul><h2>总结:</h2><ul><li>使用批量操作对数据表进行数据的插入比循环插入性能快了几十倍</li><li>尽量使用批量插入</li></ul><h3>vsode操作mongodb</h3><ul><li>在vscode中，我们打开了数据库服务之后，可以直接在终端调试工具执行这个mongo</li><li>我们在js文件中写好了要插入的数据后，我们可以在终端使用 <code>mongo js文件名</code>,这样自动会执行我们的js代码进行数据库的操作</li><li>或者使用mongo后进入数据库界面使用<code>load('./文件名的方式')</code>，但是这个前提是要终端的路径打开在文件的路径中，而且需要<code>use</code>了当前数据表的数据库，可以不要连接数据库直接插入数据或者查找数据</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;我们可以在js文件中对数据库进行批量操作,更方便.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;使用JS对数据表进行批量插入&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用循环插入数据
&lt;figure
      
    
    </summary>
    
      <category term="MongoDB" scheme="https://zhongyuehui.github.io/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://zhongyuehui.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB数据库的备份与还原</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E8%BF%98%E5%8E%9F/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/MongoDB数据库的备份与还原/</id>
    <published>2019-08-04T10:18:28.000Z</published>
    <updated>2019-08-04T10:19:25.906Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>数据库的备份与还原也是在操作数据库中常用的操作,但是它们非常简单.</p></blockquote><p>&lt;!-- more --&gt;</p><h2>MongoDB数据库的备份与还原</h2><h3>备份</h3><ul><li><p>备份格式：<figure class="highlight jboss-cli hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mongodump</span><br><span class="line"><span class="hljs-params">--host</span> 127.0.0.1  <span class="hljs-string">//</span>主机名</span><br><span class="line"><span class="hljs-params">--port</span> 27017  。。端口号</span><br><span class="line"><span class="hljs-params">--out</span> D:<span class="hljs-string">/databack/backup</span>  <span class="hljs-string">//</span>备份路径</span><br><span class="line"><span class="hljs-params">--collection</span> myCollections  <span class="hljs-string">//</span>备份的数据表</span><br><span class="line"><span class="hljs-params">--db</span> test  <span class="hljs-string">//</span>备份的数据库</span><br><span class="line"><span class="hljs-params">--username</span> username  <span class="hljs-string">//</span>用户名</span><br><span class="line"><span class="hljs-params">--password</span> password  <span class="hljs-string">//</span>密码</span><br></pre></td></tr></table></figure></p></li><li><p>mongodump命令脚本语法如下<figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&gt;</span><span class="hljs-bash">mongodump -h dbhost -d dbname -o dbdirectory</span></span><br></pre></td></tr></table></figure></p></li><li><p>-h： MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</p></li><li><p>-d：需要备份的数据库实例，例如：test</p></li><li><p>-o：备份的数据存放位置，例如：c:\data\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</p></li></ul><h4>注意：</h4><ul><li><p>备份格式中，后面那些参数都是可选的</p></li><li><p>如果我们不指定数据表和数据库，那么默认全部都会备份,但是备份时我们不用进入数据库，直接在命令行进行备份<figure class="highlight taggerscript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS C:<span class="hljs-symbol">\P</span>rogram Files<span class="hljs-symbol">\M</span>ongoDB<span class="hljs-symbol">\S</span>erver<span class="hljs-symbol">\4</span>.0<span class="hljs-symbol">\b</span>in&gt; mongodump --host 127.0.0.1:27017 --out E:<span class="hljs-symbol">\d</span>ata<span class="hljs-symbol">\d</span>ata</span><br></pre></td></tr></table></figure></p></li><li><p>也可以简写成这样<figure class="highlight taggerscript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS C:<span class="hljs-symbol">\P</span>rogram Files<span class="hljs-symbol">\M</span>ongoDB<span class="hljs-symbol">\S</span>erver<span class="hljs-symbol">\4</span>.0<span class="hljs-symbol">\b</span>in&gt; mongodump -h 127.0.0.1:27017 -o E:<span class="hljs-symbol">\d</span>ata<span class="hljs-symbol">\h</span>ome</span><br></pre></td></tr></table></figure></p></li></ul><h3>恢复还原</h3><ul><li>mongodb使用 mongorerstore 命令来恢复备份的数据。</li></ul><h4>语法</h4><ul><li><p>mongorestore命令脚本语法如下：<figure class="highlight ada hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;mongorestore -h dbhost -d dbname <span class="hljs-comment">--directoryperdb dbdirectory</span></span><br></pre></td></tr></table></figure></p></li><li><p>-h：MongoDB所在服务器地址</p></li><li><p>-d：需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2</p></li><li><p>--directoryperdb：备份数据所在位置，例如：c:\data\dump\test，这里为什么要多加一个test，而不是备份时候的dump，读者自己查看提示吧！</p></li><li><p>--drop:恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！</p></li><li><p>基本格式<figure class="highlight livecodeserver hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mongorestore</span><br><span class="line"><span class="hljs-comment">--host 127.0.0.1</span></span><br><span class="line"><span class="hljs-comment">--port 27017</span></span><br><span class="line"><span class="hljs-comment">--username username</span></span><br><span class="line"><span class="hljs-comment">--password password</span></span><br><span class="line">&lt;path <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> backup&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>比如我们现在不小心删除了一个collections的数据，要进行恢复。现在删除random集合<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db<span class="hljs-selector-class">.random</span><span class="hljs-selector-class">.drop</span>()</span><br></pre></td></tr></table></figure></p></li><li><p>使用命令进行恢复<figure class="highlight jboss-cli hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore <span class="hljs-params">--host</span> 127.0.0.1 <span class="hljs-params">--port</span> 27017 E:<span class="hljs-string">/data/data</span></span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;数据库的备份与还原也是在操作数据库中常用的操作,但是它们非常简单.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;MongoDB数据库的备份与还原&lt;/h2&gt;
&lt;h3&gt;备份&lt;/h3&gt;
&lt;ul&gt;
&lt;l
      
    
    </summary>
    
      <category term="MongoDB" scheme="https://zhongyuehui.github.io/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://zhongyuehui.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB用户的创建删除和管理</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/MongoDB%E7%94%A8%E6%88%B7%E7%9A%84%E5%88%9B%E5%BB%BA%E5%88%A0%E9%99%A4%E5%92%8C%E7%AE%A1%E7%90%86/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/MongoDB用户的创建删除和管理/</id>
    <published>2019-08-04T10:16:19.000Z</published>
    <updated>2019-08-04T10:17:45.893Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一般的在一些项目上,我们都是通过用户来登陆数据库和访问数据库的,这样可以更好的管理用户的权限.</p></blockquote><p>&lt;!-- more --&gt;</p><h2>用户的创建删除和管理</h2><ul><li><p>创建用户,在admim数据库中创建user数据表，在该表中添加用户数据和权限<figure class="highlight groovy hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">use admin后</span><br><span class="line"></span><br><span class="line">db.createUser(&#123;<span class="hljs-comment">// 创建user表</span></span><br><span class="line"><span class="hljs-string">user:</span> <span class="hljs-string">"zhong"</span>,   <span class="hljs-comment">//用户名称</span></span><br><span class="line"><span class="hljs-string">pwd:</span> <span class="hljs-string">"123456"</span>, <span class="hljs-comment">//用户密码</span></span><br><span class="line"><span class="hljs-string">customData:</span> &#123;  <span class="hljs-comment">//数据</span></span><br><span class="line"><span class="hljs-symbol">    name:</span> <span class="hljs-string">'Mrzhong'</span>, <span class="hljs-comment">//用户名</span></span><br><span class="line"><span class="hljs-symbol">    email:</span> <span class="hljs-string">'web0432@126.com'</span>, <span class="hljs-comment">//邮箱</span></span><br><span class="line"><span class="hljs-symbol">    age:</span> <span class="hljs-number">18</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="hljs-string">roles:</span> [&#123;  <span class="hljs-comment">//权限模块</span></span><br><span class="line"><span class="hljs-symbol">    role:</span> <span class="hljs-string">"readWrite"</span>,  <span class="hljs-comment">// 具体权限</span></span><br><span class="line"><span class="hljs-symbol">    db:</span> <span class="hljs-string">"User"</span>  <span class="hljs-comment">//赋予该权限的数据库</span></span><br><span class="line">&#125;,</span><br><span class="line">    <span class="hljs-string">'read'</span>  <span class="hljs-comment">//其他数据库</span></span><br><span class="line">]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></li><li><p>用户权限的说明：</p><table><thead><tr><th>权限</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td>Read</td><td style="text-align:center">允许用户读取指定数据库</td></tr><tr><td>readWrite</td><td style="text-align:center">允许用户读写指定数据库</td></tr><tr><td>dbAdmin</td><td style="text-align:center">允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</td></tr><tr><td>userAdmin</td><td style="text-align:center">允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</td></tr><tr><td>clusterAdmin</td><td style="text-align:center">只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</td></tr><tr><td>readAnyDatabase</td><td style="text-align:center">只在admin数据库中可用，赋予用户所有数据库的读权限</td></tr><tr><td>readWriteAnyDatabase</td><td style="text-align:center">只在admin数据库中可用，赋予用户所有数据库的读写权限</td></tr><tr><td>userAdminAnyDatabase</td><td style="text-align:center">只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</td></tr><tr><td>dbAdminAnyDatabase</td><td style="text-align:center">只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</td></tr><tr><td>root</td><td style="text-align:center">只在admin数据库中可用。超级账号，超级权限</td></tr></tbody></table></li></ul><h3>删除用户数据</h3><ul><li>使用<code>db.system.users.remove({要删除的用户信息条件})</code>一般是以用户名为条件</li></ul><h3>建权</h3><ul><li><p>有时候我们要验证用户的用户名密码是否正确，就需要用到MongoDB提供的健全操作。也算是一种登录操作，不过MongoDB把这叫做建权。</p></li><li><p>建权就是给之前的数据表注册给功能一样，登陆了建权的用户可以和创建用户时的权限做匹配，就是你创建用户的时候允许的权限，建权之后就可以获得权限</p></li><li><p>如何建权呢？<figure class="highlight less hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-selector-tag">db</span><span class="hljs-selector-class">.auth</span>(<span class="hljs-string">"zhong"</span>,<span class="hljs-string">"123456"</span>)</span><br></pre></td></tr></table></figure></p></li><li><p>使用用户名称和密码进行建权，建权成功后返回1<figure class="highlight less hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="hljs-selector-tag">db</span><span class="hljs-selector-class">.auth</span>(<span class="hljs-string">"zhong"</span>,<span class="hljs-string">"123456"</span>)</span><br><span class="line"><span class="hljs-selector-tag">1</span></span><br></pre></td></tr></table></figure></p></li><li><p>错误返回<figure class="highlight subunit hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">Error: </span>Authentication failed.</span><br><span class="line">0</span><br></pre></td></tr></table></figure></p></li></ul><h4>启动建权</h4><ul><li><p>重启数据库服务器，设置必须使用建权登陆<figure class="highlight ada hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod <span class="hljs-comment">--auth</span></span><br></pre></td></tr></table></figure></p></li><li><p>启动后，用户登录只能用用户名和密码进行登录，原来的mongo形式链接已经不起作用了。相应的用户权限也对应妥当。实际项目中我们启动服务器必须使用建权形式</p></li></ul><h4>登录</h4><ul><li><p>如果在配置用户之后，用户想登录，可以使用mongo的形式，不过需要配置用户名密码：<figure class="highlight dns hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongom  -u zhong -p <span class="hljs-number">123456 127.0</span>.<span class="hljs-number">0.1:27017</span>/admin</span><br></pre></td></tr></table></figure></p></li><li><p>登陆成功后，我们可以对指定的<code>User</code>数据库进行读写操作，但是对其他数据库只读，这个时候我们修改其他数据库的数据就会报错<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.info</span><span class="hljs-selector-class">.insert</span>(&#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"zs"</span>&#125;)  <span class="hljs-comment">//这个时test数据库的表</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">WriteResult</span><span class="hljs-params">(&#123; <span class="hljs-string">"nInserted"</span> : <span class="hljs-number">1</span> &#125;)</span></span></span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一般的在一些项目上,我们都是通过用户来登陆数据库和访问数据库的,这样可以更好的管理用户的权限.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;用户的创建删除和管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;
      
    
    </summary>
    
      <category term="MongoDB" scheme="https://zhongyuehui.github.io/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://zhongyuehui.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB索引</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/MongoDB%E7%B4%A2%E5%BC%95/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/MongoDB索引/</id>
    <published>2019-08-04T10:14:41.000Z</published>
    <updated>2019-08-04T10:16:02.256Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用索引可以帮助我们更快速的查找到数据，我们现在插入200W条数据到数据库，进行性能的测试。</p></blockquote><p>&lt;!-- more --&gt;</p><h2>MongoDB索引</h2><h3>插入200w条数据</h3><ul><li><p>我们先插入两百万条数据到数据库中<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-comment">//生成随机数</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomNumber</span>(<span class="hljs-params">min, max</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> range = max - min</span><br><span class="line">    <span class="hljs-keyword">let</span> rand = <span class="hljs-built_in">Math</span>.random()</span><br><span class="line">    <span class="hljs-keyword">let</span> number = (min + <span class="hljs-built_in">Math</span>.round(rand * range))</span><br><span class="line">    <span class="hljs-keyword">return</span> number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// //生成随机用户名</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRandomName</span>(<span class="hljs-params">min, max</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">//将每个字符串切割成数组</span></span><br><span class="line">    <span class="hljs-keyword">let</span> userNameString = <span class="hljs-string">"0123456789azqwsxedcrfvtgbyhnujmikolp"</span>.split(<span class="hljs-string">''</span>)</span><br><span class="line">    <span class="hljs-keyword">let</span> outName = <span class="hljs-string">''</span></span><br><span class="line">    <span class="hljs-comment">//定义名字的长度，随机生成区间的长度,每次循环从userNameString取一个数组出来拼接到outName</span></span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt; getRandomNumber(min, max); i++) &#123;</span><br><span class="line">        <span class="hljs-comment">//生成名字，从userNameString数组种，随机从0到userNameString数组的长度中抽取</span></span><br><span class="line">        outName = outName + userNameString[getRandomNumber(<span class="hljs-number">0</span>, userNameString.length)]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> outName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//随机生成200w条数据插入到数据库中</span></span><br><span class="line"><span class="hljs-keyword">var</span> stratTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> DataArray = []</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2000000</span>; i++) &#123;</span><br><span class="line">    DataArray.push(&#123;</span><br><span class="line">        username: getRandomName(<span class="hljs-number">6</span>, <span class="hljs-number">15</span>),</span><br><span class="line">        regeditemTime: <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(),</span><br><span class="line">        randNumber: getRandomNumber(<span class="hljs-number">100000</span>, <span class="hljs-number">999999</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">var</span> db = connect(<span class="hljs-string">'User'</span>)</span><br><span class="line">db.random.drop() <span class="hljs-comment">//先删除数据库，防止数据出错</span></span><br><span class="line">db.random.insert(DataArray)  <span class="hljs-comment">//插入数据</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> endTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()</span><br><span class="line"><span class="hljs-keyword">var</span> useTime = endTime - stratTime</span><br><span class="line">print(useTime + <span class="hljs-string">"ms"</span>)</span><br></pre></td></tr></table></figure></p></li><li><p>耗时两分多钟，插入完毕后，我们可以使用<code>db.random.stats()</code>查看数据的条数是否正确，其实在中途我有查看大概的插入时间实际上都在是js在做数组插入工作，少数时间插入到数据库中，这跟我们使用批量插入是离不开的</p></li></ul><h3>查询数据并遍历</h3><ul><li><p>设计查询程序<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> startTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> db = connect(<span class="hljs-string">'User'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> res = db.random.find(&#123; <span class="hljs-string">"usermae"</span>: <span class="hljs-string">"7xo6cg"</span> &#125;)  <span class="hljs-comment">//使用db.random.find().skip(50000)查询到的一个名字</span></span><br><span class="line">res.forEach(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">    printjson(res)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> endTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() - startTime</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'查询结束，耗时"'</span> + endTime / <span class="hljs-number">1000</span> + <span class="hljs-string">"s"</span>)  <span class="hljs-comment">//稳定在0.9s</span></span><br></pre></td></tr></table></figure></p></li><li><p>查询结果<figure class="highlight puppet hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; load(<span class="hljs-string">'./demo05.js'</span>)</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017/User</span><br><span class="line">Implicit session: <span class="hljs-keyword">session</span> &#123; <span class="hljs-string">"id"</span> : UUID(<span class="hljs-string">"66dab01f-697b-4529-a2d5-106eecf3dbca"</span>) &#125;</span><br><span class="line"><span class="hljs-keyword">MongoDB</span> <span class="hljs-keyword">server</span> <span class="hljs-keyword">version</span>: 4.0.10</span><br><span class="line">查询结束，耗时<span class="hljs-string">"0.928s</span></span><br><span class="line"><span class="hljs-string">true</span></span><br><span class="line"><span class="hljs-string">&gt;</span></span><br></pre></td></tr></table></figure></p></li></ul><h3>建立索引</h3><ul><li><p>使用<code>db.数据表名.ensureIndex({&quot;username&quot;:1})</code>来建立索引，1表示true，就是建立索引的意思</p></li><li><p>查看索引：<code>db.数据表名.getIndexes()</code>来查看索引，结果是一个数组，里面有一个对象代表有几个索引，一般地我们不会使用<code>_id</code>因为这个是系统随机生成的不好查找</p></li><li><p>建立索引后查找:<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> startTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> db = connect(<span class="hljs-string">'User'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> res = db.random.find(&#123; <span class="hljs-string">"username"</span>: <span class="hljs-string">"ux5suyundefinednn"</span> &#125;)  <span class="hljs-comment">//使用db.random.find().skip(50000)查询到的一个名字</span></span><br><span class="line">res.forEach(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">    printjson(res)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> endTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() - startTime</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'查询结束，耗时"'</span> + endTime / <span class="hljs-number">1000</span> + <span class="hljs-string">"s"</span>)  <span class="hljs-comment">//第一次在0.01s之间，以后有查询缓存稳定在0.005s左右</span></span><br></pre></td></tr></table></figure></p></li><li><p>查询结果:<figure class="highlight ada hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-string">"_id"</span> : <span class="hljs-type">ObjectId</span>(<span class="hljs-string">"5d43aefc04d831b959b4175c"</span>),</span><br><span class="line">    <span class="hljs-string">"username"</span> : "<span class="hljs-type">ux5suyundefinednn</span><span class="hljs-string">",</span></span><br><span class="line"><span class="hljs-string">    "</span>regeditemTime<span class="hljs-string">" : ISODate("</span><span class="hljs-number">2019</span>-<span class="hljs-number">08</span>-<span class="hljs-number">02</span>T03:<span class="hljs-number">31</span>:<span class="hljs-number">00.788</span>Z<span class="hljs-string">"),</span></span><br><span class="line"><span class="hljs-string">    "</span>randNumber<span class="hljs-string">" : 806500</span></span><br><span class="line"><span class="hljs-string">&#125;</span></span><br><span class="line"><span class="hljs-string">查询结束，耗时"</span><span class="hljs-number">0.006</span>s</span><br></pre></td></tr></table></figure></p></li></ul><h4>使用索引的注意事项</h4><ul><li>数据不超万条时，不需要使用索引。性能的提升并不明显，而大大增加了内存和硬盘的消耗。</li><li>查询数据超过表数据量30%时，不要使用索引字段查询。实际证明会比不使用索引更慢，因为它大量检索了索引表和我们原表。</li><li>数字索引，要比字符串索引快的多，在百万级甚至千万级数据量面前，使用数字索引是个明确的选择。</li><li>把你经常查询的数据做成一个内嵌数据（对象型的数据），然后集体进行索引。</li></ul><h3>复合索引</h3><ul><li><p>两条以上的索引称为符合索引</p></li><li><p>复合索引查询<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> startTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> db = connect(<span class="hljs-string">'User'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> res = db.random.find(&#123; <span class="hljs-string">"username"</span>: <span class="hljs-string">"ux5suyundefinednn"</span>, <span class="hljs-string">"randNumber"</span>: <span class="hljs-number">806500</span> &#125;)</span><br><span class="line"></span><br><span class="line">res.forEach(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">    printjson(res)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> endTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() - startTime</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'查询成功,耗时'</span> + endTime / <span class="hljs-number">1000</span> + <span class="hljs-string">"s"</span>) <span class="hljs-comment">//第一次耗时0.02s左右,后面查询都为0.01s左右</span></span><br></pre></td></tr></table></figure></p></li><li><p>默认复合查找的索引顺序其实不是以我们写的索引顺序为准，而是以设置索引的顺序，就是<code>db.数据表.getIndexes()</code>查询到的顺序为准的，但是由于数字所以速度比字符串索引要快，我们有时候需要改变其索引的顺序，就需要使用<code>hint</code>关键字进行优先指定索引查找<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> startTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime()</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> db = connect(<span class="hljs-string">'User'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> res = db.random.find(&#123; <span class="hljs-string">"username"</span>: <span class="hljs-string">"elhm4th"</span>, <span class="hljs-string">"randNumber"</span>: <span class="hljs-number">364231</span> &#125;).hint(&#123; <span class="hljs-string">"randNumber"</span>: <span class="hljs-number">1</span> &#125;)</span><br><span class="line"></span><br><span class="line">res.forEach(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">    printjson(res)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> endTime = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() - startTime</span><br><span class="line"></span><br><span class="line">print(<span class="hljs-string">'查询成功,耗时'</span> + endTime / <span class="hljs-number">1000</span> + <span class="hljs-string">"s"</span>) <span class="hljs-comment">//第一次耗时0.006s左右,后面查询都为0.01s左右</span></span><br></pre></td></tr></table></figure></p></li><li><p>查询结果：<figure class="highlight groovy hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; load(<span class="hljs-string">'./demo06.js'</span>)</span><br><span class="line">connecting <span class="hljs-string">to:</span> <span class="hljs-string">mongodb:</span><span class="hljs-comment">//127.0.0.1:27017/User</span></span><br><span class="line">Implicit <span class="hljs-string">session:</span> session &#123; <span class="hljs-string">"id"</span> : UUID(<span class="hljs-string">"07312a2c-b849-4862-a53d-6dd796b5cfaf"</span>) &#125;</span><br><span class="line">MongoDB server <span class="hljs-string">version:</span> <span class="hljs-number">4.0</span><span class="hljs-number">.10</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d43af0f04d831b959c2964b"</span>),</span><br><span class="line">        <span class="hljs-string">"username"</span> : <span class="hljs-string">"elhm4th"</span>,</span><br><span class="line">        <span class="hljs-string">"regeditemTime"</span> : ISODate(<span class="hljs-string">"2019-08-02T03:31:40.391Z"</span>),</span><br><span class="line">        <span class="hljs-string">"randNumber"</span> : <span class="hljs-number">364231</span></span><br><span class="line">&#125;</span><br><span class="line">查询成功,耗时<span class="hljs-number">0.005</span>s</span><br><span class="line"><span class="hljs-literal">true</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>在这里其实看不出来有太明显的效果，因为200W条数据太少了</p></li></ul><h3>删除索引</h3><ul><li>有时候我们建立索引错了，需要删除，使用<code>db.数据表.dropIndex(&quot;&quot;)</code>这里的内容填的是索引的名字,使用<code>db.数据表.getIndexes()</code>查询你要删除的索引名字<code>name</code>属性的值，不是<code>key</code>属性的值</li></ul><h3>建立全文索引</h3><ul><li>在一些很大的数据中，比如一篇长文，这个时候我们如果想查找文章内容的某一部分，这个时候就需要使用全文索引来帮助我们查找</li><li>使用<code>db.数据表.ensureIndex({需要建立全文索引的属性:&quot;text&quot;})</code>这里需要跟上<code>text</code>表示建立全文索引，而不是<strong>1或true</strong>表示建立索引</li><li><strong>全文索引查找</strong>:<ol><li>$text:表示要在全文索引中查东西。</li><li>$search:后边跟查找的内容。<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db<span class="hljs-selector-class">.info</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-variable">$text</span>:&#123;<span class="hljs-variable">$search</span>:<span class="hljs-string">"programmer"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4>查找多个词:</h4><ul><li><p>全文索引是支持多个次查找的，比如我们希望查找数据中有programmer，family，diary，drink的数据（这是或的关系），所以两条数据都会出现。<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db<span class="hljs-selector-class">.info</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-variable">$text</span>:&#123;<span class="hljs-variable">$search</span>:<span class="hljs-string">"programmer family diary drink"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p></li><li><p>如果我们这时候希望不查找出来有drink这个单词的记录，我们可以使用“-”减号来取消,就相当于查找的记录要前面的，不要带<code>-</code>的<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbd <span class="hljs-selector-class">.info</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-variable">$text</span>:&#123;<span class="hljs-variable">$search</span>:<span class="hljs-string">"programmer family diary -drink"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p></li></ul><h4>转义符</h4><ul><li>全文搜索中是支持转义符的，比如我们想搜索的是两个词（love PlayGame和drink），这时候需要使用\斜杠来转意。<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db<span class="hljs-selector-class">.info</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-variable">$text</span>:&#123;<span class="hljs-variable">$search</span>:<span class="hljs-string">"\"love PlayGame\" drink"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;使用索引可以帮助我们更快速的查找到数据，我们现在插入200W条数据到数据库，进行性能的测试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;MongoDB索引&lt;/h2&gt;
&lt;h3&gt;插入200w条数据
      
    
    </summary>
    
      <category term="MongoDB" scheme="https://zhongyuehui.github.io/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://zhongyuehui.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB数据库与数据表数据的增加、删除和修改</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%A1%A8%E6%95%B0%E6%8D%AE%E7%9A%84%E5%A2%9E%E5%8A%A0%E3%80%81%E5%88%A0%E9%99%A4%E5%92%8C%E4%BF%AE%E6%94%B9/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/MongoDB数据库与数据表数据的增加、删除和修改/</id>
    <published>2019-08-04T10:13:22.000Z</published>
    <updated>2019-08-04T10:14:21.346Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>数据库中最常用的就是增加数据和修改数据。</p></blockquote><p>&lt;!-- more --&gt;</p><h2>数据库与数据表的删除和修改</h2><h3>删除数据表(集合)</h3><ul><li><p>使用:<code>db.表名.drop()</code><figure class="highlight sqf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs  <span class="hljs-comment">//查看数据库</span></span><br><span class="line">Mrzhong  <span class="hljs-number">0.000</span>GB</span><br><span class="line"><span class="hljs-built_in">admin</span>    <span class="hljs-number">0.000</span>GB</span><br><span class="line">config   <span class="hljs-number">0.000</span>GB</span><br><span class="line"><span class="hljs-built_in">local</span>    <span class="hljs-number">0.000</span>GB</span><br><span class="line">test     <span class="hljs-number">0.000</span>GB</span><br><span class="line">&gt; use Mrzhong  <span class="hljs-comment">//使用数据库</span></span><br><span class="line">switched <span class="hljs-keyword">to</span> db Mrzhong</span><br><span class="line">&gt; show collections <span class="hljs-comment">//查看数据表</span></span><br><span class="line"><span class="hljs-built_in">text</span></span><br><span class="line">user</span><br><span class="line">&gt; db.<span class="hljs-built_in">text</span>.<span class="hljs-built_in">drop</span>() <span class="hljs-comment">//删除数据表</span></span><br><span class="line"><span class="hljs-literal">true</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>如果将一个数据库的数据表全部删除了，那么数据库也会自动删除<figure class="highlight subunit hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs  //查看数据库</span><br><span class="line">Mrzhong  0.000GB</span><br><span class="line">admin    0.000GB</span><br><span class="line">config   0.000GB</span><br><span class="line">local    0.000GB</span><br><span class="line"><span class="hljs-keyword">test     </span>0.000GB</span><br><span class="line">&gt; use Mrzhong  //使用数据库</span><br><span class="line">switched to db Mrzhong</span><br><span class="line">&gt; show collections //查看数据表</span><br><span class="line">text</span><br><span class="line">user</span><br><span class="line">&gt; db.text.drop() //删除数据表</span><br><span class="line">true</span><br><span class="line">&gt; show collections</span><br><span class="line">user</span><br><span class="line">&gt; db.user.drop() //删除数据表</span><br><span class="line">true</span><br><span class="line">&gt; show dbs  //查看数据库</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line"><span class="hljs-keyword">test    </span>0.000GB</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></li></ul><h3>删除数据库</h3><ul><li>删除当前所在的数据库，使用<code>db.数据库名称.dropDatabase()</code></li><li>进行删除<figure class="highlight subunit hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs  //查看数据库</span><br><span class="line">MyDb    0.000GB</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line"><span class="hljs-keyword">test    </span>0.000GB</span><br><span class="line">&gt; use MyDb  //使用数据库</span><br><span class="line">switched to db MyDb</span><br><span class="line">&gt; db</span><br><span class="line">MyDb</span><br><span class="line">&gt; db.dropDatabase() //删除数据库</span><br><span class="line">&#123; "dropped" : "MyDb", "ok" : 1 &#125;</span><br><span class="line">&gt; show dbs  //再次查看数据库</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line">local   0.000GB</span><br><span class="line"><span class="hljs-keyword">test    </span>0.000GB</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul><h3>修改数据表的数据</h3><ul><li><p>使用<code>db.数据表.update({修改的条件},{$set:{修改的内容}})</code></p></li><li><p><code>update</code>接收的参数update({更新条件},{更新的数据},不符合条件的时候是否增加条件(true),是否更新全部(true))</p></li><li><p>db.user.update({&quot;sex&quot;:&quot;男&quot;},{$set:{&quot;money&quot;:1000}},false,true) -- 表示查找性别为男的数据，新增一个money属性。属性值为1000，如果没有查到数据不增加条件，将满足条件的全部更新</p></li><li><p>比如：我们将以下数据表的内容的<code>name</code>改成<code>zs666</code><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.update</span>(&#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"zs"</span>&#125;,&#123;<span class="hljs-variable">$set</span>:&#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"zs666"</span>&#125;&#125;)</span><br><span class="line"><span class="hljs-function"><span class="hljs-title">WriteResult</span><span class="hljs-params">(&#123; <span class="hljs-string">"nMatched"</span> : <span class="hljs-number">1</span>, <span class="hljs-string">"nUpserted"</span> : <span class="hljs-number">0</span>, <span class="hljs-string">"nModified"</span> : <span class="hljs-number">1</span> &#125;)</span></span></span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>()</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42a57e96bf23841b62eabd"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs666"</span> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>这样就修改成功了</p></li></ul><h3>替换数据表中的数据</h3><ul><li>使用<code>db.数据表.update({替换的条件},{替换的内同})</code></li><li>如将下面的数据表的内容替换成<code>{&quot;name&quot;:'ls',&quot;age&quot;::20}</code><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.update</span>(&#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"zs666"</span>&#125;,&#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"ls"</span>,age:<span class="hljs-number">20</span>&#125;)</span><br><span class="line"><span class="hljs-function"><span class="hljs-title">WriteResult</span><span class="hljs-params">(&#123; <span class="hljs-string">"nMatched"</span> : <span class="hljs-number">1</span>, <span class="hljs-string">"nUpserted"</span> : <span class="hljs-number">0</span>, <span class="hljs-string">"nModified"</span> : <span class="hljs-number">1</span> &#125;)</span></span></span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>()</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42a57e96bf23841b62eabd"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span> &#125;</span><br></pre></td></tr></table></figure></li></ul><h3>删除数据表中的数据</h3><ul><li><p>使用<code>db.数据表.remove({删除条件})</code></p></li><li><p>比如我们删除<code>name=&quot;ls&quot;</code>的数据<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>()  <span class="hljs-comment">//删除前</span></span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42a57e96bf23841b62eabd"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span> &#125;</span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.remove</span>(&#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"ls"</span>&#125;)  <span class="hljs-comment">//删除</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">WriteResult</span><span class="hljs-params">(&#123; <span class="hljs-string">"nRemoved"</span> : <span class="hljs-number">1</span> &#125;)</span></span> </span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>()<span class="hljs-comment">//删除后，因为每页数据了，所以没有显示</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>如果数据表中有多条数据符合删除条件，那么都会被删除，如果我们只想要删除一个可以这样删除<code>db.数据表.update({删除条件},{justOne:true})</code><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>()</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42abf696bf23841b62eabe"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">12</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42abfa96bf23841b62eabf"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span> &#125;</span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.remove</span>(&#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"ls"</span>&#125;,&#123;justOne:true&#125;)</span><br><span class="line"><span class="hljs-function"><span class="hljs-title">WriteResult</span><span class="hljs-params">(&#123; <span class="hljs-string">"nRemoved"</span> : <span class="hljs-number">1</span> &#125;)</span></span></span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>()</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42abfa96bf23841b62eabf"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span> &#125;</span><br></pre></td></tr></table></figure></p></li></ul><h3>数组属性修改</h3><ul><li><p>如果数据表中有数据是一个数组形式的，比如一个人的爱好，如果我们需要删除爱好中的最后几个或者前面几个，我们可以使用<code>$pop</code>来删除，它接收1或-1，整数表示从末端删除，负数表示从开头删除<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>()  <span class="hljs-comment">//删除前</span></span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42cdf7677cf75a716796c5"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span>, <span class="hljs-string">"like"</span> : [ <span class="hljs-string">"游泳"</span>, <span class="hljs-string">"游戏"</span>, <span class="hljs-string">"写代码"</span>, <span class="hljs-string">"打篮球"</span>, <span class="hljs-string">"踢足球"</span>, <span class="hljs-string">"唱歌"</span> ] &#125;</span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.update</span>(&#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"zs"</span>&#125;,&#123;<span class="hljs-variable">$pop</span>:&#123;<span class="hljs-string">"like"</span>:<span class="hljs-number">1</span>&#125;&#125;)</span><br><span class="line"><span class="hljs-function"><span class="hljs-title">WriteResult</span><span class="hljs-params">(&#123; <span class="hljs-string">"nMatched"</span> : <span class="hljs-number">1</span>, <span class="hljs-string">"nUpserted"</span> : <span class="hljs-number">0</span>, <span class="hljs-string">"nModified"</span> : <span class="hljs-number">1</span> &#125;)</span></span></span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>() <span class="hljs-comment">//删除后</span></span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42cdf7677cf75a716796c5"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span>, <span class="hljs-string">"like"</span> : [ <span class="hljs-string">"游泳"</span>, <span class="hljs-string">"游戏"</span>, <span class="hljs-string">"写代码"</span>, <span class="hljs-string">"打篮球"</span>, <span class="hljs-string">"踢足球"</span> ] &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>有时候我们需要修改数组中的某一项替换成别的数据，比如爱好写错了，我们需要修改，这个时候我们就需要使用数组定位修改，比如将爱好中的游戏修改成电脑游戏<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>() <span class="hljs-comment">//修改前</span></span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42cdf7677cf75a716796c5"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span>, <span class="hljs-string">"like"</span> : [ <span class="hljs-string">"游泳"</span>, <span class="hljs-string">"游戏"</span>, <span class="hljs-string">"写代码"</span>, <span class="hljs-string">"打篮球"</span>, <span class="hljs-string">"踢足球"</span> ] &#125;</span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.update</span>(&#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"zs"</span>&#125;,&#123;<span class="hljs-variable">$set</span>:&#123;<span class="hljs-string">"like.1"</span>:<span class="hljs-string">"电脑游戏"</span>&#125;&#125;) <span class="hljs-comment">//修改like.1表示修改like数组中的第一项，数组是0开始的</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-title">WriteResult</span><span class="hljs-params">(&#123; <span class="hljs-string">"nMatched"</span> : <span class="hljs-number">1</span>, <span class="hljs-string">"nUpserted"</span> : <span class="hljs-number">0</span>, <span class="hljs-string">"nModified"</span> : <span class="hljs-number">1</span> &#125;)</span></span></span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>() <span class="hljs-comment">//修改后</span></span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42cdf7677cf75a716796c5"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span>, <span class="hljs-string">"like"</span> : [ <span class="hljs-string">"游泳"</span>, <span class="hljs-string">"电脑游戏"</span>, <span class="hljs-string">"写代码"</span>, <span class="hljs-string">"打 篮球"</span>, <span class="hljs-string">"踢足球"</span> ] &#125;</span><br></pre></td></tr></table></figure></p></li></ul><h3>数组查询</h3><ul><li><p>有时候我们需要查询数组中含有某些特定值的数据，如果我们想知道有那些人的爱好是画画的,并且只显示它的爱好有哪些<figure class="highlight smalltalk hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.user.find(&#123;<span class="hljs-comment">"like"</span>:<span class="hljs-comment">"游泳"</span>&#125;,&#123;<span class="hljs-comment">"like"</span>:<span class="hljs-keyword">true</span>&#125;)</span><br><span class="line">&#123; <span class="hljs-comment">"_id"</span> : <span class="hljs-type">ObjectId</span>(<span class="hljs-comment">"5d42cdf7677cf75a716796c5"</span>), <span class="hljs-comment">"like"</span> : [ <span class="hljs-comment">"游泳"</span>, <span class="hljs-comment">"电脑游戏"</span>, <span class="hljs-comment">"写代码"</span>, <span class="hljs-comment">"打篮球"</span>, <span class="hljs-comment">"踢足球"</span> ] &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>但是有时候我们需要即会游泳、又会写代码的，那么这个时候上面的查询不能满足我们的需求，所以需要使用<code>$all</code>来查询<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">"like"</span>:&#123;<span class="hljs-variable">$all</span>:[<span class="hljs-string">"游泳"</span>,<span class="hljs-string">"写代码"</span>]&#125;&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42cdf7677cf75a716796c5"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span>, <span class="hljs-string">"like"</span> : [ <span class="hljs-string">"游泳"</span>, <span class="hljs-string">"电脑游戏"</span>, <span class="hljs-string">"写代码"</span>, <span class="hljs-string">"打 篮球"</span>, <span class="hljs-string">"踢足球"</span> ], <span class="hljs-string">"money"</span> : <span class="hljs-number">1000</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>有时候我们需要满足其中一项就可以的，需要使用<code>$in</code>来查询<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">"like"</span>:&#123;<span class="hljs-variable">$in</span>:[<span class="hljs-string">"游泳"</span>,<span class="hljs-string">"写代码"</span>]&#125;&#125;))</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42cdf7677cf75a716796c5"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span>, <span class="hljs-string">"like"</span> : [ <span class="hljs-string">"游泳"</span>, <span class="hljs-string">"电脑游戏"</span>, <span class="hljs-string">"写代码"</span>, <span class="hljs-string">"打 篮球"</span>, <span class="hljs-string">"踢足球"</span> ], <span class="hljs-string">"money"</span> : <span class="hljs-number">1000</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>有时候我们需要只有一个爱好的,使用<code>$size</code>来查询<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">"like"</span>:&#123;<span class="hljs-variable">$size</span>:<span class="hljs-number">1</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42ddad677cf75a716796c6"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span>, <span class="hljs-string">"money"</span> : <span class="hljs-number">1000</span>, <span class="hljs-string">"like"</span> : [ <span class="hljs-string">"跑步"</span> ] &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>有时候我们需要只需要爱好中的第一项，使用<code>$slice</code>来进行处理,如果需要查询最后一项，使用负数就可以了<figure class="highlight smalltalk hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.user.find(&#123;<span class="hljs-comment">"age"</span>:<span class="hljs-number">20</span>&#125;,&#123;<span class="hljs-comment">"like"</span>:&#123;<span class="hljs-string">$s</span>lice:<span class="hljs-number">1</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="hljs-comment">"_id"</span> : <span class="hljs-type">ObjectId</span>(<span class="hljs-comment">"5d42cdf7677cf75a716796c5"</span>), <span class="hljs-comment">"name"</span> : <span class="hljs-comment">"zs"</span>, <span class="hljs-comment">"age"</span> : <span class="hljs-number">20</span>, <span class="hljs-comment">"like"</span> : [ <span class="hljs-comment">"游泳"</span> ], <span class="hljs-comment">"money"</span> : <span class="hljs-number">1000</span> &#125;</span><br><span class="line">&#123; <span class="hljs-comment">"_id"</span> : <span class="hljs-type">ObjectId</span>(<span class="hljs-comment">"5d42ddad677cf75a716796c6"</span>), <span class="hljs-comment">"name"</span> : <span class="hljs-comment">"ls"</span>, <span class="hljs-comment">"age"</span> : <span class="hljs-number">20</span>, <span class="hljs-comment">"money"</span> : <span class="hljs-number">1000</span>, <span class="hljs-comment">"like"</span> : [ <span class="hljs-comment">"跑步"</span> ] &#125;</span><br></pre></td></tr></table></figure></p></li></ul><h3>增加数据表中的数据</h3><ul><li>有时候我们需要对表中的数据进行增加操作，使用<code>db.数据表.update({增加条件},{$push:{要增加的数据}})</code><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>()</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : <span class="hljs-number">1</span>, <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span> &#125;</span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.update</span>(&#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"zs"</span>&#125;,&#123;<span class="hljs-variable">$push</span>:&#123;<span class="hljs-string">"age"</span>:<span class="hljs-number">20</span>,<span class="hljs-string">"sex"</span>:<span class="hljs-string">"男"</span>&#125;&#125;)</span><br><span class="line"><span class="hljs-function"><span class="hljs-title">WriteResult</span><span class="hljs-params">(&#123; <span class="hljs-string">"nMatched"</span> : <span class="hljs-number">1</span>, <span class="hljs-string">"nUpserted"</span> : <span class="hljs-number">0</span>, <span class="hljs-string">"nModified"</span> : <span class="hljs-number">1</span> &#125;)</span></span></span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>()                                            )</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : <span class="hljs-number">1</span>, <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : [ <span class="hljs-number">20</span> ], <span class="hljs-string">"sex"</span> : [ <span class="hljs-string">"男"</span> ] &#125;</span><br></pre></td></tr></table></figure></li></ul><h3>判断后增加数据或不增加数据</h3><ul><li><p>有时候我们需要对表中的数据进行判断数据，比如爱好，查看爱好中是否有某个选项，有则不添加，没有则添加，那么使用<code>$ne</code>可以来处理这个查询<figure class="highlight stata hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &gt; <span class="hljs-keyword">db</span>.user.find()           <span class="hljs-comment">//查看数据  </span></span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42cdf7677cf75a716796c5"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : 20, <span class="hljs-string">"like"</span> : [ <span class="hljs-string">"游泳"</span>] &#125;</span><br><span class="line">&gt; <span class="hljs-keyword">db</span>.user.<span class="hljs-keyword">update</span>(&#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"zs"</span>,like:&#123;<span class="hljs-variable">$ne</span>:<span class="hljs-string">"游戏"</span>&#125;&#125;,&#123;<span class="hljs-variable">$push</span>:&#123;like:<span class="hljs-string">"游戏"</span>&#125;&#125;) <span class="hljs-comment">//查看爱好中是否有游泳，没有则使用$push添加</span></span><br><span class="line">WriteResult(&#123; <span class="hljs-string">"nMatched"</span> : 1, <span class="hljs-string">"nUpserted"</span> : 0, <span class="hljs-string">"nModified"</span> : 1 &#125;)</span><br><span class="line">&gt; <span class="hljs-keyword">db</span>.user.find()                                                   "&#125;&#125;))</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42cdf7677cf75a716796c5"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : 20, <span class="hljs-string">"like"</span> : [ <span class="hljs-string">"游泳"</span>, <span class="hljs-string">"游戏"</span> ] &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>但是上面的方式用来增加数据过于麻烦，我们可以使用<code>$addToSet</code>来做这个功能，上述的<code>$ne</code>修饰符做其他功能较为合适<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>()</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42cdf7677cf75a716796c5"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span>, <span class="hljs-string">"like"</span> : [ <span class="hljs-string">"游泳"</span>, <span class="hljs-string">"游戏"</span> ] &#125;</span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.update</span>(&#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"zs"</span>&#125;,&#123;<span class="hljs-variable">$addToSet</span>:&#123;<span class="hljs-string">"like"</span>:<span class="hljs-string">"写代码"</span>&#125;&#125;)</span><br><span class="line"><span class="hljs-function"><span class="hljs-title">WriteResult</span><span class="hljs-params">(&#123; <span class="hljs-string">"nMatched"</span> : <span class="hljs-number">1</span>, <span class="hljs-string">"nUpserted"</span> : <span class="hljs-number">0</span>, <span class="hljs-string">"nModified"</span> : <span class="hljs-number">1</span> &#125;)</span></span></span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>()                                          &#125;&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42cdf7677cf75a716796c5"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span>, <span class="hljs-string">"like"</span> : [ <span class="hljs-string">"游泳"</span>, <span class="hljs-string">"游戏"</span>, <span class="hljs-string">"写代码"</span> ] &#125;</span><br></pre></td></tr></table></figure></p></li></ul><h3>自定义数据id</h3><ul><li><p>在mongodb中，数据库默认会给给我们添加一个id，而且是不重复的，但是很多时候我们需要使用id进行数据增删改查，所以我们可以自己定义id<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.insert</span>(&#123;<span class="hljs-string">"_id"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"name"</span>:<span class="hljs-string">"wangmazi"</span>,<span class="hljs-string">"age"</span>:<span class="hljs-number">20</span>&#125;)</span><br><span class="line"><span class="hljs-function"><span class="hljs-title">WriteResult</span><span class="hljs-params">(&#123; <span class="hljs-string">"nInserted"</span> : <span class="hljs-number">1</span> &#125;)</span></span></span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>()</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42abfa96bf23841b62eabf"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : <span class="hljs-number">1</span>, <span class="hljs-string">"name"</span> : <span class="hljs-string">"wangmazi"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p></li><li><p>插入id其实和插入其他数据一样，一直插入即可，如果id有重复的话，那么它会报错的</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;数据库中最常用的就是增加数据和修改数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;数据库与数据表的删除和修改&lt;/h2&gt;
&lt;h3&gt;删除数据表(集合)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用:
      
    
    </summary>
    
      <category term="MongoDB" scheme="https://zhongyuehui.github.io/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://zhongyuehui.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB查询数据表</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/MongoDB%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE%E8%A1%A8/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/MongoDB查询数据表/</id>
    <published>2019-08-04T10:11:05.000Z</published>
    <updated>2019-08-04T10:12:44.919Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在所有数据库中，查询数据表都是一些操作数据库的最基本操作。</p></blockquote><p>&lt;!-- more --&gt;</p><h3>查询数据表</h3><h4>条件查询</h4><ul><li><p>查询名字为:<code>zs</code><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;name:<span class="hljs-string">'zs'</span>&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d4246624239b28d6b556da7"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">12</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>查询年龄<code>大于20</code><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">"age"</span>:&#123;<span class="hljs-variable">$gt</span>:<span class="hljs-number">20</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424ba1e28fa15fcd55b0d3"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">25</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>查询年龄<code>小于20</code><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">"age"</span>:&#123;<span class="hljs-variable">$lt</span>:<span class="hljs-number">20</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d4246624239b28d6b556da7"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">12</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>查询年龄<code>大于等于12</code><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">"age"</span>:&#123;<span class="hljs-variable">$gte</span>:<span class="hljs-number">12</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d4246624239b28d6b556da7"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">12</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424ba1e28fa15fcd55b0d3"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">25</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>查询年龄<code>小于等于12</code><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">"age"</span>:&#123;<span class="hljs-variable">$lte</span>:<span class="hljs-number">12</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d4246624239b28d6b556da7"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">12</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>如果有名字相同的时候，我们需要多个条件查询<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>()</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d4246624239b28d6b556da7"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">12</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424ba1e28fa15fcd55b0d3"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">25</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424e06e28fa15fcd55b0d4"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span> &#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"zs"</span>,<span class="hljs-string">"age"</span>:<span class="hljs-number">12</span>&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d4246624239b28d6b556da7"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">12</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>查询年龄<code>大于10岁小于30</code><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">"age"</span>:&#123;<span class="hljs-variable">$gt</span>:<span class="hljs-number">20</span>,<span class="hljs-variable">$lt</span>:<span class="hljs-number">30</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424ba1e28fa15fcd55b0d3"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">25</span> &#125;</span><br></pre></td></tr></table></figure></p></li></ul><h4>模糊查询</h4><ul><li><p>如下一个数据表，有以下数据<figure class="highlight ada hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.text.find()</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : <span class="hljs-type">ObjectId</span>(<span class="hljs-string">"5d42504fe28fa15fcd55b0d5"</span>), <span class="hljs-string">"title"</span> : "精品男装、时尚" &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : <span class="hljs-type">ObjectId</span>(<span class="hljs-string">"5d425077e28fa15fcd55b0d6"</span>), <span class="hljs-string">"title"</span> : "精品女装包包、潮流" &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : <span class="hljs-type">ObjectId</span>(<span class="hljs-string">"5d425085e28fa15fcd55b0d7"</span>), <span class="hljs-string">"title"</span> : "精品女装皮靴、<span class="hljs-type">g</span>复古<span class="hljs-string">" &#125;</span></span><br><span class="line"><span class="hljs-string">&#123; "</span>_id<span class="hljs-string">" : ObjectId("</span><span class="hljs-number">5</span>d4250a7e28fa15fcd55b0d8<span class="hljs-string">"), "</span>title<span class="hljs-string">" : "</span>精品男装牛仔裤、韩国风<span class="hljs-string">" &#125;</span></span><br></pre></td></tr></table></figure></p></li><li><p>查询含有<code>男装</code>的数据<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.text</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">"title"</span>:/男装/&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d42504fe28fa15fcd55b0d5"</span>), <span class="hljs-string">"title"</span> : <span class="hljs-string">"精品男装、时尚"</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d4250a7e28fa15fcd55b0d8"</span>), <span class="hljs-string">"title"</span> : <span class="hljs-string">"精品男装牛仔裤、韩国风"</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>查询含有<code>女装</code>的数据<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.text</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">"title"</span>:/女装/&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d425077e28fa15fcd55b0d6"</span>), <span class="hljs-string">"title"</span> : <span class="hljs-string">"精品女装包包、潮流"</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d425085e28fa15fcd55b0d7"</span>), <span class="hljs-string">"title"</span> : <span class="hljs-string">"精品女装皮靴、g复古"</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>查询名字以<code>z</code>开头的<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//数据表</span></span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>()</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d4246624239b28d6b556da7"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">12</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424ba1e28fa15fcd55b0d3"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">25</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424e06e28fa15fcd55b0d4"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d425231e28fa15fcd55b0d9"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zhong"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">22</span> &#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//查询后</span></span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">"name"</span>:/^z/&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d4246624239b28d6b556da7"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">12</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424e06e28fa15fcd55b0d4"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d425231e28fa15fcd55b0d9"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zhong"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">22</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>查询名字以<code>g</code>结尾的<figure class="highlight elixir hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.user.find(&#123;<span class="hljs-string">"name"</span><span class="hljs-symbol">:/g</span><span class="hljs-variable">$/</span>&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d425231e28fa15fcd55b0d9"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zhong"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">22</span> &#125;</span><br></pre></td></tr></table></figure></p></li></ul><h4>查询指定列</h4><ul><li>查询name，第一个字段是条件，第二个是指定列<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;&#125;,&#123;name:<span class="hljs-number">1</span>&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d4246624239b28d6b556da7"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424ba1e28fa15fcd55b0d3"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424e06e28fa15fcd55b0d4"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d425231e28fa15fcd55b0d9"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zhong"</span> &#125;</span><br></pre></td></tr></table></figure></li></ul><h4>升序降序</h4><ul><li><p>按照年龄升序排序<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;&#125;).sort(&#123;<span class="hljs-string">"age"</span>:<span class="hljs-number">1</span>&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d4246624239b28d6b556da7"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">12</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424e06e28fa15fcd55b0d4"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d425231e28fa15fcd55b0d9"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zhong"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">22</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424ba1e28fa15fcd55b0d3"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">25</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>按照年龄降序排序<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;&#125;).sort(&#123;<span class="hljs-string">"age"</span>:-<span class="hljs-number">1</span>&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424ba1e28fa15fcd55b0d3"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">25</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d425231e28fa15fcd55b0d9"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zhong"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">22</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424e06e28fa15fcd55b0d4"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d4246624239b28d6b556da7"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">12</span> &#125;</span><br></pre></td></tr></table></figure></p></li></ul><h4>查询指定条数数据</h4><ul><li><p>查询前2条数据并降序(当然也可以先排序再数据)<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;&#125;).limit(<span class="hljs-number">2</span>).sort(&#123;<span class="hljs-string">"age"</span>:-<span class="hljs-number">1</span>&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424ba1e28fa15fcd55b0d3"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">25</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d425231e28fa15fcd55b0d9"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zhong"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">22</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>查询第3条以后的数据并升序<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;&#125;).skip(<span class="hljs-number">2</span>).sort(&#123;<span class="hljs-string">"age"</span>:<span class="hljs-number">1</span>&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d425231e28fa15fcd55b0d9"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zhong"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">22</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424ba1e28fa15fcd55b0d3"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">25</span> &#125;</span><br></pre></td></tr></table></figure></p></li></ul><h4>分页查询</h4><ul><li><p>查询第几页，每页多少条数据，可以用来做分页查询  skip表示的是从第几条数据开始，从0开始计算，limit表示截取几条数据,假设我们以下数据<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d4246624239b28d6b556da7"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">12</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424ba1e28fa15fcd55b0d3"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">25</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424e06e28fa15fcd55b0d4"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d425231e28fa15fcd55b0d9"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zhong"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">22</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>如果我们将这个数据分成两页，那么第一页就是<code>skip(0).limit(2)</code>,第二页就是<code>skip(2).limit(2)</code><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//第一页</span></span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;&#125;).skip(<span class="hljs-number">0</span>).limit(<span class="hljs-number">2</span>)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d4246624239b28d6b556da7"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">12</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424ba1e28fa15fcd55b0d3"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">25</span> &#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//第二页</span></span><br><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;&#125;).skip(<span class="hljs-number">2</span>).limit(<span class="hljs-number">2</span>)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424e06e28fa15fcd55b0d4"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d425231e28fa15fcd55b0d9"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zhong"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">22</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>如果有100条数据，每页10条那么我们可以这样进行切割 skip((页数-1)*10).limit(10)</p></li></ul><h3>or与查询</h3><ul><li><p>当我们查询条件是具体的时候，但是又是多个的时候，以上查询方式并不适合我们，比如：查询<code>age:20</code>或者<code>age:24</code>这种情况，我们就需要使用  <strong>$or</strong>来查询</p></li><li><p>查询年龄<code>age=20</code>或者<code>age=22</code><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-variable">$or</span>:[&#123;<span class="hljs-string">"age"</span>:<span class="hljs-number">20</span>&#125;,&#123;<span class="hljs-string">"age"</span>:<span class="hljs-number">22</span>&#125;]&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424e06e28fa15fcd55b0d4"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d425231e28fa15fcd55b0d9"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zhong"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">22</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>查询名字为<code>zs</code>或者<code>age=20</code><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-variable">$or</span>:[&#123;<span class="hljs-string">"name"</span>:<span class="hljs-string">"zs"</span>&#125;,&#123;<span class="hljs-string">"age"</span>:<span class="hljs-number">20</span>&#125;]&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d4246624239b28d6b556da7"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">12</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424e06e28fa15fcd55b0d4"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">20</span> &#125;</span><br></pre></td></tr></table></figure></p></li><li><p>使用 $or查询，如果有多个筛选项那么只需要满足一项即可，如果不适用$or表示并且，就需要都满足</p></li></ul><h3>查询一条数据</h3><ul><li>使用findOne()查询时返回第一个数据<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.findOne</span>()</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d4246624239b28d6b556da7"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zs"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">12</span> &#125;</span><br></pre></td></tr></table></figure></li></ul><h3>查询结果符合的条数</h3><ul><li><p>有时候我们用于统计，比如查询年龄大于20岁的有多少人，但是不需要具体的姓名性别等信息<figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">"age"</span>:&#123;<span class="hljs-variable">$gt</span>:<span class="hljs-number">20</span>&#125;&#125;)</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d424ba1e28fa15fcd55b0d3"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"ls"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">25</span> &#125;</span><br><span class="line">&#123; <span class="hljs-string">"_id"</span> : ObjectId(<span class="hljs-string">"5d425231e28fa15fcd55b0d9"</span>), <span class="hljs-string">"name"</span> : <span class="hljs-string">"zhong"</span>, <span class="hljs-string">"age"</span> : <span class="hljs-number">22</span> &#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight stylus hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; db<span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">"age"</span>:&#123;<span class="hljs-variable">$gt</span>:<span class="hljs-number">20</span>&#125;&#125;).count()</span><br><span class="line"><span class="hljs-number">2</span></span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在所有数据库中，查询数据表都是一些操作数据库的最基本操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h3&gt;查询数据表&lt;/h3&gt;
&lt;h4&gt;条件查询&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;查询名字为:&lt;
      
    
    </summary>
    
      <category term="MongoDB" scheme="https://zhongyuehui.github.io/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://zhongyuehui.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>启动MongoDB</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/%E5%90%AF%E5%8A%A8MongoDB/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/启动MongoDB/</id>
    <published>2019-08-04T10:08:12.000Z</published>
    <updated>2019-08-04T10:11:42.768Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>mongodb是在非关系型数据库中最接近关系型数据库的，关系型数据库能实现的功能MongoDb基本上都可以实现。</p></blockquote><p>&lt;!-- more --&gt;</p><h2>启动MongoDB</h2><ul><li>安装完成后使用<code>mongod</code>启动数据库</li><li>连接:<code>mongo</code>连接数据库</li><li>连接远程数据库:<code>mongo ip:端口</code></li><li>查询数据库 ：<code>show dbs</code></li><li>定位当前数据库:<code>db</code></li><li>使用数据库(创建数据库):<code>use 数据库名</code></li><li>查询数据表:<code>show collections</code></li><li>向表中插入数据(创建表):<code>db.表名.insert({&quot;name&quot;:&quot;zs&quot;,&quot;age&quot;:12})</code></li><li>查询数据表的内容:<code>db.数据表.find()</code></li></ul><h3>注意：</h3><ul><li>mongodb数据库没有创建表和数据库的指令，你直接当做有就行，没有自己会创建，有就直接使用</li><li>数据表使用json格式的字符串</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;mongodb是在非关系型数据库中最接近关系型数据库的，关系型数据库能实现的功能MongoDb基本上都可以实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;启动MongoDB&lt;/h2&gt;
&lt;ul
      
    
    </summary>
    
      <category term="MongoDB" scheme="https://zhongyuehui.github.io/categories/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="https://zhongyuehui.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>React-redux的Provider和connect</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/React-redux%E7%9A%84Provider%E5%92%8Cconnect/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/React-redux的Provider和connect/</id>
    <published>2019-08-04T10:05:24.000Z</published>
    <updated>2019-08-04T10:07:08.396Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Provider和connect可以帮助我们更方便的获取数据。</p></blockquote><p>&lt;!-- more --&gt;</p><h2>React-redux的Provider和connect</h2><h3>提供器Provider的使用</h3><ul><li>使用Provider可以让在&lt;Provider&gt;&lt;/Provider&gt;标签内的所有组件和元素都可以访问store</li><li>很简单，我们在项目的index.js中使用Provider<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">'react'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">'react-dom'</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> TodoList <span class="hljs-keyword">from</span> <span class="hljs-string">'./components/TodoList.jsx'</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Provider &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'react-redux'</span></span><br><span class="line"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">'./store/index'</span></span><br><span class="line"><span class="hljs-keyword">const</span> App = (</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">        <span class="hljs-comment">// Provider包裹的元素都可以使用store</span></span><br><span class="line">        &lt;TodoList&gt;<span class="hljs-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">TodoList</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="hljs-regexp">/Provider&gt;</span></span><br><span class="line"><span class="hljs-regexp">)</span></span><br><span class="line"><span class="hljs-regexp">ReactDOM.render(App, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure></li></ul><h3>连接器connect的使用</h3><ul><li>使用connect映射store中的对应数据,这时候不需要在使用state来获取store的数据，它会变成props属性，我们直接根据映射关系就可以拿到值<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//TodoList.jsx</span></span><br><span class="line"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Button, Input &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"antd"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react-redux"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Input style=&#123;&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">400</span> &#125;&#125; placeholder=&#123;<span class="hljs-keyword">this</span>.props.inputValue&#125; /&gt;</span><br><span class="line">        &lt;Button type=<span class="hljs-string">"primary"</span>&gt;按钮&lt;<span class="hljs-regexp">/Button&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">          &lt;li&gt;今天天气真不错！&lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;万里无云&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;/u</span>l&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    );</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp">const StateToProps = state =&gt; &#123;</span></span><br><span class="line"><span class="hljs-regexp">  return &#123;</span></span><br><span class="line"><span class="hljs-regexp">    inputValue: state.inputValue /</span><span class="hljs-regexp">/这里其实就是一个映射关系</span></span><br><span class="line"><span class="hljs-regexp">  &#125;;</span></span><br><span class="line"><span class="hljs-regexp">&#125;;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">export default connect(</span></span><br><span class="line"><span class="hljs-regexp">  StateToProps,</span></span><br><span class="line"><span class="hljs-regexp">  null</span></span><br><span class="line"><span class="hljs-regexp">)(TodoList);</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Provider和connect可以帮助我们更方便的获取数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;React-redux的Provider和connect&lt;/h2&gt;
&lt;h3&gt;提供器Pr
      
    
    </summary>
    
      <category term="React" scheme="https://zhongyuehui.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://zhongyuehui.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React-redux的使用</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/React-redux%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/React-redux的使用/</id>
    <published>2019-08-04T10:02:27.000Z</published>
    <updated>2019-08-04T10:05:06.848Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>React-Redux这是一个React生态中常用组件，它可以简化Redux流程</p></blockquote><p>&lt;!-- more --&gt;</p><h2>React-redux的使用</h2><ul><li><p>安装：<code>yarn add react-redux</code></p></li><li><p>初始化store，src/store/index.js<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123;createStore&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span></span><br><span class="line"><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'./reducer'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> store = createStore(reducer)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store</span><br></pre></td></tr></table></figure></p></li><li><p>src/store/reducer.js<figure class="highlight pf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const defalueState = &#123;</span><br><span class="line">inputValue: 'Mr zhong',</span><br><span class="line">list: []</span><br><span class="line">&#125;</span><br><span class="line">export <span class="hljs-keyword">default</span> (<span class="hljs-keyword">state</span> = defalueState, action) =&gt; &#123;</span><br><span class="line">    return <span class="hljs-keyword">state</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>初始化完毕后在需要使用的组件中引用store<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//TodoList.jsx</span></span><br><span class="line"><span class="hljs-keyword">import</span> React, &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Button, Input &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"antd"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">"../store/index"</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props);</span><br><span class="line">    <span class="hljs-keyword">this</span>.state = store.getState();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Input style=&#123;&#123; <span class="hljs-attr">width</span>: <span class="hljs-number">400</span> &#125;&#125; placeholder=&#123;<span class="hljs-keyword">this</span>.state.inputValue&#125; /&gt;</span><br><span class="line">        &lt;Button type=<span class="hljs-string">"primary"</span>&gt;按钮&lt;<span class="hljs-regexp">/Button&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;ul&gt;</span></span><br><span class="line"><span class="hljs-regexp">          &lt;li&gt;今天天气真不错！&lt;/</span>li&gt;</span><br><span class="line">          &lt;li&gt;万里无云&lt;<span class="hljs-regexp">/li&gt;</span></span><br><span class="line"><span class="hljs-regexp">        &lt;/u</span>l&gt;</span><br><span class="line">      &lt;<span class="hljs-regexp">/div&gt;</span></span><br><span class="line"><span class="hljs-regexp">    );</span></span><br><span class="line"><span class="hljs-regexp">  &#125;</span></span><br><span class="line"><span class="hljs-regexp">&#125;</span></span><br><span class="line"><span class="hljs-regexp"></span></span><br><span class="line"><span class="hljs-regexp">export default TodoList;</span></span><br></pre></td></tr></table></figure></p></li><li><p>初始化完毕！</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;React-Redux这是一个React生态中常用组件，它可以简化Redux流程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;React-redux的使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安
      
    
    </summary>
    
      <category term="React" scheme="https://zhongyuehui.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://zhongyuehui.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Redux-thunk的使用</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/Redux-thunk%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/Redux-thunk的使用/</id>
    <published>2019-08-04T09:53:06.000Z</published>
    <updated>2019-08-04T09:54:07.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>配置好Redux-thun接下来我就看看如何使用Redux-thun。</p></blockquote><p>&lt;!-- more --&gt;</p><h2>Redux-thunk的使用</h2><ul><li>Redux-thunk就是redux的中间件插件</li><li>安装:<code>cnpm i -S redux-thunk</code></li></ul><h3>使用Redux-thunk处理异步任务</h3><ul><li><p>我们在请求数据的时候，在componentWillMount()生命周期函数中来请求数据，如果请求的数据过多，那么这个生命周期函数显得非常臃肿，所以我们需要把这个异步请求放到单独的一个文件中，其实异步请求我们需要它返回的就是一个action，然后，在componentWillMount生命周期函数中调用就可以得到数据放到store中</p></li><li><p>因为我们把所有的action逻辑都放在了actionCreatros.js，所以我们在这里编辑异步请求<figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123; ADD_ITEM, CHANGE_INPUT, DELETE_ITEM, GET_LIST &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./actionTypes'</span></span><br><span class="line"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">"axios"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> changeInput = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="hljs-keyword">type</span>: CHANGE_INPUT,</span><br><span class="line">    value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> addItem = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="hljs-keyword">type</span>: ADD_ITEM,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> deleteItem = <span class="hljs-function">(<span class="hljs-params">index</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="hljs-keyword">type</span>: DELETE_ITEM,</span><br><span class="line">    index</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getListAction = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="hljs-keyword">type</span>: GET_LIST,</span><br><span class="line">    data</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> getListData = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">        axios</span><br><span class="line">            .get(</span><br><span class="line">                <span class="hljs-string">"https://www.easy-mock.com/mock/5d3fb5919101bd556dbe67cc/getlists/lists"</span></span><br><span class="line">            )</span><br><span class="line">            .then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="hljs-keyword">const</span> data = getListAction(res.data.data.list)  <span class="hljs-comment">//调用上面的函数，这样就返回了一个我们想要的对象格式</span></span><br><span class="line">                dispatch(data)  <span class="hljs-comment">//这里可以在参数中定义dispatch，就不用写store。dispatch</span></span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(error));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>这样我们的TodoList.jsx文件就变成这样<figure class="highlight kotlin hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> React, &#123; Component &#125; from <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-comment">//引入store</span></span><br><span class="line"><span class="hljs-keyword">import</span> store from <span class="hljs-string">"../store/index"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//引入actionCreatros.js</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> &#123;</span><br><span class="line">  changeInput,</span><br><span class="line">  deleteItem,</span><br><span class="line">  addItem,</span><br><span class="line">  getListData</span><br><span class="line">&#125; from <span class="hljs-string">"../store/actionCreatros"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//引入ui组件</span></span><br><span class="line"><span class="hljs-keyword">import</span> TodoListUI from <span class="hljs-string">"./TodoListUI.jsx"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-title">extends</span> <span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//使用getstore()方法可以获取store的数据，就是存到store的数据</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.state = store.getState();</span><br><span class="line">    console.log(store.getState());</span><br><span class="line">    <span class="hljs-keyword">this</span>.changeValue = <span class="hljs-keyword">this</span>.changeValue.bind(<span class="hljs-keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.storeChange = <span class="hljs-keyword">this</span>.storeChange.bind(<span class="hljs-keyword">this</span>);</span><br><span class="line">    <span class="hljs-comment">//订阅state，调用storeChange这个方法</span></span><br><span class="line">    store.subscribe(<span class="hljs-keyword">this</span>.storeChange);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.deleteItem = <span class="hljs-keyword">this</span>.deleteItem.bind(<span class="hljs-keyword">this</span>);</span><br><span class="line">    <span class="hljs-keyword">this</span>.addList = <span class="hljs-keyword">this</span>.addList.bind(<span class="hljs-keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;TodoListUI</span><br><span class="line">        changeValue=&#123;<span class="hljs-keyword">this</span>.changeValue&#125;</span><br><span class="line">        addList=&#123;<span class="hljs-keyword">this</span>.addList&#125;</span><br><span class="line">        deleteItem=&#123;<span class="hljs-keyword">this</span>.deleteItem&#125;</span><br><span class="line">        inputValue=&#123;<span class="hljs-keyword">this</span>.state.inputValue&#125;</span><br><span class="line">        list=&#123;<span class="hljs-keyword">this</span>.state.list&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">//实现store数据从服务端得到，然后存放到store中</span></span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> action = getListData();</span><br><span class="line">    store.dispatch(action);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  storeChange() &#123;</span><br><span class="line">    <span class="hljs-comment">//重新设置state为最新的store</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.setState(store.getState());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeValue(e) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> action = changeInput(e.target.value);</span><br><span class="line">    store.dispatch(action); <span class="hljs-comment">//使用dispatch方法将action传递过去store就可以接收到值了,store接收到得值会直接发送到reducer中</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">//点击增加按钮，增加数据到列表中</span></span><br><span class="line">  addList() &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> action = addItem();</span><br><span class="line">    store.dispatch(action);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">//点击列表项进行删除</span></span><br><span class="line">  deleteItem(index) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> action = deleteItem(index);</span><br><span class="line">    store.dispatch(action);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="hljs-keyword">default</span> TodoList;</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;配置好Redux-thun接下来我就看看如何使用Redux-thun。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;Redux-thunk的使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Redux-thun
      
    
    </summary>
    
      <category term="Redux" scheme="https://zhongyuehui.github.io/categories/Redux/"/>
    
    
      <category term="Redux" scheme="https://zhongyuehui.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Redux-thunk中间件的配置</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/Redux-thunk%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/Redux-thunk中间件的配置/</id>
    <published>2019-08-04T09:51:40.000Z</published>
    <updated>2019-08-04T09:52:51.444Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Redux-thunk是Redux的一个插件，可以帮助我们更好的使用Redux。</p></blockquote><p>&lt;!-- more --&gt;</p><h2>Redux-thunk中间件的配置</h2><ul><li><p>在redux中需要使用redux-thunk的话，需要在store/index.js中配置一下</p></li><li><p>配置如下：<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-comment">// 1. 引入applyMiddleware、compose</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span></span><br><span class="line"><span class="hljs-comment">//引入reducer</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'./reducer'</span></span><br><span class="line"><span class="hljs-comment">// 2.引入redux-thunk</span></span><br><span class="line"><span class="hljs-keyword">import</span> thunk <span class="hljs-keyword">from</span> <span class="hljs-string">'redux-thunk'</span></span><br><span class="line"><span class="hljs-comment">//3.由于createStore中只能接收两个参数，如果将applyMiddleware(thunk)直接放到参数中，那么我们配置的redux调试工具就无法执行</span></span><br><span class="line"><span class="hljs-comment">//所以这个时候我们需要增强函数，redux已经帮助我们提供这个功能了</span></span><br><span class="line"><span class="hljs-keyword">const</span> store = createStore(</span><br><span class="line">    reducer,</span><br><span class="line">    applyMiddleware(thunk),</span><br><span class="line">    <span class="hljs-built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; <span class="hljs-built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION__())</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//暴露</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store</span><br></pre></td></tr></table></figure></p></li><li><p>以上这种方式会导致我们配置的redux失效，因为它只能接收两个参数</p></li><li><p>使用增强函数配置redux-thunk<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-comment">// 1. 引入applyMiddleware、compose</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span></span><br><span class="line"><span class="hljs-comment">//引入reducer</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'./reducer'</span></span><br><span class="line"><span class="hljs-comment">// 2.引入redux-thunk</span></span><br><span class="line"><span class="hljs-keyword">import</span> thunk <span class="hljs-keyword">from</span> <span class="hljs-string">'redux-thunk'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//判断是否有redux调试的配置项</span></span><br><span class="line"><span class="hljs-keyword">const</span> composeEnhancers = <span class="hljs-built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? <span class="hljs-built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;&#125;) : compose</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> enhancer = composeEnhancers(applyMiddleware(thunk))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//3.由于createStore中只能接收两个参数，如果将applyMiddleware(thunk)直接放到参数中，那么我们配置的redux调试工具就无法执行</span></span><br><span class="line"><span class="hljs-comment">//所以这个时候我们需要增强函数，redux已经帮助我们提供这个功能了</span></span><br><span class="line"><span class="hljs-keyword">const</span> store = createStore(</span><br><span class="line">    reducer,</span><br><span class="line">    enhancer</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//暴露</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store</span><br></pre></td></tr></table></figure></p></li><li><p>这样就配置完成了</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Redux-thunk是Redux的一个插件，可以帮助我们更好的使用Redux。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;Redux-thunk中间件的配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;
      
    
    </summary>
    
      <category term="Redux" scheme="https://zhongyuehui.github.io/categories/Redux/"/>
    
    
      <category term="Redux" scheme="https://zhongyuehui.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Redux的一些坑</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/Redux%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/Redux的一些坑/</id>
    <published>2019-08-04T09:50:26.000Z</published>
    <updated>2019-08-04T09:51:26.731Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Redux的一些坑，可以帮助我们避免开发中的一些问题。</p></blockquote><p>&lt;!-- more --&gt;</p><h2>Redux的一些坑</h2><ol><li><p>reducer.js中不是修改state，对state的数据进步操作，而是返回数据，然后store会监听这个数据的变化做出变化</p></li><li><p>reducer必须是纯函数</p><ul><li>如果函数的调用参数相同，则永远返回相同的结果。它不依赖于程序执行期间函数外部任何状态或数据的变化，必须只依赖于其输入参数。<figure class="highlight ada hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">function</span> <span class="hljs-title">priceAfterTax</span>(productPrice) &#123;</span><br><span class="line"><span class="hljs-keyword">return</span> <span class="hljs-type">(productPrice</span> * <span class="hljs-number">0.20</span>) + productPrice;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>这种不管外界怎么变化，时间怎么变化，运行多少次，结果都不会发生变化，这就是纯函数<figure class="highlight actionscript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">var</span> tax = <span class="hljs-number">20</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calculateTax</span><span class="hljs-params">(productPrice)</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (productPrice * (tax/<span class="hljs-number">100</span>)) + productPrice;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>这种数据计算结果依赖于外界数据的tax，这种函数就是不纯的</p></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Redux的一些坑，可以帮助我们避免开发中的一些问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;Redux的一些坑&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;reducer.js中不是修改stat
      
    
    </summary>
    
      <category term="Redux" scheme="https://zhongyuehui.github.io/categories/Redux/"/>
    
    
      <category term="Redux" scheme="https://zhongyuehui.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Redux的一些小技巧</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/Redux%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/Redux的一些小技巧/</id>
    <published>2019-08-04T09:48:49.000Z</published>
    <updated>2019-08-04T09:50:09.292Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Redux的一些小技巧，可以帮助我们更好的上手Redux.</p></blockquote><p>&lt;!-- more --&gt;</p><h1>Redux的一些小技巧</h1><h2>action中的type抽离</h2><ul><li><p>在redux中，我们需要操作store的话，都需要使用action帮助我们进行操作，但是action如果很多的话，<code>type</code>属性也会增多，我们在实践中发现，如果你的方法中设置的<code>type</code>属性和<code>reducer</code>中的<code>type</code>时不一致时，例如:<figure class="highlight flix hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="hljs-comment">//TodoLIst.jsx</span></span><br><span class="line">  deleteItem(<span class="hljs-keyword">index</span>) &#123;</span><br><span class="line">  const action = &#123;</span><br><span class="line">    <span class="hljs-keyword">type</span>: <span class="hljs-string">"deleteaItem"</span>, <span class="hljs-comment">//如果这里多写少写一个字母</span></span><br><span class="line">    <span class="hljs-keyword">index</span></span><br><span class="line">  &#125;;</span><br><span class="line">  store.dispatch(action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><figure class="highlight haxe hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">reducer.js</span><br><span class="line"><span class="hljs-keyword">if</span> (action.type === <span class="hljs-string">'deleteItem'</span>) &#123;</span><br><span class="line">    const <span class="hljs-keyword">new</span><span class="hljs-type">State</span> = JSON.parse(JSON.stringify(state))</span><br><span class="line">    <span class="hljs-comment">//根据传递的下标实现删除对应的数组</span></span><br><span class="line">    <span class="hljs-keyword">new</span><span class="hljs-type">State</span>.list.splice(action.index, <span class="hljs-number">1</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span><span class="hljs-type">State</span></span><br><span class="line"><span class="hljs-type"></span>&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>这种错误不会报错，但是你的代码就是执行不了，控制台也一切正常，这个时候你可能会花费很多时间在排错，这就降低了效率，所以我们将action的type单独抽离出一个actionTypoes.js文件，用来保存这些属性名<figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//actionTypoes.js</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> CHANGE_INPUT = <span class="hljs-string">"changeInput"</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ADD_ITEM = <span class="hljs-string">"addItem"</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> DELETE_ITEM = <span class="hljs-string">"deleteItem"</span></span><br></pre></td></tr></table></figure></p></li><li><p>然后在需要使用的地方导入这个文件按需引入一下就可以了<figure class="highlight kotlin hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; Component &#125; from <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Input, List, Button &#125; from <span class="hljs-string">"antd"</span>;</span><br><span class="line"><span class="hljs-comment">//引入store</span></span><br><span class="line"><span class="hljs-keyword">import</span> store from <span class="hljs-string">"../store/index"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//引入actionType</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; ADD_ITEM, CHANGE_INPUT, DELETE_ITEM &#125; from <span class="hljs-string">"../store/actionTypes"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-title">extends</span> <span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//使用getstore()方法可以获取store的数据，就是存到store的数据</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.state = store.getState();</span><br><span class="line">    <span class="hljs-keyword">this</span>.changeValue = <span class="hljs-keyword">this</span>.changeValue.bind(<span class="hljs-keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.storeChange = <span class="hljs-keyword">this</span>.storeChange.bind(<span class="hljs-keyword">this</span>);</span><br><span class="line">    <span class="hljs-comment">//订阅state，调用storeChange这个方法</span></span><br><span class="line">    store.subscribe(<span class="hljs-keyword">this</span>.storeChange);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.addList = <span class="hljs-keyword">this</span>.addList.bind(<span class="hljs-keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;&#123; width: <span class="hljs-number">500</span>, margin: <span class="hljs-number">20</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;Input</span><br><span class="line">            type=<span class="hljs-string">"primary"</span></span><br><span class="line">            style=&#123;&#123; width: <span class="hljs-number">200</span> &#125;&#125;</span><br><span class="line">            placeholder=&#123;<span class="hljs-keyword">this</span>.state.inputValue&#125;</span><br><span class="line">            value=&#123;<span class="hljs-keyword">this</span>.state.inputValue&#125;</span><br><span class="line">            onChange=&#123;<span class="hljs-keyword">this</span>.changeValue&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;Button onClick=&#123;<span class="hljs-keyword">this</span>.addList&#125;&gt;增加&lt;/Button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div style=&#123;&#123; width: <span class="hljs-number">200</span>, marginTop: <span class="hljs-number">20</span> &#125;&#125;&gt;</span><br><span class="line">          &lt;List</span><br><span class="line">            <span class="hljs-comment">//使用store的数据进行渲染</span></span><br><span class="line">            dataSource=&#123;<span class="hljs-keyword">this</span>.state.list&#125;</span><br><span class="line">            bordered</span><br><span class="line">            renderItem=&#123;(item, index) =&gt; (</span><br><span class="line">              <span class="hljs-comment">//因为在这里使用()的方式会执行这个函数，所以我们传递参数时可以使用bind，因为bind可以传递参数</span></span><br><span class="line">              <span class="hljs-comment">// &lt;List.Item onClick=&#123;this.deleteItem.bind(this, index)&#125;&gt;</span></span><br><span class="line">              <span class="hljs-comment">//也可以使用这种箭头函数的方式</span></span><br><span class="line">              &lt;List.Item onClick=&#123;() =&gt; <span class="hljs-keyword">this</span>.deleteItem(index)&#125;&gt;</span><br><span class="line">                &#123;item&#125;</span><br><span class="line">              &lt;/List.Item&gt;</span><br><span class="line">            )&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  changeValue(e) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> action = &#123;</span><br><span class="line">      <span class="hljs-comment">//修改store需要使用action</span></span><br><span class="line">      type: CHANGE_INPUT,</span><br><span class="line">      value: e.target.value</span><br><span class="line">    &#125;;</span><br><span class="line">    store.dispatch(action); <span class="hljs-comment">//使用dispatch方法将action传递过去store就可以接收到值了,store接收到得值会直接发送到reducer中</span></span><br><span class="line">  &#125;</span><br><span class="line">  storeChange() &#123;</span><br><span class="line">    <span class="hljs-comment">//重新设置state为最新的store</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.setState(store.getState());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">//点击增加按钮，增加数据到列表中</span></span><br><span class="line">  addList() &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> action = &#123;</span><br><span class="line">      type: ADD_ITEM</span><br><span class="line">    &#125;;</span><br><span class="line">    store.dispatch(action);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">//点击列表项进行删除</span></span><br><span class="line">  deleteItem(index) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> action = &#123;</span><br><span class="line">      type: DELETE_ITEM,</span><br><span class="line">      index</span><br><span class="line">    &#125;;</span><br><span class="line">    store.dispatch(action);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="hljs-keyword">default</span> TodoList;</span><br></pre></td></tr></table></figure></p></li><li><p>reducer.js<figure class="highlight pf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ADD_ITEM, CHANGE_INPUT, DELETE_ITEM &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">"./actionTypes"</span>;</span><br><span class="line"></span><br><span class="line">const <span class="hljs-keyword">default</span>Value = &#123;</span><br><span class="line">    inputValue: 'Writing Something',</span><br><span class="line">    list: [<span class="hljs-string">"今天的心情真好"</span>, <span class="hljs-string">"代码问题解决了"</span>, <span class="hljs-string">"以后要多重启"</span>]</span><br><span class="line">&#125;</span><br><span class="line">export <span class="hljs-keyword">default</span> (<span class="hljs-keyword">state</span> = <span class="hljs-keyword">default</span>Value, action) =&gt; &#123;</span><br><span class="line">    //此时已经可以接收到TodoList中发送得值，那么我们就需要处理一些发送过来的数据</span><br><span class="line">    //注意:reducer不能直接<span class="hljs-keyword">state</span>中的值，只能通过action来生成新的值，然后返回，store自己会监听值发生改变而变化</span><br><span class="line">    // console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">state</span>, action);</span><br><span class="line"></span><br><span class="line">//如果是action的type是changInput，做这步操作</span><br><span class="line">if (action.type === CHANGE_INPUT) &#123;</span><br><span class="line">    //深度克隆原数据</span><br><span class="line">    const newState = JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>))</span><br><span class="line">    //修改inputValue</span><br><span class="line">    newState.inputValue = action.value</span><br><span class="line">    console.<span class="hljs-keyword">log</span>(newState);</span><br><span class="line">    //返回新的<span class="hljs-keyword">state</span></span><br><span class="line">    return newState</span><br><span class="line">&#125;</span><br><span class="line">//如果是action的type是addItem，做这步操作</span><br><span class="line">if (action.type === ADD_ITEM) &#123;</span><br><span class="line">    //深度克隆原数据</span><br><span class="line">    const newState = JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>))</span><br><span class="line">    newState.list.push(newState.inputValue)</span><br><span class="line">    //push完成后将输入框清空,因为在上面的时候store已经被订阅了</span><br><span class="line">    newState.inputValue = ''</span><br><span class="line">    return newState</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (action.type === DELETE_ITEM) &#123;</span><br><span class="line">    const newState = JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>))</span><br><span class="line">    //根据传递的下标实现删除对应的数组</span><br><span class="line">    newState.list.splice(action.index, <span class="hljs-number">1</span>)</span><br><span class="line">    return newState</span><br><span class="line">&#125;</span><br><span class="line">return <span class="hljs-keyword">state</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>这样，如果你的属性名出现了问题，直接会告诉你哪行错误，快速定位，节约时间，而且如果你使用复制属性名的话一般不会出错</p></li></ul><h3>action数据抽离</h3><ul><li><p>在上面的代码中，我们可以看到每一个方法的action都写在Todolist中，这样如果太多的话不利于管理，所以我们需要将这个抽离出去，在store新建一个文件<code>actionCreators.js</code><figure class="highlight typescript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//actionCreators.js</span></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; ADD_ITEM, CHANGE_INPUT, DELETE_ITEM &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'./actionTypes'</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> changeInput = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="hljs-keyword">type</span>: CHANGE_INPUT,</span><br><span class="line">    value</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> addItem = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    <span class="hljs-keyword">type</span>: ADD_ITEM,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> deleteItem = <span class="hljs-function">(<span class="hljs-params">index</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="hljs-keyword">type</span>: DELETE_ITEM,</span><br><span class="line">    index</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></li><li><p>这样我们就实现了action的抽离，只需要调用引用<code>actionCreators</code>暴露出来的方法就行，而且不需要引用<code>actionTypes.js</code>了<figure class="highlight kotlin hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//TodoList.jsx</span></span><br><span class="line"><span class="hljs-keyword">import</span> React, &#123; Component &#125; from <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Input, List, Button &#125; from <span class="hljs-string">"antd"</span>;</span><br><span class="line"><span class="hljs-comment">//引入store</span></span><br><span class="line"><span class="hljs-keyword">import</span> store from <span class="hljs-string">"../store/index"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//引入actionCreatros.js</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">import</span> &#123; changeInput, deleteItem, addItem &#125; from <span class="hljs-string">"../store/actionCreatros"</span>;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-title">extends</span> <span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//使用getstore()方法可以获取store的数据，就是存到store的数据</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.state = store.getState();</span><br><span class="line">    <span class="hljs-keyword">this</span>.changeValue = <span class="hljs-keyword">this</span>.changeValue.bind(<span class="hljs-keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.storeChange = <span class="hljs-keyword">this</span>.storeChange.bind(<span class="hljs-keyword">this</span>);</span><br><span class="line">    <span class="hljs-comment">//订阅state，调用storeChange这个方法</span></span><br><span class="line">    store.subscribe(<span class="hljs-keyword">this</span>.storeChange);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.addList = <span class="hljs-keyword">this</span>.addList.bind(<span class="hljs-keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;&#123; width: <span class="hljs-number">500</span>, margin: <span class="hljs-number">20</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;Input</span><br><span class="line">            type=<span class="hljs-string">"primary"</span></span><br><span class="line">            style=&#123;&#123; width: <span class="hljs-number">200</span> &#125;&#125;</span><br><span class="line">            placeholder=&#123;<span class="hljs-keyword">this</span>.state.inputValue&#125;</span><br><span class="line">            value=&#123;<span class="hljs-keyword">this</span>.state.inputValue&#125;</span><br><span class="line">            onChange=&#123;<span class="hljs-keyword">this</span>.changeValue&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;Button onClick=&#123;<span class="hljs-keyword">this</span>.addList&#125;&gt;增加&lt;/Button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div style=&#123;&#123; width: <span class="hljs-number">200</span>, marginTop: <span class="hljs-number">20</span> &#125;&#125;&gt;</span><br><span class="line">          &lt;List</span><br><span class="line">            <span class="hljs-comment">//使用store的数据进行渲染</span></span><br><span class="line">            dataSource=&#123;<span class="hljs-keyword">this</span>.state.list&#125;</span><br><span class="line">            bordered</span><br><span class="line">            renderItem=&#123;(item, index) =&gt; (</span><br><span class="line">              <span class="hljs-comment">//因为在这里使用()的方式会执行这个函数，所以我们传递参数时可以使用bind，因为bind可以传递参数</span></span><br><span class="line">              <span class="hljs-comment">// &lt;List.Item onClick=&#123;this.deleteItem.bind(this, index)&#125;&gt;</span></span><br><span class="line">              <span class="hljs-comment">//也可以使用这种箭头函数的方式</span></span><br><span class="line">              &lt;List.Item onClick=&#123;() =&gt; <span class="hljs-keyword">this</span>.deleteItem(index)&#125;&gt;</span><br><span class="line">                &#123;item&#125;</span><br><span class="line">              &lt;/List.Item&gt;</span><br><span class="line">            )&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  storeChange() &#123;</span><br><span class="line">    <span class="hljs-comment">//重新设置state为最新的store</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.setState(store.getState());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  changeValue(e) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> action = changeInput(e.target.value);</span><br><span class="line">    store.dispatch(action); <span class="hljs-comment">//使用dispatch方法将action传递过去store就可以接收到值了,store接收到得值会直接发送到reducer中</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">//点击增加按钮，增加数据到列表中</span></span><br><span class="line">  addList() &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> action = addItem();</span><br><span class="line">    store.dispatch(action);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">//点击列表项进行删除</span></span><br><span class="line">  deleteItem(index) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> action = deleteItem(index);</span><br><span class="line">    store.dispatch(action);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="hljs-keyword">default</span> TodoList;</span><br></pre></td></tr></table></figure></p></li><li><p>其实就相当于一个返回了一个函数<figure class="highlight fortran hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const deleteItem = (<span class="hljs-built_in">index</span>) =&gt; (&#123;</span><br><span class="line"><span class="hljs-keyword">type</span>: DELETE_ITEM,</span><br><span class="line"><span class="hljs-built_in">index</span></span><br><span class="line">&#125;)</span><br><span class="line">----&gt;</span><br><span class="line">const deleteItem= <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(index)</span></span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span>&#123;</span><br><span class="line">        <span class="hljs-keyword">type</span>: DELETE_ITEM,</span><br><span class="line">        <span class="hljs-built_in">index</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>我们在使用的时候就是调用这个函数，然后它会返回这些数据，这是ES6箭头函数的用法<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="hljs-comment">//ES6</span></span><br><span class="line"><span class="hljs-keyword">const</span> test=<span class="hljs-function">(<span class="hljs-params">index</span>)=&gt;</span>(index)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//ES5</span></span><br><span class="line">test=<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">index</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> index</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">//当然一个参数可以省略()，默认会返回，但是如果第一个参数是一个对象的话，就不能省略，因为它不知道你是传递参数还写代码</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//如果不写()</span></span><br><span class="line"><span class="hljs-keyword">const</span> test = <span class="hljs-function"><span class="hljs-params">()</span>=&gt;</span> &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">'zs'</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">12</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//根本没有返回值，如果要返回对象需要加()表示传递的参数是一个对象</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">index</span>)</span>&#123;</span><br><span class="line">    name:<span class="hljs-string">'zs'</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">12</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Redux的一些小技巧，可以帮助我们更好的上手Redux.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h1&gt;Redux的一些小技巧&lt;/h1&gt;
&lt;h2&gt;action中的type抽离&lt;/h2&gt;
&lt;ul&gt;
      
    
    </summary>
    
      <category term="Redux" scheme="https://zhongyuehui.github.io/categories/Redux/"/>
    
    
      <category term="Redux" scheme="https://zhongyuehui.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Redux修改store的数据</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/Redux%E4%BF%AE%E6%94%B9store%E7%9A%84%E6%95%B0%E6%8D%AE/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/Redux修改store的数据/</id>
    <published>2019-08-04T09:46:02.000Z</published>
    <updated>2019-08-04T09:48:16.939Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在redux中，我们不能直接修改store中的数据，如果需要修改，则需要使用<code>action</code>来进行改变数据。</p></blockquote><p>&lt;!-- more --&gt;</p><h2>修改store中的数据</h2><ul><li><p>在redux中，我们不能直接修改store中的数据，如果需要修改，则需要使用<code>action</code>来进行修改(重新复制，并不是去修改)，<code>action</code>是一个对象，其中<code>type</code>属性是必须的，然后使用<code>store.dispatch(action)</code>将数据传递给<code>reducer.js</code>中进行处理</p></li><li><p>如:我们输入在<code>Input</code>输入数据的时候，将最新的数据发送到store中<figure class="highlight scala hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-type">React</span>, &#123; <span class="hljs-type">Component</span> &#125; from <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; <span class="hljs-type">Input</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Button</span> &#125; from <span class="hljs-string">"antd"</span>;</span><br><span class="line"><span class="hljs-comment">//引入store</span></span><br><span class="line"><span class="hljs-keyword">import</span> store from <span class="hljs-string">"../store/index"</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//使用getstore()方法可以获取store的数据，就是存到store的数据</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.state = store.getState();</span><br><span class="line">    <span class="hljs-keyword">this</span>.changeValue = <span class="hljs-keyword">this</span>.changeValue.bind(<span class="hljs-keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;&#123; width: <span class="hljs-number">500</span>, margin: <span class="hljs-number">20</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;<span class="hljs-type">Input</span></span><br><span class="line">            <span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">"primary"</span></span><br><span class="line">            style=&#123;&#123; width: <span class="hljs-number">200</span> &#125;&#125;</span><br><span class="line">            placeholder=&#123;<span class="hljs-keyword">this</span>.state.inputValue&#125;</span><br><span class="line">            onChange=&#123;<span class="hljs-keyword">this</span>.changeValue&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;<span class="hljs-type">Button</span>&gt;增加&lt;/<span class="hljs-type">Button</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div style=&#123;&#123; width: <span class="hljs-number">200</span>, marginTop: <span class="hljs-number">20</span> &#125;&#125;&gt;</span><br><span class="line">          &lt;<span class="hljs-type">List</span></span><br><span class="line">            <span class="hljs-comment">//使用store的数据进行渲染</span></span><br><span class="line">            dataSource=&#123;<span class="hljs-keyword">this</span>.state.list&#125;</span><br><span class="line">            bordered</span><br><span class="line">            renderItem=&#123;item =&gt; &lt;<span class="hljs-type">List</span>.<span class="hljs-type">Item</span>&gt;&#123;item&#125;&lt;/<span class="hljs-type">List</span>.<span class="hljs-type">Item</span>&gt;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  changeValue(e) &#123;</span><br><span class="line">    const action = &#123;</span><br><span class="line">      <span class="hljs-comment">//修改store需要使用action，type属性是必须的</span></span><br><span class="line">      <span class="hljs-class"><span class="hljs-keyword">type</span></span>: <span class="hljs-string">"changeInput"</span>,</span><br><span class="line">      value: e.target.value</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="hljs-comment">//使用dispatch方法将action传递过去store就可以接收到值了,store接收到得值会直接发送到reducer中</span></span><br><span class="line">    store.dispatch(action); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="hljs-keyword">default</span> <span class="hljs-type">TodoList</span>;</span><br></pre></td></tr></table></figure></p></li><li><p>action发送数据后，store会收到值，但是他默认发送给了reduces，我们在reduces就可以获取到最新的数据<figure class="highlight pf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    const <span class="hljs-keyword">default</span>Value = &#123;</span><br><span class="line">    inputValue: 'Writing Something',</span><br><span class="line">    list: [<span class="hljs-string">"今天的心情真好"</span>, <span class="hljs-string">"代码问题解决了"</span>, <span class="hljs-string">"以后要多重启"</span>]</span><br><span class="line">&#125;</span><br><span class="line">export <span class="hljs-keyword">default</span> (<span class="hljs-keyword">state</span> = <span class="hljs-keyword">default</span>Value, action) =&gt; &#123;</span><br><span class="line">    //此时已经可以接收到TodoList中发送得值，那么我们就需要处理一些发送过来的数据</span><br><span class="line">    //注意:reducer不能直接<span class="hljs-keyword">state</span>中的值，只能通过action来生成新的值，然后返回，store自己会监听值发生改变而变化</span><br><span class="line">    // console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">state</span>, action);</span><br><span class="line"></span><br><span class="line">    if (action.type === 'changeInput') &#123;</span><br><span class="line">        //深度克隆原数据</span><br><span class="line">        const newState = JSON.parse(JSON.stringify(<span class="hljs-keyword">state</span>))</span><br><span class="line">        //修改inputValue</span><br><span class="line">        newState.inputValue = action.value</span><br><span class="line">        console.<span class="hljs-keyword">log</span>(newState);</span><br><span class="line">        //返回新的<span class="hljs-keyword">state</span></span><br><span class="line">        return newState</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="hljs-keyword">state</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p>这个时候，我们已经能够在redux调试工具中看到redux中的state发生变化了，但是我们还需要订阅store，不然input如果含有<code>value</code>属性时会出<code>BUG</code>，订阅的作用是input的值改变后，重新设置state的值与store的值同步，因为每次<code>Input</code>改变都会向<code>store</code>发送最新的数据<figure class="highlight kotlin hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> React, &#123; Component &#125; from <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; Input, List, Button &#125; from <span class="hljs-string">"antd"</span>;</span><br><span class="line"><span class="hljs-comment">//引入store</span></span><br><span class="line"><span class="hljs-keyword">import</span> store from <span class="hljs-string">"../store/index"</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-title">extends</span> <span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//使用getstore()方法可以获取store的数据，就是存到store的数据</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.state = store.getState();</span><br><span class="line">    <span class="hljs-keyword">this</span>.changeValue = <span class="hljs-keyword">this</span>.changeValue.bind(<span class="hljs-keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.storeChange = <span class="hljs-keyword">this</span>.storeChange.bind(<span class="hljs-keyword">this</span>);</span><br><span class="line">    <span class="hljs-comment">//订阅state，调用storeChange这个方法</span></span><br><span class="line">    store.subscribe(<span class="hljs-keyword">this</span>.storeChange);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;&#123; width: <span class="hljs-number">500</span>, margin: <span class="hljs-number">20</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;Input</span><br><span class="line">            type=<span class="hljs-string">"primary"</span></span><br><span class="line">            style=&#123;&#123; width: <span class="hljs-number">200</span> &#125;&#125;</span><br><span class="line">            placeholder=&#123;<span class="hljs-keyword">this</span>.state.inputValue&#125;</span><br><span class="line">            value=&#123;<span class="hljs-keyword">this</span>.state.inputValue&#125;</span><br><span class="line">            onChange=&#123;<span class="hljs-keyword">this</span>.changeValue&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;Button&gt;增加&lt;/Button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div style=&#123;&#123; width: <span class="hljs-number">200</span>, marginTop: <span class="hljs-number">20</span> &#125;&#125;&gt;</span><br><span class="line">          &lt;List</span><br><span class="line">            <span class="hljs-comment">//使用store的数据进行渲染</span></span><br><span class="line">            dataSource=&#123;<span class="hljs-keyword">this</span>.state.list&#125;</span><br><span class="line">            bordered</span><br><span class="line">            renderItem=&#123;item =&gt; &lt;List.Item&gt;&#123;item&#125;&lt;/List.Item&gt;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  changeValue(e) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> action = &#123;</span><br><span class="line">      <span class="hljs-comment">//修改store需要使用action</span></span><br><span class="line">      type: <span class="hljs-string">"changeInput"</span>,</span><br><span class="line">      value: e.target.value</span><br><span class="line">    &#125;;</span><br><span class="line">    store.dispatch(action); <span class="hljs-comment">//使用dispatch方法将action传递过去store就可以接收到值了,store接收到得值会直接发送到reducer中</span></span><br><span class="line">  &#125;</span><br><span class="line">  storeChange() &#123;</span><br><span class="line">    <span class="hljs-comment">//重新设置state为最新的store</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.setState(store.getState());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="hljs-keyword">default</span> TodoList;</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在redux中，我们不能直接修改store中的数据，如果需要修改，则需要使用&lt;code&gt;action&lt;/code&gt;来进行改变数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;!-- more --&amp;gt;&lt;/p&gt;
&lt;h2&gt;修改store中的
      
    
    </summary>
    
      <category term="Redux" scheme="https://zhongyuehui.github.io/categories/Redux/"/>
    
    
      <category term="Redux" scheme="https://zhongyuehui.github.io/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Redex的准备</title>
    <link href="https://zhongyuehui.github.io/2019/08/04/Redex%E7%9A%84%E5%87%86%E5%A4%87/"/>
    <id>https://zhongyuehui.github.io/2019/08/04/Redex的准备/</id>
    <published>2019-08-04T09:42:08.000Z</published>
    <updated>2019-08-04T09:46:47.076Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Redux 是 JavaScript 状态容器， 提供可预测化的状态管理。那什么是可以预测化，我的理解就是根据一个固定的输入，必然会得到一个固定的结果。redux是专门为react开发的，但并不是只能用于react,可以用于任何界面库</p></blockquote><p>&lt;!-- more --&gt;</p><h2>使用Ant Design 创建列表</h2><ul><li>创建一个列表<figure class="highlight scala hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">//TodoList.jsx</span></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-type">React</span>, &#123; <span class="hljs-type">Component</span> &#125; from <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; <span class="hljs-type">Button</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Input</span> &#125; from <span class="hljs-string">"antd"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">"antd/dist/antd.css"</span>;</span><br><span class="line"></span><br><span class="line">const data = [<span class="hljs-string">"今天的心情特别不好"</span>, <span class="hljs-string">"因为代码老是出问题"</span>, <span class="hljs-string">"感到很头疼"</span>];</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;<span class="hljs-type">Input</span> placeholder=<span class="hljs-string">"please wirting"</span> style=&#123;&#123; width: <span class="hljs-number">200</span> &#125;&#125; /&gt;</span><br><span class="line">          &lt;<span class="hljs-type">Button</span>&gt;增加&lt;/<span class="hljs-type">Button</span>&gt;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;<span class="hljs-type">List</span></span><br><span class="line">              bordered=&#123;<span class="hljs-literal">true</span>&#125; <span class="hljs-comment">//是否使用边框</span></span><br><span class="line">              dataSource=&#123;data&#125; <span class="hljs-comment">//列表数据源</span></span><br><span class="line">              renderItem=&#123;item =&gt; &lt;<span class="hljs-type">List</span>.<span class="hljs-type">Item</span>&gt;&#123;item&#125;&lt;/<span class="hljs-type">List</span>.<span class="hljs-type">Item</span>&gt;&#125; <span class="hljs-comment">//自定义渲染列表项</span></span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export <span class="hljs-keyword">default</span> <span class="hljs-type">TodoList</span>;</span><br></pre></td></tr></table></figure></li></ul><h3>安装Redux</h3><ul><li>安装:<code>yarn add redux</code></li></ul><h4>初始化</h4><ul><li><p>在src下创建一个store文件夹，文件夹下创建index.js、reducer.js两个文件</p></li><li><p>在index.js中，我们需要创建redux仓库<figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">'redux'</span></span><br><span class="line"><span class="hljs-comment">//引入reducer</span></span><br><span class="line"><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">'./reducer'</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//创建仓库</span></span><br><span class="line"><span class="hljs-keyword">const</span> store = createStore(reducer)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">//暴露</span></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store</span><br></pre></td></tr></table></figure></p></li><li><p>在reducer.js中，我们需要创建管理程序,里面用来存放业务逻辑<figure class="highlight pf hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const <span class="hljs-keyword">default</span>Value = &#123;</span><br><span class="line">inputValue: 'Writing Something',</span><br><span class="line">list: [<span class="hljs-string">"今天的心情真好"</span>, <span class="hljs-string">"代码问题解决了"</span>, <span class="hljs-string">"以后要多重启"</span>]</span><br><span class="line">&#125;</span><br><span class="line">export <span class="hljs-keyword">default</span> (<span class="hljs-keyword">state</span> = <span class="hljs-keyword">default</span>Value, action) =&gt; &#123;</span><br><span class="line">    return <span class="hljs-keyword">state</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li></ul><h4>获取store中的数据</h4><ul><li>在TodoLost.jsx中获取store中的数据<figure class="highlight scala hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-type">React</span>, &#123; <span class="hljs-type">Component</span> &#125; from <span class="hljs-string">"react"</span>;</span><br><span class="line"><span class="hljs-keyword">import</span> &#123; <span class="hljs-type">Input</span>, <span class="hljs-type">List</span>, <span class="hljs-type">Button</span> &#125; from <span class="hljs-string">"antd"</span>;</span><br><span class="line"><span class="hljs-comment">//引入store</span></span><br><span class="line"><span class="hljs-keyword">import</span> store from <span class="hljs-string">"../store/index"</span>;</span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">//使用getstore()方法可以获取store的数据，就是存到store的数据</span></span><br><span class="line">    console.log(store.getState());</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.state = store.getState();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> (</span><br><span class="line">      &lt;div style=&#123;&#123; width: <span class="hljs-number">500</span>, margin: <span class="hljs-number">20</span> &#125;&#125;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;<span class="hljs-type">Input</span></span><br><span class="line">            <span class="hljs-class"><span class="hljs-keyword">type</span></span>=<span class="hljs-string">"primary"</span></span><br><span class="line">            style=&#123;&#123; width: <span class="hljs-number">200</span> &#125;&#125;</span><br><span class="line">            placeholder=&#123;<span class="hljs-keyword">this</span>.state.inputValue&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">          &lt;<span class="hljs-type">Button</span>&gt;增加&lt;/<span class="hljs-type">Button</span>&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div style=&#123;&#123; width: <span class="hljs-number">200</span>, marginTop: <span class="hljs-number">20</span> &#125;&#125;&gt;</span><br><span class="line">          &lt;<span class="hljs-type">List</span></span><br><span class="line">            <span class="hljs-comment">//使用store的数据进行渲染</span></span><br><span class="line">            dataSource=&#123;<span class="hljs-keyword">this</span>.state.list&#125;</span><br><span class="line">            bordered</span><br><span class="line">            renderItem=&#123;item =&gt; &lt;<span class="hljs-type">List</span>.<span class="hljs-type">Item</span>&gt;&#123;item&#125;&lt;/<span class="hljs-type">List</span>.<span class="hljs-type">Item</span>&gt;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export <span class="hljs-keyword">default</span> <span class="hljs-type">TodoList</span>;</span><br></pre></td></tr></table></figure></li></ul><h4>在chrome中使用redux调试工具</h4><ul><li><p>在chrome应用商店下载redux dev</p></li><li><p>然后在配置中勾选允许访问文件地址，然后重启chrome就可以在控制台看到redux了</p></li><li><p>配置redux，在store/index.js中创建store的时候加入一个参数<figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const store = createStore(</span><br><span class="line">reducer, /<span class="hljs-bullet">* preloadedState, *</span>/</span><br><span class="line"><span class="hljs-bullet">+  </span>window.<span class="hljs-strong">__REDUX_DEVTOOLS_EXTENSION__</span> &amp;&amp; window.<span class="hljs-strong">__REDUX_DEVTOOLS_EXTENSION__</span>()</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p></li><li><p>这样就可以在调试工具中看到了</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Redux 是 JavaScript 状态容器， 提供可预测化的状态管理。那什么是可以预测化，我的理解就是根据一个固定的输入，必然会得到一个固定的结果。redux是专门为react开发的，但并不是只能用于react,可以用于任何界面库&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="Redux" scheme="https://zhongyuehui.github.io/categories/Redux/"/>
    
    
      <category term="Redux" scheme="https://zhongyuehui.github.io/tags/Redux/"/>
    
  </entry>
  
</feed>
